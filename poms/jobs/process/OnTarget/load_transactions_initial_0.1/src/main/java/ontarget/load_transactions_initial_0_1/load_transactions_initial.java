// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package ontarget.load_transactions_initial_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.TalendDate;
import routines.Relational;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJava_4
//import java.util.List;

//the import part of tJava_5
//import java.util.List;

//the import part of tJava_2
//import java.util.List;

//the import part of tJava_3
//import java.util.List;

//the import part of tJava_1
//import java.util.List;

//the import part of tJava_7
//import java.util.List;

//the import part of tJava_6
//import java.util.List;

//the import part of tJava_8
//import java.util.List;

//the import part of tJava_9
//import java.util.List;

@SuppressWarnings("unused")

/**
 * Job: load_transactions_initial Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status
 */
public class load_transactions_initial implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (ServiceID != null) {

				this.setProperty("ServiceID", ServiceID.toString());

			}

			if (Total_Num_Services != null) {

				this.setProperty("Total_Num_Services", Total_Num_Services.toString());

			}

			if (scale != null) {

				this.setProperty("scale", scale.toString());

			}

			if (lower_limit != null) {

				this.setProperty("lower_limit", lower_limit.toString());

			}

			if (upper_limit != null) {

				this.setProperty("upper_limit", upper_limit.toString());

			}

		}

		// if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if (NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

		public String ServiceID;

		public String getServiceID() {
			return this.ServiceID;
		}

		public Integer Total_Num_Services;

		public Integer getTotal_Num_Services() {
			return this.Total_Num_Services;
		}

		public Integer scale;

		public Integer getScale() {
			return this.scale;
		}

		public Integer lower_limit;

		public Integer getLower_limit() {
			return this.lower_limit;
		}

		public Integer upper_limit;

		public Integer getUpper_limit() {
			return this.upper_limit;
		}
	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "load_transactions_initial";
	private final String projectName = "ONTARGET";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	public void setDataSourceReferences(List serviceReferences) throws Exception {

		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();

		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils
				.getServices(serviceReferences, javax.sql.DataSource.class).entrySet()) {
			dataSources.put(entry.getKey(), entry.getValue());
			talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					load_transactions_initial.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(load_transactions_initial.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLoop_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLoop_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLoop_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tBigQueryInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tBigQueryInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tBigQueryOutput_1_tBQOB_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tBigQueryOutput_1_tBQBE_error(exception, errorComponent, globalMap);

	}

	public void tBigQueryOutput_1_tBQBE_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tBigQueryOutput_4_tBQOB_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tBigQueryOutput_4_tBQBE_error(exception, errorComponent, globalMap);

	}

	public void tBigQueryOutput_4_tBQBE_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tBigQueryOutput_3_tBQOB_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tBigQueryOutput_3_tBQBE_error(exception, errorComponent, globalMap);

	}

	public void tBigQueryOutput_3_tBQBE_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tBigQueryOutput_5_tBQOB_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tBigQueryOutput_5_tBQBE_error(exception, errorComponent, globalMap);

	}

	public void tBigQueryOutput_5_tBQBE_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tBigQueryOutput_6_tBQOB_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tBigQueryOutput_6_tBQBE_error(exception, errorComponent, globalMap);

	}

	public void tBigQueryOutput_6_tBQBE_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_4_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLoop_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tBigQueryInput_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_4_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_7_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_6_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_5_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_8_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_6_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_9_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_ONTARGET_load_transactions_initial = new byte[0];
		static byte[] commonByteArray_ONTARGET_load_transactions_initial = new byte[0];

		public Long rn;

		public Long getRn() {
			return this.rn;
		}

		public Long id;

		public Long getId() {
			return this.id;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ONTARGET_load_transactions_initial) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.rn = null;
					} else {
						this.rn = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.id = null;
					} else {
						this.id = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ONTARGET_load_transactions_initial) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.rn = null;
					} else {
						this.rn = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.id = null;
					} else {
						this.id = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.rn == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.rn);
				}

				// Long

				if (this.id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.id);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Long

				if (this.rn == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.rn);
				}

				// Long

				if (this.id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.id);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("rn=" + String.valueOf(rn));
			sb.append(",id=" + String.valueOf(id));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tFileOutputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_1", false);
				start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tFileOutputDelimited_1 = 0;

				String fileName_tFileOutputDelimited_1 = "";
				fileName_tFileOutputDelimited_1 = (new java.io.File(
						"/Applications/TOSDI-8.0.1/studio/workspace/full_service_ids_"
								+ TalendDate.formatDate("yyyyMMdd", TalendDate.getCurrentDate()) + ".txt"))
										.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_1 = null;
				String extension_tFileOutputDelimited_1 = null;
				String directory_tFileOutputDelimited_1 = null;
				if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
								fileName_tFileOutputDelimited_1.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
							fileName_tFileOutputDelimited_1.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
								fileName_tFileOutputDelimited_1.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					}
					directory_tFileOutputDelimited_1 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_1 = true;
				java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME", fileName_tFileOutputDelimited_1);
				int nb_line_tFileOutputDelimited_1 = 0;
				int splitedFileNo_tFileOutputDelimited_1 = 0;
				int currentRow_tFileOutputDelimited_1 = 0;

				final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /**
																		 * Start field
																		 * tFileOutputDelimited_1:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
					if (!dir_tFileOutputDelimited_1.exists()) {
						dir_tFileOutputDelimited_1.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_1 = null;

				java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
				if (fileToDelete_tFileOutputDelimited_1.exists()) {
					fileToDelete_tFileOutputDelimited_1.delete();
				}
				outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false), "ISO-8859-15"));

				resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
				resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

				/**
				 * [tFileOutputDelimited_1 begin ] stop
				 */

				/**
				 * [tDBInput_2 begin ] start
				 */

				ok_Hash.put("tDBInput_2", false);
				start_Hash.put("tDBInput_2", System.currentTimeMillis());

				currentComponent = "tDBInput_2";

				int tos_count_tDBInput_2 = 0;

				int nb_line_tDBInput_2 = 0;
				java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBInput_2 = java.lang.Class.forName(driverClass_tDBInput_2);
				String dbUser_tDBInput_2 = "datafusion";

				final String decryptedPassword_tDBInput_2 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:vV6ByaYKPDh/lOqK8Z+xSfr7ZUo6FYHx2oCmOp0EnBhGG9LnFk0=");

				String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;

				String url_tDBInput_2 = "jdbc:postgresql://" + "localhost" + ":" + "5431" + "/" + "OnTarget";

				conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2, dbUser_tDBInput_2,
						dbPwd_tDBInput_2);

				conn_tDBInput_2.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

				String dbquery_tDBInput_2 = "select row_number () over(order by id) as rn, id from smallmiracle.blserviceauthorized";

				globalMap.put("tDBInput_2_QUERY", dbquery_tDBInput_2);
				java.sql.ResultSet rs_tDBInput_2 = null;

				try {
					rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
					java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
					int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

					String tmpContent_tDBInput_2 = null;

					while (rs_tDBInput_2.next()) {
						nb_line_tDBInput_2++;

						if (colQtyInRs_tDBInput_2 < 1) {
							row2.rn = null;
						} else {

							row2.rn = rs_tDBInput_2.getLong(1);
							if (rs_tDBInput_2.wasNull()) {
								row2.rn = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 2) {
							row2.id = null;
						} else {

							row2.id = rs_tDBInput_2.getLong(2);
							if (rs_tDBInput_2.wasNull()) {
								row2.id = null;
							}
						}

						/**
						 * [tDBInput_2 begin ] stop
						 */

						/**
						 * [tDBInput_2 main ] start
						 */

						currentComponent = "tDBInput_2";

						tos_count_tDBInput_2++;

						/**
						 * [tDBInput_2 main ] stop
						 */

						/**
						 * [tDBInput_2 process_data_begin ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_1 main ] start
						 */

						currentComponent = "tFileOutputDelimited_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row2"

							);
						}

						StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
						if (row2.rn != null) {
							sb_tFileOutputDelimited_1.append(row2.rn);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row2.id != null) {
							sb_tFileOutputDelimited_1.append(row2.id);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);

						nb_line_tFileOutputDelimited_1++;
						resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

						outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());

						tos_count_tFileOutputDelimited_1++;

						/**
						 * [tFileOutputDelimited_1 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileOutputDelimited_1";

						/**
						 * [tFileOutputDelimited_1 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileOutputDelimited_1";

						/**
						 * [tFileOutputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 process_data_end ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 end ] start
						 */

						currentComponent = "tDBInput_2";

					}
				} finally {
					if (rs_tDBInput_2 != null) {
						rs_tDBInput_2.close();
					}
					if (stmt_tDBInput_2 != null) {
						stmt_tDBInput_2.close();
					}
					if (conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {

						conn_tDBInput_2.commit();

						conn_tDBInput_2.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}
				globalMap.put("tDBInput_2_NB_LINE", nb_line_tDBInput_2);

				ok_Hash.put("tDBInput_2", true);
				end_Hash.put("tDBInput_2", System.currentTimeMillis());

				/**
				 * [tDBInput_2 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 end ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (outtFileOutputDelimited_1 != null) {
					outtFileOutputDelimited_1.flush();
					outtFileOutputDelimited_1.close();
				}

				globalMap.put("tFileOutputDelimited_1_NB_LINE", nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME", fileName_tFileOutputDelimited_1);

				resourceMap.put("finish_tFileOutputDelimited_1", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tFileOutputDelimited_1", true);
				end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_1 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_2:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
			}

			tJava_4Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_2 finally ] start
				 */

				currentComponent = "tDBInput_2";

				/**
				 * [tDBInput_2 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (resourceMap.get("finish_tFileOutputDelimited_1") == null) {

					java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_1");
					if (outtFileOutputDelimited_1 != null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}

				}

				/**
				 * [tFileOutputDelimited_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}

	public void tJava_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tJava_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tJava_4 begin ] start
				 */

				ok_Hash.put("tJava_4", false);
				start_Hash.put("tJava_4", System.currentTimeMillis());

				currentComponent = "tJava_4";

				int tos_count_tJava_4 = 0;

				Integer Total_Service_IDs = (Integer) globalMap.get("tDBInput_2_NB_LINE");
				context.Total_Num_Services = Total_Service_IDs;
				System.out.println("There are " + context.Total_Num_Services + " services available from source.");

				/**
				 * [tJava_4 begin ] stop
				 */

				/**
				 * [tJava_4 main ] start
				 */

				currentComponent = "tJava_4";

				tos_count_tJava_4++;

				/**
				 * [tJava_4 main ] stop
				 */

				/**
				 * [tJava_4 process_data_begin ] start
				 */

				currentComponent = "tJava_4";

				/**
				 * [tJava_4 process_data_begin ] stop
				 */

				/**
				 * [tJava_4 process_data_end ] start
				 */

				currentComponent = "tJava_4";

				/**
				 * [tJava_4 process_data_end ] stop
				 */

				/**
				 * [tJava_4 end ] start
				 */

				currentComponent = "tJava_4";

				ok_Hash.put("tJava_4", true);
				end_Hash.put("tJava_4", System.currentTimeMillis());

				/**
				 * [tJava_4 end ] stop
				 */
			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_4:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
			}

			tLoop_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tJava_4 finally ] start
				 */

				currentComponent = "tJava_4";

				/**
				 * [tJava_4 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_4_SUBPROCESS_STATE", 1);
	}

	public void tLoop_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tLoop_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tLoop_1 begin ] start
				 */

				int NB_ITERATE_tJava_5 = 0; // for statistics

				ok_Hash.put("tLoop_1", false);
				start_Hash.put("tLoop_1", System.currentTimeMillis());

				currentComponent = "tLoop_1";

				int tos_count_tLoop_1 = 0;

				int current_iteration_tLoop_1 = 0;

				int i = 0;

				while (i * context.scale <= context.Total_Num_Services) {

					current_iteration_tLoop_1++;
					globalMap.put("tLoop_1_CURRENT_ITERATION", current_iteration_tLoop_1);

					/**
					 * [tLoop_1 begin ] stop
					 */

					/**
					 * [tLoop_1 main ] start
					 */

					currentComponent = "tLoop_1";

					tos_count_tLoop_1++;

					/**
					 * [tLoop_1 main ] stop
					 */

					/**
					 * [tLoop_1 process_data_begin ] start
					 */

					currentComponent = "tLoop_1";

					/**
					 * [tLoop_1 process_data_begin ] stop
					 */
					NB_ITERATE_tJava_5++;

					if (execStat) {
						runStat.updateStatOnConnection("OnComponentOk5", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("row7", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("OnSubjobOk3", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("row6", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("OnComponentOk3", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("iterate1", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("OnSubjobOk4", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("OnSubjobOk9", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("OnRowsEnd", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("OnRowsEnd", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("row3", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("OnRowsEnd", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("OnRowsEnd", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("OnComponentOk4", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("row1", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("OnComponentOk1", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("OnSubjobOk6", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("row4", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("row5", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("OnSubjobOk7", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("OnSubjobOk8", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("OnComponentOk6", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("out1", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("OnRowsEnd", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("OnSubjobOk5", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("OnComponentOk2", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("iterate2", 1, "exec" + NB_ITERATE_tJava_5);
						// Thread.sleep(1000);
					}

					/**
					 * [tJava_5 begin ] start
					 */

					ok_Hash.put("tJava_5", false);
					start_Hash.put("tJava_5", System.currentTimeMillis());

					currentComponent = "tJava_5";

					int tos_count_tJava_5 = 0;

					System.out.println("now trying to get services from "
							+ ((((Integer) globalMap.get("tLoop_1_CURRENT_ITERATION")) - 1) + 53) * context.scale
							+ " to " + ((((Integer) globalMap.get("tLoop_1_CURRENT_ITERATION"))) + 53) * context.scale);
					context.lower_limit = ((((Integer) globalMap.get("tLoop_1_CURRENT_ITERATION")) - 1) + 53)
							* context.scale;
					context.upper_limit = ((((Integer) globalMap.get("tLoop_1_CURRENT_ITERATION"))) + 53)
							* context.scale;
					context.ServiceID = "";

					/**
					 * [tJava_5 begin ] stop
					 */

					/**
					 * [tJava_5 main ] start
					 */

					currentComponent = "tJava_5";

					tos_count_tJava_5++;

					/**
					 * [tJava_5 main ] stop
					 */

					/**
					 * [tJava_5 process_data_begin ] start
					 */

					currentComponent = "tJava_5";

					/**
					 * [tJava_5 process_data_begin ] stop
					 */

					/**
					 * [tJava_5 process_data_end ] start
					 */

					currentComponent = "tJava_5";

					/**
					 * [tJava_5 process_data_end ] stop
					 */

					/**
					 * [tJava_5 end ] start
					 */

					currentComponent = "tJava_5";

					ok_Hash.put("tJava_5", true);
					end_Hash.put("tJava_5", System.currentTimeMillis());

					if (execStat) {
						runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
					}
					tFileInputDelimited_1Process(globalMap);

					/**
					 * [tJava_5 end ] stop
					 */
					if (execStat) {
						runStat.updateStatOnConnection("iterate2", 2, "exec" + NB_ITERATE_tJava_5);
					}

					/**
					 * [tLoop_1 process_data_end ] start
					 */

					currentComponent = "tLoop_1";

					/**
					 * [tLoop_1 process_data_end ] stop
					 */

					/**
					 * [tLoop_1 end ] start
					 */

					currentComponent = "tLoop_1";

					i++;

				}

				ok_Hash.put("tLoop_1", true);
				end_Hash.put("tLoop_1", System.currentTimeMillis());

				/**
				 * [tLoop_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tLoop_1 finally ] start
				 */

				currentComponent = "tLoop_1";

				/**
				 * [tLoop_1 finally ] stop
				 */

				/**
				 * [tJava_5 finally ] start
				 */

				currentComponent = "tJava_5";

				/**
				 * [tJava_5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tLoop_1_SUBPROCESS_STATE", 1);
	}

	public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
		final static byte[] commonByteArrayLock_ONTARGET_load_transactions_initial = new byte[0];
		static byte[] commonByteArray_ONTARGET_load_transactions_initial = new byte[0];

		public Long rn;

		public Long getRn() {
			return this.rn;
		}

		public Long id;

		public Long getId() {
			return this.id;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ONTARGET_load_transactions_initial) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.rn = null;
					} else {
						this.rn = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.id = null;
					} else {
						this.id = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ONTARGET_load_transactions_initial) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.rn = null;
					} else {
						this.rn = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.id = null;
					} else {
						this.id = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.rn == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.rn);
				}

				// Long

				if (this.id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.id);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Long

				if (this.rn == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.rn);
				}

				// Long

				if (this.id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.id);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("rn=" + String.valueOf(rn));
			sb.append(",id=" + String.valueOf(id));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_ONTARGET_load_transactions_initial = new byte[0];
		static byte[] commonByteArray_ONTARGET_load_transactions_initial = new byte[0];

		public Long rn;

		public Long getRn() {
			return this.rn;
		}

		public Long id;

		public Long getId() {
			return this.id;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ONTARGET_load_transactions_initial) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.rn = null;
					} else {
						this.rn = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.id = null;
					} else {
						this.id = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ONTARGET_load_transactions_initial) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.rn = null;
					} else {
						this.rn = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.id = null;
					} else {
						this.id = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.rn == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.rn);
				}

				// Long

				if (this.id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.id);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Long

				if (this.rn == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.rn);
				}

				// Long

				if (this.id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.id);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("rn=" + String.valueOf(rn));
			sb.append(",id=" + String.valueOf(id));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();
				out1Struct out1 = new out1Struct();

				/**
				 * [tFlowToIterate_1 begin ] start
				 */

				int NB_ITERATE_tJava_2 = 0; // for statistics

				ok_Hash.put("tFlowToIterate_1", false);
				start_Hash.put("tFlowToIterate_1", System.currentTimeMillis());

				currentComponent = "tFlowToIterate_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "out1");
				}

				int tos_count_tFlowToIterate_1 = 0;

				int nb_line_tFlowToIterate_1 = 0;
				int counter_tFlowToIterate_1 = 0;

				/**
				 * [tFlowToIterate_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				out1Struct out1_tmp = new out1Struct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try {

					Object filename_tFileInputDelimited_1 = "/Applications/TOSDI-8.0.1/studio/workspace/full_service_ids_"
							+ TalendDate.formatDate("yyyyMMdd", TalendDate.getCurrentDate()) + ".txt";
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0 || random_value_tFileInputDelimited_1 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								"/Applications/TOSDI-8.0.1/studio/workspace/full_service_ids_"
										+ TalendDate.formatDate("yyyyMMdd", TalendDate.getCurrentDate()) + ".txt",
								"ISO-8859-15", ";", "\n", true, 0, 0, limit_tFileInputDelimited_1, -1, false);
					} catch (java.lang.Exception e) {
						globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE", e.getMessage());

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();

						row3 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row3 = new row3Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_1 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_1 = 0;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row3.rn = ParserUtils.parseTo_Long(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"rn", "row3", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}

							} else {

								row3.rn = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 1;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row3.id = ParserUtils.parseTo_Long(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"id", "row3", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}

							} else {

								row3.id = null;

							}

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1.getException();
							}

						} catch (java.lang.Exception e) {
							globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE", e.getMessage());
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row3 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_begin ] stop
						 */
// Start of branch "row3"
						if (row3 != null) {

							/**
							 * [tMap_1 main ] start
							 */

							currentComponent = "tMap_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row3"

								);
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_1 = false;
							boolean mainRowRejected_tMap_1 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
								// ###############################
								// # Output tables

								out1 = null;

// # Output table : 'out1'
// # Filter conditions 
								if (

								row3.rn >= context.lower_limit && row3.rn <= context.upper_limit

								) {
									out1_tmp.rn = row3.rn;
									out1_tmp.id = row3.id;
									out1 = out1_tmp;
								} // closing filter/reject
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_1 = false;

							tos_count_tMap_1++;

							/**
							 * [tMap_1 main ] stop
							 */

							/**
							 * [tMap_1 process_data_begin ] start
							 */

							currentComponent = "tMap_1";

							/**
							 * [tMap_1 process_data_begin ] stop
							 */
// Start of branch "out1"
							if (out1 != null) {

								/**
								 * [tFlowToIterate_1 main ] start
								 */

								currentComponent = "tFlowToIterate_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "out1"

									);
								}

								globalMap.put("out1.rn", out1.rn);

								globalMap.put("out1.id", out1.id);

								nb_line_tFlowToIterate_1++;
								counter_tFlowToIterate_1++;
								globalMap.put("tFlowToIterate_1_CURRENT_ITERATION", counter_tFlowToIterate_1);

								tos_count_tFlowToIterate_1++;

								/**
								 * [tFlowToIterate_1 main ] stop
								 */

								/**
								 * [tFlowToIterate_1 process_data_begin ] start
								 */

								currentComponent = "tFlowToIterate_1";

								/**
								 * [tFlowToIterate_1 process_data_begin ] stop
								 */
								NB_ITERATE_tJava_2++;

								if (execStat) {
									runStat.updateStatOnConnection("iterate1", 1, "exec" + NB_ITERATE_tJava_2);
									// Thread.sleep(1000);
								}

								/**
								 * [tJava_2 begin ] start
								 */

								ok_Hash.put("tJava_2", false);
								start_Hash.put("tJava_2", System.currentTimeMillis());

								currentComponent = "tJava_2";

								int tos_count_tJava_2 = 0;

								context.ServiceID = context.ServiceID + row3.id + ",";

								/**
								 * [tJava_2 begin ] stop
								 */

								/**
								 * [tJava_2 main ] start
								 */

								currentComponent = "tJava_2";

								tos_count_tJava_2++;

								/**
								 * [tJava_2 main ] stop
								 */

								/**
								 * [tJava_2 process_data_begin ] start
								 */

								currentComponent = "tJava_2";

								/**
								 * [tJava_2 process_data_begin ] stop
								 */

								/**
								 * [tJava_2 process_data_end ] start
								 */

								currentComponent = "tJava_2";

								/**
								 * [tJava_2 process_data_end ] stop
								 */

								/**
								 * [tJava_2 end ] start
								 */

								currentComponent = "tJava_2";

								ok_Hash.put("tJava_2", true);
								end_Hash.put("tJava_2", System.currentTimeMillis());

								/**
								 * [tJava_2 end ] stop
								 */
								if (execStat) {
									runStat.updateStatOnConnection("iterate1", 2, "exec" + NB_ITERATE_tJava_2);
								}

								/**
								 * [tFlowToIterate_1 process_data_end ] start
								 */

								currentComponent = "tFlowToIterate_1";

								/**
								 * [tFlowToIterate_1 process_data_end ] stop
								 */

							} // End of branch "out1"

							/**
							 * [tMap_1 process_data_end ] start
							 */

							currentComponent = "tMap_1";

							/**
							 * [tMap_1 process_data_end ] stop
							 */

						} // End of branch "row3"

						/**
						 * [tFileInputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) ("/Applications/TOSDI-8.0.1/studio/workspace/full_service_ids_"
							+ TalendDate.formatDate("yyyyMMdd", TalendDate.getCurrentDate())
							+ ".txt") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tFlowToIterate_1 end ] start
				 */

				currentComponent = "tFlowToIterate_1";

				globalMap.put("tFlowToIterate_1_NB_LINE", nb_line_tFlowToIterate_1);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "out1");
				}

				ok_Hash.put("tFlowToIterate_1", true);
				end_Hash.put("tFlowToIterate_1", System.currentTimeMillis());

				/**
				 * [tFlowToIterate_1 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_1:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
			}

			tJava_3Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tFlowToIterate_1 finally ] start
				 */

				currentComponent = "tFlowToIterate_1";

				/**
				 * [tFlowToIterate_1 finally ] stop
				 */

				/**
				 * [tJava_2 finally ] start
				 */

				currentComponent = "tJava_2";

				/**
				 * [tJava_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tJava_3 begin ] start
				 */

				ok_Hash.put("tJava_3", false);
				start_Hash.put("tJava_3", System.currentTimeMillis());

				currentComponent = "tJava_3";

				int tos_count_tJava_3 = 0;

				context.ServiceID = "(" + context.ServiceID.substring(0, context.ServiceID.length() - 1) + ")";
//System.out.println("sending "+context.ServiceID);
				System.out
						.println("starting to reload data to BigQuery at " + TalendDate.getDate("YYYY-MM-dd HH:mm:ss"));

				/**
				 * [tJava_3 begin ] stop
				 */

				/**
				 * [tJava_3 main ] start
				 */

				currentComponent = "tJava_3";

				tos_count_tJava_3++;

				/**
				 * [tJava_3 main ] stop
				 */

				/**
				 * [tJava_3 process_data_begin ] start
				 */

				currentComponent = "tJava_3";

				/**
				 * [tJava_3 process_data_begin ] stop
				 */

				/**
				 * [tJava_3 process_data_end ] start
				 */

				currentComponent = "tJava_3";

				/**
				 * [tJava_3 process_data_end ] stop
				 */

				/**
				 * [tJava_3 end ] start
				 */

				currentComponent = "tJava_3";

				ok_Hash.put("tJava_3", true);
				end_Hash.put("tJava_3", System.currentTimeMillis());

				/**
				 * [tJava_3 end ] stop
				 */
			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_3:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
			}

			tBigQueryInput_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tJava_3 finally ] start
				 */

				currentComponent = "tJava_3";

				/**
				 * [tJava_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}

	public void tBigQueryInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tBigQueryInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tBigQueryInput_1 begin ] start
				 */

				ok_Hash.put("tBigQueryInput_1", false);
				start_Hash.put("tBigQueryInput_1", System.currentTimeMillis());

				currentComponent = "tBigQueryInput_1";

				int tos_count_tBigQueryInput_1 = 0;

				class ServiceAccountBigQueryUtil_tBigQueryInput_1 {
					private com.google.cloud.bigquery.BigQuery bigQuery;
					private boolean useLargeResult;
					private String tempTable;

					public ServiceAccountBigQueryUtil_tBigQueryInput_1() {
						this.useLargeResult = false;
					}

					private com.google.cloud.bigquery.BigQuery buildBigQuery() throws java.io.IOException {
						if (bigQuery != null) {
							return bigQuery;
						}
						com.google.auth.oauth2.GoogleCredentials credentials;
						java.io.File credentialsFile = new java.io.File(
								"/Users/jsun/Documents/WCIWork/OnTarget/code/otmirror-060322-9471bb896012.json");
						try (java.io.FileInputStream credentialsStream = new java.io.FileInputStream(credentialsFile)) {
							credentials = com.google.auth.oauth2.ServiceAccountCredentials
									.fromStream(credentialsStream);
						}

						com.google.cloud.bigquery.BigQuery result = com.google.cloud.bigquery.BigQueryOptions
								.newBuilder().setCredentials(credentials).setProjectId("otmirror-060322").build()
								.getService();

						return result;
					}

					private com.google.cloud.bigquery.Job buildJob(com.google.cloud.bigquery.BigQuery bigquery,
							com.google.cloud.bigquery.QueryJobConfiguration queryConfiguration,
							com.google.cloud.bigquery.JobId jobId) throws InterruptedException {
						globalMap.put("tBigQueryInput_1_JOBID", jobId.getJob());
						com.google.cloud.bigquery.Job job = bigquery.create(com.google.cloud.bigquery.JobInfo
								.newBuilder(queryConfiguration).setJobId(jobId).build());

						job = job.waitFor();

						if (job == null) {
							String message = "tBigQueryInput_1 - Job no longer exists";
							globalMap.put("tBigQueryInput_1_ERROR_MESSAGE", message);
							throw new RuntimeException(message);
						} else if (job.getStatus().getError() != null) {
							com.google.gson.Gson gsonObject = new com.google.gson.Gson();
							globalMap.put("tBigQueryInput_1_STATISTICS", gsonObject.toJson(job.getStatistics()));
							String message = job.getStatus().getError().toString();
							globalMap.put("tBigQueryInput_1_ERROR_MESSAGE", message);
							throw new RuntimeException(message);
						}

						return job;
					}

					private com.google.cloud.bigquery.Job executeQuerySmallResult(String query, boolean useLegacySql)
							throws java.io.IOException, InterruptedException {
						bigQuery = buildBigQuery();
						com.google.cloud.bigquery.QueryJobConfiguration queryConfiguration = com.google.cloud.bigquery.QueryJobConfiguration
								.newBuilder(query).setUseLegacySql(useLegacySql).build();
						com.google.cloud.bigquery.JobId jobId = com.google.cloud.bigquery.JobId.of("otmirror-060322",
								java.util.UUID.randomUUID().toString());
						return buildJob(bigQuery, queryConfiguration, jobId);
					}

					private com.google.cloud.bigquery.Job executeQueryLargeResult(String query, boolean useLegacySql)
							throws java.io.IOException, InterruptedException {
						bigQuery = buildBigQuery();

						com.google.cloud.bigquery.QueryJobConfiguration jobConfDryRun = com.google.cloud.bigquery.QueryJobConfiguration
								.newBuilder(query).setUseLegacySql(useLegacySql).setDryRun(true).build();
						com.google.cloud.bigquery.Job jobDryRun = bigQuery
								.create(com.google.cloud.bigquery.JobInfo.of(jobConfDryRun));

						String queryLocation = jobDryRun.getJobId().getLocation();
						String location = queryLocation == null ? "US" : queryLocation;
						String tempDataset = java.util.UUID.randomUUID().toString().replaceAll("-", "")
								+ Integer.toHexString(java.util.concurrent.ThreadLocalRandom.current().nextInt())
								+ Integer.toHexString(java.util.concurrent.ThreadLocalRandom.current().nextInt());

						com.google.cloud.bigquery.DatasetInfo datasetInfo = com.google.cloud.bigquery.DatasetInfo
								.newBuilder(tempDataset).setLocation(location).build();
						com.google.cloud.bigquery.Dataset dataset = bigQuery.create(datasetInfo);

						tempTable = java.util.UUID.randomUUID().toString().replaceAll("-", "")
								+ Integer.toHexString(java.util.concurrent.ThreadLocalRandom.current().nextInt())
								+ Integer.toHexString(java.util.concurrent.ThreadLocalRandom.current().nextInt());

						com.google.cloud.bigquery.QueryJobConfiguration queryConfiguration = com.google.cloud.bigquery.QueryJobConfiguration
								.newBuilder(query).setUseLegacySql(useLegacySql).setDryRun(false)
								.setAllowLargeResults(true)
								.setDestinationTable(com.google.cloud.bigquery.TableId.of(tempDataset, tempTable))
								.build();

						com.google.cloud.bigquery.JobId jobId = com.google.cloud.bigquery.JobId.newBuilder()
								.setProject("otmirror-060322").setJob(java.util.UUID.randomUUID().toString()).build();

						return buildJob(bigQuery, queryConfiguration, jobId);
					}

					public com.google.cloud.bigquery.Job executeQuery(String query, boolean useLegacySql)
							throws Exception {

						com.google.cloud.bigquery.Job job;

						job = executeQuerySmallResult(query, useLegacySql);

						return job;
					}

					public java.util.List<com.google.cloud.bigquery.Job> getChildJobs(String jobId)
							throws java.io.IOException {
						return java.util.Optional
								.ofNullable(buildBigQuery()
										.listJobs(com.google.cloud.bigquery.BigQuery.JobListOption.parentJobId(jobId)))
								.map(com.google.api.gax.paging.Page::getValues)
								.flatMap(iterable -> java.util.Optional
										.ofNullable(java.util.stream.StreamSupport.stream(iterable.spliterator(), false)
												.collect(java.util.stream.Collectors.toList())))
								.orElse(java.util.Collections.emptyList());
					}

					public void cleanup() throws Exception {
						if (useLargeResult) {

							com.google.cloud.bigquery.DatasetId datasetId = com.google.cloud.bigquery.DatasetId
									.of("otmirror-060322", "temp_dataset");
							bigQuery.delete(datasetId,
									com.google.cloud.bigquery.BigQuery.DatasetDeleteOption.deleteContents());

						}
					}

				}

				ServiceAccountBigQueryUtil_tBigQueryInput_1 serviceAccountBigQueryUtil_tBigQueryInput_1 = new ServiceAccountBigQueryUtil_tBigQueryInput_1();

				try {
					com.google.cloud.bigquery.Job job_tBigQueryInput_1 = serviceAccountBigQueryUtil_tBigQueryInput_1
							.executeQuery("delete FROM otmirror-060322.DW.fact_transactions where authorized_id in "
									+ context.ServiceID, false);

					com.google.gson.Gson gsonObject_tBigQueryInput_1 = new com.google.gson.Gson();
					globalMap.put("tBigQueryInput_1_STATISTICS",
							gsonObject_tBigQueryInput_1.toJson(job_tBigQueryInput_1.getStatistics()));
					long nb_line_tBigQueryInput_1 = 0;
					java.util.List<String> child_statistics_tBigQueryInput_1 = null;
					java.util.List<com.google.cloud.bigquery.Job> childJobs_tBigQueryInput_1;
					if (job_tBigQueryInput_1.getStatistics().getNumChildJobs() != null) {
						childJobs_tBigQueryInput_1 = serviceAccountBigQueryUtil_tBigQueryInput_1
								.getChildJobs(job_tBigQueryInput_1.getJobId().getJob());
						java.util.Collections.reverse(childJobs_tBigQueryInput_1);
						child_statistics_tBigQueryInput_1 = new java.util.ArrayList<>();
					} else {
						childJobs_tBigQueryInput_1 = java.util.Collections.singletonList(job_tBigQueryInput_1);
					}
					for (com.google.cloud.bigquery.Job job_iterable_tBigQueryInput_1 : childJobs_tBigQueryInput_1) {
						if (child_statistics_tBigQueryInput_1 != null) {
							child_statistics_tBigQueryInput_1.add(
									gsonObject_tBigQueryInput_1.toJson(job_iterable_tBigQueryInput_1.getStatistics()));
						}
						if (job_iterable_tBigQueryInput_1.getStatus().getError() != null) {
							globalMap.put("tBigQueryInput_1_ERROR_MESSAGE",
									job_iterable_tBigQueryInput_1.getStatus().getError().toString());
							String message_tBigQueryInput_1 = "tBigQueryInput_1 - "
									+ job_iterable_tBigQueryInput_1.getStatus().getError().toString();
							System.err.println(message_tBigQueryInput_1);
							continue;
						}

						com.google.cloud.bigquery.TableResult result_tBigQueryInput_1 = job_iterable_tBigQueryInput_1
								.getQueryResults();
						// Dynamic start

						// Dynamic end

						for (com.google.cloud.bigquery.FieldValueList field_tBigQueryInput_1 : result_tBigQueryInput_1
								.iterateAll()) {
							Object value_tBigQueryInput_1;
							nb_line_tBigQueryInput_1++;

							int fieldsCount_tBigQueryInput_1 = field_tBigQueryInput_1.size();
							int column_index_tBigQueryInput_1 = 0;

							/**
							 * [tBigQueryInput_1 begin ] stop
							 */

							/**
							 * [tBigQueryInput_1 main ] start
							 */

							currentComponent = "tBigQueryInput_1";

							tos_count_tBigQueryInput_1++;

							/**
							 * [tBigQueryInput_1 main ] stop
							 */

							/**
							 * [tBigQueryInput_1 process_data_begin ] start
							 */

							currentComponent = "tBigQueryInput_1";

							/**
							 * [tBigQueryInput_1 process_data_begin ] stop
							 */

							/**
							 * [tBigQueryInput_1 process_data_end ] start
							 */

							currentComponent = "tBigQueryInput_1";

							/**
							 * [tBigQueryInput_1 process_data_end ] stop
							 */

							/**
							 * [tBigQueryInput_1 end ] start
							 */

							currentComponent = "tBigQueryInput_1";

						}
						if (child_statistics_tBigQueryInput_1 != null) {
							globalMap.put("tBigQueryInput_1_STATISTICS_CHILD",
									child_statistics_tBigQueryInput_1.stream().collect(
											java.util.stream.Collectors.joining(",", "{\"statistics\": [", "]}")));
						}
						// }
					}
				} catch (Exception e_tBigQueryInput_1) {
					String message_tBigQueryInput_1 = e_tBigQueryInput_1.getMessage();
					System.err.println(message_tBigQueryInput_1);
					globalMap.put("tBigQueryInput_1_ERROR_MESSAGE", message_tBigQueryInput_1);
					throw e_tBigQueryInput_1;
				} finally {
					serviceAccountBigQueryUtil_tBigQueryInput_1.cleanup();
				}

				ok_Hash.put("tBigQueryInput_1", true);
				end_Hash.put("tBigQueryInput_1", System.currentTimeMillis());

				/**
				 * [tBigQueryInput_1 end ] stop
				 */
			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tBigQueryInput_1:OnSubjobOk1", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
			}

			tDBInput_1Process(globalMap);

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tBigQueryInput_1:OnSubjobOk2", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
			}

			tDBInput_4Process(globalMap);

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tBigQueryInput_1:OnSubjobOk3", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk7", 0, "ok");
			}

			tDBInput_3Process(globalMap);

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tBigQueryInput_1:OnSubjobOk4", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk8", 0, "ok");
			}

			tDBInput_5Process(globalMap);

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tBigQueryInput_1:OnSubjobOk5", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk9", 0, "ok");
			}

			tDBInput_6Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tBigQueryInput_1 finally ] start
				 */

				currentComponent = "tBigQueryInput_1";

				/**
				 * [tBigQueryInput_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tBigQueryInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_ONTARGET_load_transactions_initial = new byte[0];
		static byte[] commonByteArray_ONTARGET_load_transactions_initial = new byte[0];

		public Integer client_id;

		public Integer getClient_id() {
			return this.client_id;
		}

		public Integer supervisor_id;

		public Integer getSupervisor_id() {
			return this.supervisor_id;
		}

		public Integer client_cost_center_id;

		public Integer getClient_cost_center_id() {
			return this.client_cost_center_id;
		}

		public Integer employee_cost_center_id;

		public Integer getEmployee_cost_center_id() {
			return this.employee_cost_center_id;
		}

		public Integer employee_id;

		public Integer getEmployee_id() {
			return this.employee_id;
		}

		public Integer ar_payer_id;

		public Integer getAr_payer_id() {
			return this.ar_payer_id;
		}

		public Integer department_id;

		public Integer getDepartment_id() {
			return this.department_id;
		}

		public Integer service_cost_center_id;

		public Integer getService_cost_center_id() {
			return this.service_cost_center_id;
		}

		public Integer site_id;

		public Integer getSite_id() {
			return this.site_id;
		}

		public Integer school_district_id;

		public Integer getSchool_district_id() {
			return this.school_district_id;
		}

		public Integer authorization_id;

		public Integer getAuthorization_id() {
			return this.authorization_id;
		}

		public Integer authorized_id;

		public Integer getAuthorized_id() {
			return this.authorized_id;
		}

		public String service_authorization_approval;

		public String getService_authorization_approval() {
			return this.service_authorization_approval;
		}

		public String service_authorization_date_id;

		public String getService_authorization_date_id() {
			return this.service_authorization_date_id;
		}

		public String Service_Authorization_Expired;

		public String getService_Authorization_Expired() {
			return this.Service_Authorization_Expired;
		}

		public String service_authorization_description;

		public String getService_authorization_description() {
			return this.service_authorization_description;
		}

		public String company_name;

		public String getCompany_name() {
			return this.company_name;
		}

		public String service_abbreviation;

		public String getService_abbreviation() {
			return this.service_abbreviation;
		}

		public String service_code;

		public String getService_code() {
			return this.service_code;
		}

		public String authorized_start_date_id;

		public String getAuthorized_start_date_id() {
			return this.authorized_start_date_id;
		}

		public String authorized_end_date_id;

		public String getAuthorized_end_date_id() {
			return this.authorized_end_date_id;
		}

		public String authorization_start_date_id;

		public String getAuthorization_start_date_id() {
			return this.authorization_start_date_id;
		}

		public String authorization_end_date_id;

		public String getAuthorization_end_date_id() {
			return this.authorization_end_date_id;
		}

		public String service_program;

		public String getService_program() {
			return this.service_program;
		}

		public String service_place;

		public String getService_place() {
			return this.service_place;
		}

		public Integer service_is_sum_and_round;

		public Integer getService_is_sum_and_round() {
			return this.service_is_sum_and_round;
		}

		public Integer validate_to_schedules;

		public Integer getValidate_to_schedules() {
			return this.validate_to_schedules;
		}

		public Integer service_minimum_minutes;

		public Integer getService_minimum_minutes() {
			return this.service_minimum_minutes;
		}

		public Integer service_units_per_hour;

		public Integer getService_units_per_hour() {
			return this.service_units_per_hour;
		}

		public Integer service_max_units_total;

		public Integer getService_max_units_total() {
			return this.service_max_units_total;
		}

		public Integer service_auth_max_units_total;

		public Integer getService_auth_max_units_total() {
			return this.service_auth_max_units_total;
		}

		public Boolean auth_level_validation;

		public Boolean getAuth_level_validation() {
			return this.auth_level_validation;
		}

		public Integer total_units_authorized;

		public Integer getTotal_units_authorized() {
			return this.total_units_authorized;
		}

		public Float current_rate;

		public Float getCurrent_rate() {
			return this.current_rate;
		}

		public Integer caregiver_id;

		public Integer getCaregiver_id() {
			return this.caregiver_id;
		}

		public Integer inv_stg_service_date_id;

		public Integer getInv_stg_service_date_id() {
			return this.inv_stg_service_date_id;
		}

		public Integer in_schedule_note_service_date_id;

		public Integer getIn_schedule_note_service_date_id() {
			return this.in_schedule_note_service_date_id;
		}

		public Integer note_date_of_service_id;

		public Integer getNote_date_of_service_id() {
			return this.note_date_of_service_id;
		}

		public Integer in_actual_note_service_date_id;

		public Integer getIn_actual_note_service_date_id() {
			return this.in_actual_note_service_date_id;
		}

		public java.util.Date schedule_duration;

		public java.util.Date getSchedule_duration() {
			return this.schedule_duration;
		}

		public Integer schedule_start_date_id;

		public Integer getSchedule_start_date_id() {
			return this.schedule_start_date_id;
		}

		public Integer schedule_end_date_id;

		public Integer getSchedule_end_date_id() {
			return this.schedule_end_date_id;
		}

		public java.util.Date schedule_start_time;

		public java.util.Date getSchedule_start_time() {
			return this.schedule_start_time;
		}

		public java.util.Date schedule_end_time;

		public java.util.Date getSchedule_end_time() {
			return this.schedule_end_time;
		}

		public Integer schedule_units;

		public Integer getSchedule_units() {
			return this.schedule_units;
		}

		public String schedule_status;

		public String getSchedule_status() {
			return this.schedule_status;
		}

		public Integer actual_start_date_id;

		public Integer getActual_start_date_id() {
			return this.actual_start_date_id;
		}

		public Integer actual_end_date_id;

		public Integer getActual_end_date_id() {
			return this.actual_end_date_id;
		}

		public String billing_attending_NPI;

		public String getBilling_attending_NPI() {
			return this.billing_attending_NPI;
		}

		public Boolean actual_imported;

		public Boolean getActual_imported() {
			return this.actual_imported;
		}

		public Boolean actual_hold_pay;

		public Boolean getActual_hold_pay() {
			return this.actual_hold_pay;
		}

		public Boolean actual_hold_bill;

		public Boolean getActual_hold_bill() {
			return this.actual_hold_bill;
		}

		public Boolean actual_time_sheet_approved;

		public Boolean getActual_time_sheet_approved() {
			return this.actual_time_sheet_approved;
		}

		public Boolean actual_note_approved_bl;

		public Boolean getActual_note_approved_bl() {
			return this.actual_note_approved_bl;
		}

		public Boolean actual_note_approved_pr;

		public Boolean getActual_note_approved_pr() {
			return this.actual_note_approved_pr;
		}

		public String actual_status_BL;

		public String getActual_status_BL() {
			return this.actual_status_BL;
		}

		public String actual_emp_pay_type;

		public String getActual_emp_pay_type() {
			return this.actual_emp_pay_type;
		}

		public Boolean ineligible_for_billing;

		public Boolean getIneligible_for_billing() {
			return this.ineligible_for_billing;
		}

		public Boolean actual_adjustment;

		public Boolean getActual_adjustment() {
			return this.actual_adjustment;
		}

		public Integer actual_check_date_id;

		public Integer getActual_check_date_id() {
			return this.actual_check_date_id;
		}

		public Integer actual_last_check_date_id;

		public Integer getActual_last_check_date_id() {
			return this.actual_last_check_date_id;
		}

		public Boolean actual_paid;

		public Boolean getActual_paid() {
			return this.actual_paid;
		}

		public Boolean ineligible_for_payroll;

		public Boolean getIneligible_for_payroll() {
			return this.ineligible_for_payroll;
		}

		public Integer actual_invoice_number;

		public Integer getActual_invoice_number() {
			return this.actual_invoice_number;
		}

		public Boolean actual_billed;

		public Boolean getActual_billed() {
			return this.actual_billed;
		}

		public java.util.Date actual_start_time;

		public java.util.Date getActual_start_time() {
			return this.actual_start_time;
		}

		public java.util.Date actual_end_time;

		public java.util.Date getActual_end_time() {
			return this.actual_end_time;
		}

		public Integer actual_units;

		public Integer getActual_units() {
			return this.actual_units;
		}

		public java.util.Date actual_duration;

		public java.util.Date getActual_duration() {
			return this.actual_duration;
		}

		public Integer service_billed_date_id;

		public Integer getService_billed_date_id() {
			return this.service_billed_date_id;
		}

		public Integer in_process_units_batched;

		public Integer getIn_process_units_batched() {
			return this.in_process_units_batched;
		}

		public java.util.Date note_duration;

		public java.util.Date getNote_duration() {
			return this.note_duration;
		}

		public java.util.Date note_end_time;

		public java.util.Date getNote_end_time() {
			return this.note_end_time;
		}

		public java.util.Date note_start_time;

		public java.util.Date getNote_start_time() {
			return this.note_start_time;
		}

		public String rate_type;

		public String getRate_type() {
			return this.rate_type;
		}

		public Boolean first_encounter;

		public Boolean getFirst_encounter() {
			return this.first_encounter;
		}

		public Integer units_calculated;

		public Integer getUnits_calculated() {
			return this.units_calculated;
		}

		public Boolean clqnote_has_child;

		public Boolean getClqnote_has_child() {
			return this.clqnote_has_child;
		}

		public Integer missed_shift_id;

		public Integer getMissed_shift_id() {
			return this.missed_shift_id;
		}

		public Integer missed_shift_units;

		public Integer getMissed_shift_units() {
			return this.missed_shift_units;
		}

		public Integer billed_units;

		public Integer getBilled_units() {
			return this.billed_units;
		}

		public String transaction_type;

		public String getTransaction_type() {
			return this.transaction_type;
		}

		public Integer transaction_date_id;

		public Integer getTransaction_date_id() {
			return this.transaction_date_id;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ONTARGET_load_transactions_initial.length) {
					if (length < 1024 && commonByteArray_ONTARGET_load_transactions_initial.length == 0) {
						commonByteArray_ONTARGET_load_transactions_initial = new byte[1024];
					} else {
						commonByteArray_ONTARGET_load_transactions_initial = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ONTARGET_load_transactions_initial, 0, length);
				strReturn = new String(commonByteArray_ONTARGET_load_transactions_initial, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ONTARGET_load_transactions_initial.length) {
					if (length < 1024 && commonByteArray_ONTARGET_load_transactions_initial.length == 0) {
						commonByteArray_ONTARGET_load_transactions_initial = new byte[1024];
					} else {
						commonByteArray_ONTARGET_load_transactions_initial = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_ONTARGET_load_transactions_initial, 0, length);
				strReturn = new String(commonByteArray_ONTARGET_load_transactions_initial, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ONTARGET_load_transactions_initial) {

				try {

					int length = 0;

					this.client_id = readInteger(dis);

					this.supervisor_id = readInteger(dis);

					this.client_cost_center_id = readInteger(dis);

					this.employee_cost_center_id = readInteger(dis);

					this.employee_id = readInteger(dis);

					this.ar_payer_id = readInteger(dis);

					this.department_id = readInteger(dis);

					this.service_cost_center_id = readInteger(dis);

					this.site_id = readInteger(dis);

					this.school_district_id = readInteger(dis);

					this.authorization_id = readInteger(dis);

					this.authorized_id = readInteger(dis);

					this.service_authorization_approval = readString(dis);

					this.service_authorization_date_id = readString(dis);

					this.Service_Authorization_Expired = readString(dis);

					this.service_authorization_description = readString(dis);

					this.company_name = readString(dis);

					this.service_abbreviation = readString(dis);

					this.service_code = readString(dis);

					this.authorized_start_date_id = readString(dis);

					this.authorized_end_date_id = readString(dis);

					this.authorization_start_date_id = readString(dis);

					this.authorization_end_date_id = readString(dis);

					this.service_program = readString(dis);

					this.service_place = readString(dis);

					this.service_is_sum_and_round = readInteger(dis);

					this.validate_to_schedules = readInteger(dis);

					this.service_minimum_minutes = readInteger(dis);

					this.service_units_per_hour = readInteger(dis);

					this.service_max_units_total = readInteger(dis);

					this.service_auth_max_units_total = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.auth_level_validation = null;
					} else {
						this.auth_level_validation = dis.readBoolean();
					}

					this.total_units_authorized = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.current_rate = null;
					} else {
						this.current_rate = dis.readFloat();
					}

					this.caregiver_id = readInteger(dis);

					this.inv_stg_service_date_id = readInteger(dis);

					this.in_schedule_note_service_date_id = readInteger(dis);

					this.note_date_of_service_id = readInteger(dis);

					this.in_actual_note_service_date_id = readInteger(dis);

					this.schedule_duration = readDate(dis);

					this.schedule_start_date_id = readInteger(dis);

					this.schedule_end_date_id = readInteger(dis);

					this.schedule_start_time = readDate(dis);

					this.schedule_end_time = readDate(dis);

					this.schedule_units = readInteger(dis);

					this.schedule_status = readString(dis);

					this.actual_start_date_id = readInteger(dis);

					this.actual_end_date_id = readInteger(dis);

					this.billing_attending_NPI = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.actual_imported = null;
					} else {
						this.actual_imported = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_hold_pay = null;
					} else {
						this.actual_hold_pay = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_hold_bill = null;
					} else {
						this.actual_hold_bill = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_time_sheet_approved = null;
					} else {
						this.actual_time_sheet_approved = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_note_approved_bl = null;
					} else {
						this.actual_note_approved_bl = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_note_approved_pr = null;
					} else {
						this.actual_note_approved_pr = dis.readBoolean();
					}

					this.actual_status_BL = readString(dis);

					this.actual_emp_pay_type = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ineligible_for_billing = null;
					} else {
						this.ineligible_for_billing = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_adjustment = null;
					} else {
						this.actual_adjustment = dis.readBoolean();
					}

					this.actual_check_date_id = readInteger(dis);

					this.actual_last_check_date_id = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.actual_paid = null;
					} else {
						this.actual_paid = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.ineligible_for_payroll = null;
					} else {
						this.ineligible_for_payroll = dis.readBoolean();
					}

					this.actual_invoice_number = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.actual_billed = null;
					} else {
						this.actual_billed = dis.readBoolean();
					}

					this.actual_start_time = readDate(dis);

					this.actual_end_time = readDate(dis);

					this.actual_units = readInteger(dis);

					this.actual_duration = readDate(dis);

					this.service_billed_date_id = readInteger(dis);

					this.in_process_units_batched = readInteger(dis);

					this.note_duration = readDate(dis);

					this.note_end_time = readDate(dis);

					this.note_start_time = readDate(dis);

					this.rate_type = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.first_encounter = null;
					} else {
						this.first_encounter = dis.readBoolean();
					}

					this.units_calculated = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.clqnote_has_child = null;
					} else {
						this.clqnote_has_child = dis.readBoolean();
					}

					this.missed_shift_id = readInteger(dis);

					this.missed_shift_units = readInteger(dis);

					this.billed_units = readInteger(dis);

					this.transaction_type = readString(dis);

					this.transaction_date_id = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ONTARGET_load_transactions_initial) {

				try {

					int length = 0;

					this.client_id = readInteger(dis);

					this.supervisor_id = readInteger(dis);

					this.client_cost_center_id = readInteger(dis);

					this.employee_cost_center_id = readInteger(dis);

					this.employee_id = readInteger(dis);

					this.ar_payer_id = readInteger(dis);

					this.department_id = readInteger(dis);

					this.service_cost_center_id = readInteger(dis);

					this.site_id = readInteger(dis);

					this.school_district_id = readInteger(dis);

					this.authorization_id = readInteger(dis);

					this.authorized_id = readInteger(dis);

					this.service_authorization_approval = readString(dis);

					this.service_authorization_date_id = readString(dis);

					this.Service_Authorization_Expired = readString(dis);

					this.service_authorization_description = readString(dis);

					this.company_name = readString(dis);

					this.service_abbreviation = readString(dis);

					this.service_code = readString(dis);

					this.authorized_start_date_id = readString(dis);

					this.authorized_end_date_id = readString(dis);

					this.authorization_start_date_id = readString(dis);

					this.authorization_end_date_id = readString(dis);

					this.service_program = readString(dis);

					this.service_place = readString(dis);

					this.service_is_sum_and_round = readInteger(dis);

					this.validate_to_schedules = readInteger(dis);

					this.service_minimum_minutes = readInteger(dis);

					this.service_units_per_hour = readInteger(dis);

					this.service_max_units_total = readInteger(dis);

					this.service_auth_max_units_total = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.auth_level_validation = null;
					} else {
						this.auth_level_validation = dis.readBoolean();
					}

					this.total_units_authorized = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.current_rate = null;
					} else {
						this.current_rate = dis.readFloat();
					}

					this.caregiver_id = readInteger(dis);

					this.inv_stg_service_date_id = readInteger(dis);

					this.in_schedule_note_service_date_id = readInteger(dis);

					this.note_date_of_service_id = readInteger(dis);

					this.in_actual_note_service_date_id = readInteger(dis);

					this.schedule_duration = readDate(dis);

					this.schedule_start_date_id = readInteger(dis);

					this.schedule_end_date_id = readInteger(dis);

					this.schedule_start_time = readDate(dis);

					this.schedule_end_time = readDate(dis);

					this.schedule_units = readInteger(dis);

					this.schedule_status = readString(dis);

					this.actual_start_date_id = readInteger(dis);

					this.actual_end_date_id = readInteger(dis);

					this.billing_attending_NPI = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.actual_imported = null;
					} else {
						this.actual_imported = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_hold_pay = null;
					} else {
						this.actual_hold_pay = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_hold_bill = null;
					} else {
						this.actual_hold_bill = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_time_sheet_approved = null;
					} else {
						this.actual_time_sheet_approved = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_note_approved_bl = null;
					} else {
						this.actual_note_approved_bl = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_note_approved_pr = null;
					} else {
						this.actual_note_approved_pr = dis.readBoolean();
					}

					this.actual_status_BL = readString(dis);

					this.actual_emp_pay_type = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ineligible_for_billing = null;
					} else {
						this.ineligible_for_billing = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_adjustment = null;
					} else {
						this.actual_adjustment = dis.readBoolean();
					}

					this.actual_check_date_id = readInteger(dis);

					this.actual_last_check_date_id = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.actual_paid = null;
					} else {
						this.actual_paid = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.ineligible_for_payroll = null;
					} else {
						this.ineligible_for_payroll = dis.readBoolean();
					}

					this.actual_invoice_number = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.actual_billed = null;
					} else {
						this.actual_billed = dis.readBoolean();
					}

					this.actual_start_time = readDate(dis);

					this.actual_end_time = readDate(dis);

					this.actual_units = readInteger(dis);

					this.actual_duration = readDate(dis);

					this.service_billed_date_id = readInteger(dis);

					this.in_process_units_batched = readInteger(dis);

					this.note_duration = readDate(dis);

					this.note_end_time = readDate(dis);

					this.note_start_time = readDate(dis);

					this.rate_type = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.first_encounter = null;
					} else {
						this.first_encounter = dis.readBoolean();
					}

					this.units_calculated = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.clqnote_has_child = null;
					} else {
						this.clqnote_has_child = dis.readBoolean();
					}

					this.missed_shift_id = readInteger(dis);

					this.missed_shift_units = readInteger(dis);

					this.billed_units = readInteger(dis);

					this.transaction_type = readString(dis);

					this.transaction_date_id = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.client_id, dos);

				// Integer

				writeInteger(this.supervisor_id, dos);

				// Integer

				writeInteger(this.client_cost_center_id, dos);

				// Integer

				writeInteger(this.employee_cost_center_id, dos);

				// Integer

				writeInteger(this.employee_id, dos);

				// Integer

				writeInteger(this.ar_payer_id, dos);

				// Integer

				writeInteger(this.department_id, dos);

				// Integer

				writeInteger(this.service_cost_center_id, dos);

				// Integer

				writeInteger(this.site_id, dos);

				// Integer

				writeInteger(this.school_district_id, dos);

				// Integer

				writeInteger(this.authorization_id, dos);

				// Integer

				writeInteger(this.authorized_id, dos);

				// String

				writeString(this.service_authorization_approval, dos);

				// String

				writeString(this.service_authorization_date_id, dos);

				// String

				writeString(this.Service_Authorization_Expired, dos);

				// String

				writeString(this.service_authorization_description, dos);

				// String

				writeString(this.company_name, dos);

				// String

				writeString(this.service_abbreviation, dos);

				// String

				writeString(this.service_code, dos);

				// String

				writeString(this.authorized_start_date_id, dos);

				// String

				writeString(this.authorized_end_date_id, dos);

				// String

				writeString(this.authorization_start_date_id, dos);

				// String

				writeString(this.authorization_end_date_id, dos);

				// String

				writeString(this.service_program, dos);

				// String

				writeString(this.service_place, dos);

				// Integer

				writeInteger(this.service_is_sum_and_round, dos);

				// Integer

				writeInteger(this.validate_to_schedules, dos);

				// Integer

				writeInteger(this.service_minimum_minutes, dos);

				// Integer

				writeInteger(this.service_units_per_hour, dos);

				// Integer

				writeInteger(this.service_max_units_total, dos);

				// Integer

				writeInteger(this.service_auth_max_units_total, dos);

				// Boolean

				if (this.auth_level_validation == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.auth_level_validation);
				}

				// Integer

				writeInteger(this.total_units_authorized, dos);

				// Float

				if (this.current_rate == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.current_rate);
				}

				// Integer

				writeInteger(this.caregiver_id, dos);

				// Integer

				writeInteger(this.inv_stg_service_date_id, dos);

				// Integer

				writeInteger(this.in_schedule_note_service_date_id, dos);

				// Integer

				writeInteger(this.note_date_of_service_id, dos);

				// Integer

				writeInteger(this.in_actual_note_service_date_id, dos);

				// java.util.Date

				writeDate(this.schedule_duration, dos);

				// Integer

				writeInteger(this.schedule_start_date_id, dos);

				// Integer

				writeInteger(this.schedule_end_date_id, dos);

				// java.util.Date

				writeDate(this.schedule_start_time, dos);

				// java.util.Date

				writeDate(this.schedule_end_time, dos);

				// Integer

				writeInteger(this.schedule_units, dos);

				// String

				writeString(this.schedule_status, dos);

				// Integer

				writeInteger(this.actual_start_date_id, dos);

				// Integer

				writeInteger(this.actual_end_date_id, dos);

				// String

				writeString(this.billing_attending_NPI, dos);

				// Boolean

				if (this.actual_imported == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_imported);
				}

				// Boolean

				if (this.actual_hold_pay == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_hold_pay);
				}

				// Boolean

				if (this.actual_hold_bill == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_hold_bill);
				}

				// Boolean

				if (this.actual_time_sheet_approved == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_time_sheet_approved);
				}

				// Boolean

				if (this.actual_note_approved_bl == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_note_approved_bl);
				}

				// Boolean

				if (this.actual_note_approved_pr == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_note_approved_pr);
				}

				// String

				writeString(this.actual_status_BL, dos);

				// String

				writeString(this.actual_emp_pay_type, dos);

				// Boolean

				if (this.ineligible_for_billing == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.ineligible_for_billing);
				}

				// Boolean

				if (this.actual_adjustment == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_adjustment);
				}

				// Integer

				writeInteger(this.actual_check_date_id, dos);

				// Integer

				writeInteger(this.actual_last_check_date_id, dos);

				// Boolean

				if (this.actual_paid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_paid);
				}

				// Boolean

				if (this.ineligible_for_payroll == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.ineligible_for_payroll);
				}

				// Integer

				writeInteger(this.actual_invoice_number, dos);

				// Boolean

				if (this.actual_billed == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_billed);
				}

				// java.util.Date

				writeDate(this.actual_start_time, dos);

				// java.util.Date

				writeDate(this.actual_end_time, dos);

				// Integer

				writeInteger(this.actual_units, dos);

				// java.util.Date

				writeDate(this.actual_duration, dos);

				// Integer

				writeInteger(this.service_billed_date_id, dos);

				// Integer

				writeInteger(this.in_process_units_batched, dos);

				// java.util.Date

				writeDate(this.note_duration, dos);

				// java.util.Date

				writeDate(this.note_end_time, dos);

				// java.util.Date

				writeDate(this.note_start_time, dos);

				// String

				writeString(this.rate_type, dos);

				// Boolean

				if (this.first_encounter == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.first_encounter);
				}

				// Integer

				writeInteger(this.units_calculated, dos);

				// Boolean

				if (this.clqnote_has_child == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.clqnote_has_child);
				}

				// Integer

				writeInteger(this.missed_shift_id, dos);

				// Integer

				writeInteger(this.missed_shift_units, dos);

				// Integer

				writeInteger(this.billed_units, dos);

				// String

				writeString(this.transaction_type, dos);

				// Integer

				writeInteger(this.transaction_date_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.client_id, dos);

				// Integer

				writeInteger(this.supervisor_id, dos);

				// Integer

				writeInteger(this.client_cost_center_id, dos);

				// Integer

				writeInteger(this.employee_cost_center_id, dos);

				// Integer

				writeInteger(this.employee_id, dos);

				// Integer

				writeInteger(this.ar_payer_id, dos);

				// Integer

				writeInteger(this.department_id, dos);

				// Integer

				writeInteger(this.service_cost_center_id, dos);

				// Integer

				writeInteger(this.site_id, dos);

				// Integer

				writeInteger(this.school_district_id, dos);

				// Integer

				writeInteger(this.authorization_id, dos);

				// Integer

				writeInteger(this.authorized_id, dos);

				// String

				writeString(this.service_authorization_approval, dos);

				// String

				writeString(this.service_authorization_date_id, dos);

				// String

				writeString(this.Service_Authorization_Expired, dos);

				// String

				writeString(this.service_authorization_description, dos);

				// String

				writeString(this.company_name, dos);

				// String

				writeString(this.service_abbreviation, dos);

				// String

				writeString(this.service_code, dos);

				// String

				writeString(this.authorized_start_date_id, dos);

				// String

				writeString(this.authorized_end_date_id, dos);

				// String

				writeString(this.authorization_start_date_id, dos);

				// String

				writeString(this.authorization_end_date_id, dos);

				// String

				writeString(this.service_program, dos);

				// String

				writeString(this.service_place, dos);

				// Integer

				writeInteger(this.service_is_sum_and_round, dos);

				// Integer

				writeInteger(this.validate_to_schedules, dos);

				// Integer

				writeInteger(this.service_minimum_minutes, dos);

				// Integer

				writeInteger(this.service_units_per_hour, dos);

				// Integer

				writeInteger(this.service_max_units_total, dos);

				// Integer

				writeInteger(this.service_auth_max_units_total, dos);

				// Boolean

				if (this.auth_level_validation == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.auth_level_validation);
				}

				// Integer

				writeInteger(this.total_units_authorized, dos);

				// Float

				if (this.current_rate == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.current_rate);
				}

				// Integer

				writeInteger(this.caregiver_id, dos);

				// Integer

				writeInteger(this.inv_stg_service_date_id, dos);

				// Integer

				writeInteger(this.in_schedule_note_service_date_id, dos);

				// Integer

				writeInteger(this.note_date_of_service_id, dos);

				// Integer

				writeInteger(this.in_actual_note_service_date_id, dos);

				// java.util.Date

				writeDate(this.schedule_duration, dos);

				// Integer

				writeInteger(this.schedule_start_date_id, dos);

				// Integer

				writeInteger(this.schedule_end_date_id, dos);

				// java.util.Date

				writeDate(this.schedule_start_time, dos);

				// java.util.Date

				writeDate(this.schedule_end_time, dos);

				// Integer

				writeInteger(this.schedule_units, dos);

				// String

				writeString(this.schedule_status, dos);

				// Integer

				writeInteger(this.actual_start_date_id, dos);

				// Integer

				writeInteger(this.actual_end_date_id, dos);

				// String

				writeString(this.billing_attending_NPI, dos);

				// Boolean

				if (this.actual_imported == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_imported);
				}

				// Boolean

				if (this.actual_hold_pay == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_hold_pay);
				}

				// Boolean

				if (this.actual_hold_bill == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_hold_bill);
				}

				// Boolean

				if (this.actual_time_sheet_approved == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_time_sheet_approved);
				}

				// Boolean

				if (this.actual_note_approved_bl == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_note_approved_bl);
				}

				// Boolean

				if (this.actual_note_approved_pr == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_note_approved_pr);
				}

				// String

				writeString(this.actual_status_BL, dos);

				// String

				writeString(this.actual_emp_pay_type, dos);

				// Boolean

				if (this.ineligible_for_billing == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.ineligible_for_billing);
				}

				// Boolean

				if (this.actual_adjustment == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_adjustment);
				}

				// Integer

				writeInteger(this.actual_check_date_id, dos);

				// Integer

				writeInteger(this.actual_last_check_date_id, dos);

				// Boolean

				if (this.actual_paid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_paid);
				}

				// Boolean

				if (this.ineligible_for_payroll == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.ineligible_for_payroll);
				}

				// Integer

				writeInteger(this.actual_invoice_number, dos);

				// Boolean

				if (this.actual_billed == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_billed);
				}

				// java.util.Date

				writeDate(this.actual_start_time, dos);

				// java.util.Date

				writeDate(this.actual_end_time, dos);

				// Integer

				writeInteger(this.actual_units, dos);

				// java.util.Date

				writeDate(this.actual_duration, dos);

				// Integer

				writeInteger(this.service_billed_date_id, dos);

				// Integer

				writeInteger(this.in_process_units_batched, dos);

				// java.util.Date

				writeDate(this.note_duration, dos);

				// java.util.Date

				writeDate(this.note_end_time, dos);

				// java.util.Date

				writeDate(this.note_start_time, dos);

				// String

				writeString(this.rate_type, dos);

				// Boolean

				if (this.first_encounter == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.first_encounter);
				}

				// Integer

				writeInteger(this.units_calculated, dos);

				// Boolean

				if (this.clqnote_has_child == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.clqnote_has_child);
				}

				// Integer

				writeInteger(this.missed_shift_id, dos);

				// Integer

				writeInteger(this.missed_shift_units, dos);

				// Integer

				writeInteger(this.billed_units, dos);

				// String

				writeString(this.transaction_type, dos);

				// Integer

				writeInteger(this.transaction_date_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("client_id=" + String.valueOf(client_id));
			sb.append(",supervisor_id=" + String.valueOf(supervisor_id));
			sb.append(",client_cost_center_id=" + String.valueOf(client_cost_center_id));
			sb.append(",employee_cost_center_id=" + String.valueOf(employee_cost_center_id));
			sb.append(",employee_id=" + String.valueOf(employee_id));
			sb.append(",ar_payer_id=" + String.valueOf(ar_payer_id));
			sb.append(",department_id=" + String.valueOf(department_id));
			sb.append(",service_cost_center_id=" + String.valueOf(service_cost_center_id));
			sb.append(",site_id=" + String.valueOf(site_id));
			sb.append(",school_district_id=" + String.valueOf(school_district_id));
			sb.append(",authorization_id=" + String.valueOf(authorization_id));
			sb.append(",authorized_id=" + String.valueOf(authorized_id));
			sb.append(",service_authorization_approval=" + service_authorization_approval);
			sb.append(",service_authorization_date_id=" + service_authorization_date_id);
			sb.append(",Service_Authorization_Expired=" + Service_Authorization_Expired);
			sb.append(",service_authorization_description=" + service_authorization_description);
			sb.append(",company_name=" + company_name);
			sb.append(",service_abbreviation=" + service_abbreviation);
			sb.append(",service_code=" + service_code);
			sb.append(",authorized_start_date_id=" + authorized_start_date_id);
			sb.append(",authorized_end_date_id=" + authorized_end_date_id);
			sb.append(",authorization_start_date_id=" + authorization_start_date_id);
			sb.append(",authorization_end_date_id=" + authorization_end_date_id);
			sb.append(",service_program=" + service_program);
			sb.append(",service_place=" + service_place);
			sb.append(",service_is_sum_and_round=" + String.valueOf(service_is_sum_and_round));
			sb.append(",validate_to_schedules=" + String.valueOf(validate_to_schedules));
			sb.append(",service_minimum_minutes=" + String.valueOf(service_minimum_minutes));
			sb.append(",service_units_per_hour=" + String.valueOf(service_units_per_hour));
			sb.append(",service_max_units_total=" + String.valueOf(service_max_units_total));
			sb.append(",service_auth_max_units_total=" + String.valueOf(service_auth_max_units_total));
			sb.append(",auth_level_validation=" + String.valueOf(auth_level_validation));
			sb.append(",total_units_authorized=" + String.valueOf(total_units_authorized));
			sb.append(",current_rate=" + String.valueOf(current_rate));
			sb.append(",caregiver_id=" + String.valueOf(caregiver_id));
			sb.append(",inv_stg_service_date_id=" + String.valueOf(inv_stg_service_date_id));
			sb.append(",in_schedule_note_service_date_id=" + String.valueOf(in_schedule_note_service_date_id));
			sb.append(",note_date_of_service_id=" + String.valueOf(note_date_of_service_id));
			sb.append(",in_actual_note_service_date_id=" + String.valueOf(in_actual_note_service_date_id));
			sb.append(",schedule_duration=" + String.valueOf(schedule_duration));
			sb.append(",schedule_start_date_id=" + String.valueOf(schedule_start_date_id));
			sb.append(",schedule_end_date_id=" + String.valueOf(schedule_end_date_id));
			sb.append(",schedule_start_time=" + String.valueOf(schedule_start_time));
			sb.append(",schedule_end_time=" + String.valueOf(schedule_end_time));
			sb.append(",schedule_units=" + String.valueOf(schedule_units));
			sb.append(",schedule_status=" + schedule_status);
			sb.append(",actual_start_date_id=" + String.valueOf(actual_start_date_id));
			sb.append(",actual_end_date_id=" + String.valueOf(actual_end_date_id));
			sb.append(",billing_attending_NPI=" + billing_attending_NPI);
			sb.append(",actual_imported=" + String.valueOf(actual_imported));
			sb.append(",actual_hold_pay=" + String.valueOf(actual_hold_pay));
			sb.append(",actual_hold_bill=" + String.valueOf(actual_hold_bill));
			sb.append(",actual_time_sheet_approved=" + String.valueOf(actual_time_sheet_approved));
			sb.append(",actual_note_approved_bl=" + String.valueOf(actual_note_approved_bl));
			sb.append(",actual_note_approved_pr=" + String.valueOf(actual_note_approved_pr));
			sb.append(",actual_status_BL=" + actual_status_BL);
			sb.append(",actual_emp_pay_type=" + actual_emp_pay_type);
			sb.append(",ineligible_for_billing=" + String.valueOf(ineligible_for_billing));
			sb.append(",actual_adjustment=" + String.valueOf(actual_adjustment));
			sb.append(",actual_check_date_id=" + String.valueOf(actual_check_date_id));
			sb.append(",actual_last_check_date_id=" + String.valueOf(actual_last_check_date_id));
			sb.append(",actual_paid=" + String.valueOf(actual_paid));
			sb.append(",ineligible_for_payroll=" + String.valueOf(ineligible_for_payroll));
			sb.append(",actual_invoice_number=" + String.valueOf(actual_invoice_number));
			sb.append(",actual_billed=" + String.valueOf(actual_billed));
			sb.append(",actual_start_time=" + String.valueOf(actual_start_time));
			sb.append(",actual_end_time=" + String.valueOf(actual_end_time));
			sb.append(",actual_units=" + String.valueOf(actual_units));
			sb.append(",actual_duration=" + String.valueOf(actual_duration));
			sb.append(",service_billed_date_id=" + String.valueOf(service_billed_date_id));
			sb.append(",in_process_units_batched=" + String.valueOf(in_process_units_batched));
			sb.append(",note_duration=" + String.valueOf(note_duration));
			sb.append(",note_end_time=" + String.valueOf(note_end_time));
			sb.append(",note_start_time=" + String.valueOf(note_start_time));
			sb.append(",rate_type=" + rate_type);
			sb.append(",first_encounter=" + String.valueOf(first_encounter));
			sb.append(",units_calculated=" + String.valueOf(units_calculated));
			sb.append(",clqnote_has_child=" + String.valueOf(clqnote_has_child));
			sb.append(",missed_shift_id=" + String.valueOf(missed_shift_id));
			sb.append(",missed_shift_units=" + String.valueOf(missed_shift_units));
			sb.append(",billed_units=" + String.valueOf(billed_units));
			sb.append(",transaction_type=" + transaction_type);
			sb.append(",transaction_date_id=" + String.valueOf(transaction_date_id));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();

				/**
				 * [tBigQueryOutput_1_tBQOB begin ] start
				 */

				ok_Hash.put("tBigQueryOutput_1_tBQOB", false);
				start_Hash.put("tBigQueryOutput_1_tBQOB", System.currentTimeMillis());

				currentVirtualComponent = "tBigQueryOutput_1";

				currentComponent = "tBigQueryOutput_1_tBQOB";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tBigQueryOutput_1_tBQOB = 0;

				int nb_line_tBigQueryOutput_1_tBQOB = 0;
				String rowSeparator_tBigQueryOutput_1_tBQOB = "\n";
				String fieldSeparator_tBigQueryOutput_1_tBQOB = ",";
				char escapeChar_tBigQueryOutput_1_tBQOB = "\\".charAt(0);
				char textEnclosure_tBigQueryOutput_1_tBQOB = "\"".charAt(0);

				escapeChar_tBigQueryOutput_1_tBQOB = textEnclosure_tBigQueryOutput_1_tBQOB;

				if (escapeChar_tBigQueryOutput_1_tBQOB == '\\') {
				} else if (escapeChar_tBigQueryOutput_1_tBQOB == textEnclosure_tBigQueryOutput_1_tBQOB) {
				} else {
					throw new RuntimeException("The escape mode only support the '\\' or double text enclosure.");
				}

				java.io.File file_tBigQueryOutput_1_tBQOB = new java.io.File(
						"/Applications/TOSDI-8.0.1/studio/workspace/schedule_data.avro");

				file_tBigQueryOutput_1_tBQOB.getParentFile().mkdirs();

				com.talend.csv.CSVWriter csvWriter_tBigQueryOutput_1_tBQOB = new com.talend.csv.CSVWriter(
						new java.io.BufferedWriter(new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(file_tBigQueryOutput_1_tBQOB, false), "ISO-8859-15")));
				resourceMap.put("csvWriter_tBigQueryOutput_1_tBQOB", csvWriter_tBigQueryOutput_1_tBQOB);
				csvWriter_tBigQueryOutput_1_tBQOB.setSeparator(fieldSeparator_tBigQueryOutput_1_tBQOB.charAt(0));

				csvWriter_tBigQueryOutput_1_tBQOB.setLineEnd(rowSeparator_tBigQueryOutput_1_tBQOB);
				csvWriter_tBigQueryOutput_1_tBQOB.setEscapeChar(escapeChar_tBigQueryOutput_1_tBQOB);
				csvWriter_tBigQueryOutput_1_tBQOB.setQuoteChar(textEnclosure_tBigQueryOutput_1_tBQOB);
				csvWriter_tBigQueryOutput_1_tBQOB.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.AUTO);

				/**
				 * [tBigQueryOutput_1_tBQOB begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = "datafusion";

				final String decryptedPassword_tDBInput_1 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:yVn+FxqzYwt6iO1mEiayWWf4HzytJeuyABhJbmvq2GQizmhcU8g=");

				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;

				String url_tDBInput_1 = "jdbc:postgresql://" + "localhost" + ":" + "5431" + "/" + "OnTarget" + "?"
						+ "currentSchema=smallmiracle";

				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1, dbUser_tDBInput_1,
						dbPwd_tDBInput_1);

				conn_tDBInput_1.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

				String dbquery_tDBInput_1 = "WITH schoolstatus AS (\nSELECT schoolyear.schooldistrictid AS schooldistrict,n.date\nFROM smallmiracle.schoolyear\nJOIN sm"
						+ "allmiracle.nonschoolday n ON schoolyear.id = n.schoolyearid\nGROUP BY schoolyear.schooldistrictid, n.date\n), base as(\nsel"
						+ "ect auth.id as Authorization_ID,authd.id as Authorized_ID,\nauth.ClientID as Client_ID,e.id as Employee_ID,dept.id as Dep"
						+ "artment_ID,cc.Id as Client_Cost_Center_ID,empCostCenter.id as Emp_Cost_Center_ID,\ncc_service.ID as Service_Cost_Center_I"
						+ "D,facility.ID as site_id,\ncase when auth.approved then 'a' else 'u' end as Service_Authorization_Approval,\nto_char(date("
						+ "auth.enddate),'YYYYMMDD') as Service_Authorization_Date_ID,\ncase when auth.EndDate<current_date then 'e' else 'u' end as"
						+ " Service_Authorization_Expired,\nauth.description as Service_Authorization_Description,\n'Abound Health, LLC' as company_n"
						+ "ame,\nBLServiceMaster.ServiceAbbreviation AS svcabbreviation,\nBLServiceMaster.ServiceCode AS svccode,\nto_char(date(authd."
						+ "startdate),'YYYYMMDD') as Authorized_Start_Date_ID,\nto_char(date(authd.enddate),'YYYYMMDD') as Authorized_End_Date_ID,\nt"
						+ "o_char(date(auth.startdate),'YYYYMMDD') as Authorization_Start_Date_ID,\nto_char(date(auth.startdate),'YYYYMMDD') as Auth"
						+ "orization_End_Date_ID,\ncoalesce(GLProgramCode.Description,'') AS Service_Program,\np.id as AR_Payer_ID,\np.OverrideNU AS P"
						+ "ayer_Override,\nBLServiceState.Eligible4Billing,\nBLServiceState.Eligible4Payroll,\nBLServiceMaster.RateType,\nauthd.BLServi"
						+ "cePayerID,\nBLServiceLocation.Code AS Service_Place,\nsmallmiracle.fn_isservicesumandround(authd.id)::int as Service_Is_Su"
						+ "m_And_Round,\nBLServiceState.validatetoschedules::int as Validate_To_Schedules,\ncoalesce(BLServiceMaster.MinimumMinutes,0"
						+ ") as Service_Minimum_Minutes,\nBLServiceMaster.UnitsPerHour as Service_Units_Per_Hour,\ncoalesce(authd.maxunitstotal,0) as"
						+ " Service_Max_Units_Total,\ncoalesce(auth.maxunitstotal,0) as Service_Auth_Max_Units_Total,\nauth.AuthLevelValidation as Au"
						+ "th_Level_Validation,\nCASE WHEN auth.AuthLevelValidation THEN COALESCE(auth.MaxUnitsTotal, 0) ELSE COALESCE(authd.MaxUnit"
						+ "sTotal, 0) end as Total_Units_Authorized,\nc.schooldistrictid as school_district_id\nfrom smallmiracle.BLServiceAuthorizat"
						+ "ion auth \ninner join smallmiracle.BLServiceAuthorized authd on auth.ID=authd.blserviceauthorizationid \nINNER JOIN smallm"
						+ "iracle.BLServicePayer ON authd.BLServicePayerID = BLServicePayer.ID\nINNER JOIN smallmiracle.BLServiceState ON BLServiceP"
						+ "ayer.BLStateServiceID = BLServiceState.ID\nLEFT JOIN smallmiracle.GLProgramCode ON BLServiceState.GLProgramCodeID = GLPro"
						+ "gramCode.ID\nINNER JOIN smallmiracle.BLServiceMaster ON BLServiceState.BLServiceMasterID = BLServiceMaster.ID\ninner join "
						+ "smallmiracle.clclient c on c.id=auth.clientid\nLEFT JOIN smallmiracle.PREmployee e ON c.PREmployeeID = e.ID\nLEFT JOIN sma"
						+ "llmiracle.prempdemo PRD ON PRD.PREmployeeID = e.ID\nLEFT JOIN smallmiracle.prbusdepartment dept on PRD.prbusdepartmentid "
						+ "= dept.id\nLEFT JOIN smallmiracle.PRBusCostCenter cc ON c.PRBusCostCenterID = cc.ID\nLEFT JOIN smallmiracle.prbuscostcente"
						+ "r cc_service ON authd.PRBusCostCenterID = cc_service.ID\nleft outer join smallmiracle.PRBusCostCenter as empCostCenter on"
						+ " prd.PRBusCostCenterID = empCostCenter.ID\nINNER JOIN smallmiracle.arpayer p ON auth.ARPayerID = p.ID\nINNER JOIN smallmir"
						+ "acle.BLServiceLocation ON authd.BLServiceLocationID = BLServiceLocation.ID\nleft outer join smallmiracle.FCFacility as fa"
						+ "cility on authd.FCFacilityID = facility.ID  \n)\nselect base.client_id as client_id,\ncoalesce(cast(base.employee_id as int"
						+ "),-1) as Supervisor_id,\ncoalesce(cast(base.client_cost_center_id as int),-1) as client_cost_center_id,\ncoalesce(cast(bas"
						+ "e.Emp_Cost_Center_ID as int),-1) as Employee_Cost_Center_ID,\ncoalesce(cast(base.employee_id as int),-1) as employee_id,\n"
						+ "coalesce(cast(base.AR_Payer_ID as int),-1) as AR_Payer_ID,\ncoalesce(cast(base.department_id as int),-1) as department_id"
						+ ",\ncoalesce(cast(base.service_cost_center_id as int),-1) as service_cost_center_id,\ncoalesce(cast(base.site_id as int),-1"
						+ ") as site_id,\ncoalesce(cast(schoolstatus.schooldistrict as int),-1) as school_district_id,\nbase.Authorization_ID,base.au"
						+ "thorized_id,\nbase.Service_Authorization_Approval,\nbase.Service_Authorization_Date_ID,\nbase.Service_Authorization_Expired"
						+ ",\nbase.Service_Authorization_Description,\nbase.company_name,\nbase.svcabbreviation as service_abbreviation,\nbase.svccode "
						+ "as service_code,\nbase.Authorized_Start_Date_ID,\nbase.Authorized_End_Date_ID,\nbase.Authorization_Start_Date_ID,\nbase.Auth"
						+ "orization_End_Date_ID,\nbase.Service_Program,\nbase.Service_Place,\nbase.Service_Is_Sum_And_Round,\nbase.Validate_To_Schedul"
						+ "es,\nbase.Service_Minimum_Minutes,\nbase.Service_Units_Per_Hour,\nbase.Service_Max_Units_Total,\nbase.Service_Auth_Max_Units"
						+ "_Total,\nbase.Auth_Level_Validation,\nbase.total_units_authorized,\ncoalesce(smallmiracle.fn_getcurrate(base.authorized_id)"
						+ ",0) as current_rate,\n-1 as caregiver_id,-1 as inv_stg_service_date_id,coalesce(cast(to_char(date(clqnote_schedule.dateof"
						+ "service),'YYYYMMDD') as int),-1) as in_schedule_note_service_date_id,\ncoalesce(cast(to_char(date(clqnote_schedule.dateof"
						+ "service),'YYYYMMDD') as int),-1) as note_date_of_service_id,\n-1 as in_actual_note_service_date_id,\ncoalesce(schedule.dur"
						+ "ation,TO_TIMESTAMP('1900-01-01 00:00:00','YYYY-MM-DD HH24:MI:SS')) as schedule_duration,\ncoalesce(cast(to_char(date(sche"
						+ "dule.startdate),'YYYYMMDD') as int),-1) as schedule_start_date_id,\ncoalesce(cast(to_char(date(schedule.enddate),'YYYYMMD"
						+ "D') as int),-1) as schedule_end_date_id,\ncoalesce(schedule.starttime,TO_TIMESTAMP('1900-01-01 00:00:00','YYYY-MM-DD HH24"
						+ ":MI:SS')) as schedule_start_time, \ncoalesce(schedule.endtime,TO_TIMESTAMP('1900-01-01 00:00:00','YYYY-MM-DD HH24:MI:SS')"
						+ ") as schedule_end_time,\ncoalesce(schedule.units,0) as schedule_units,\nCOALESCE(status.description, '') AS schedule_statu"
						+ "s,\ncoalesce(cast(to_char(date(actual.startdate),'YYYYMMDD') as int),-1) as actual_start_date_id,\ncoalesce(cast(to_char(d"
						+ "ate(actual.enddate),'YYYYMMDD') as int),-1) as actual_end_date_id, \nformat('%s / %s', p_op_billingnpi, p_op_attendingnpi"
						+ ") as billing_attending_NPI,\nfalse as actual_imported,false as actual_hold_pay,false as actual_hold_bill,false as actual_"
						+ "time_sheet_Approved,\nfalse as actual_note_approved_bl,\nfalse as actual_note_approved_pr,\ncast('' as varchar(10)) as actu"
						+ "al_status_BL,\ncast('' as varchar(10)) as actual_emp_pay_type,\nfalse as ineligible_For_Billing,\nfalse as actual_adjustmen"
						+ "t,-1 as actual_check_Date_ID,\n-1 as actual_last_Check_Date_id,\nfalse as actual_paid,\nfalse as ineligible_For_Payroll,\n-1"
						+ " as actual_invoice_Number,\nfalse as actual_billed,TO_TIMESTAMP('1900-01-01 00:00:00','YYYY-MM-DD HH24:MI:SS') as actual_"
						+ "start_time, TO_TIMESTAMP('1900-01-01 00:00:00','YYYY-MM-DD HH24:MI:SS') as actual_end_time,\ncast(0 as int) as actual_uni"
						+ "ts,TO_TIMESTAMP('1900-01-01 00:00:00','YYYY-MM-DD HH24:MI:SS') as actual_duration,\n-1 as service_billed_date_id,0 as in_"
						+ "process_units_batched,\ncoalesce(clqnote_schedule.duration,TO_TIMESTAMP('1900-01-01 00:00:00','YYYY-MM-DD HH24:MI:SS')) a"
						+ "s note_duration,\ncoalesce(clqnote_schedule.endtime,TO_TIMESTAMP('1900-01-01 00:00:00','YYYY-MM-DD HH24:MI:SS')) as note_"
						+ "end_time,\ncoalesce(clqnote_schedule.starttime,TO_TIMESTAMP('1900-01-01 00:00:00','YYYY-MM-DD HH24:MI:SS')) as note_start"
						+ "_time,\nbase.ratetype as rate_type,\ncoalesce(clqnote_schedule.firstencounter,false) as first_encounter,\ncoalesce(clqnote_"
						+ "schedule.unitscalculated,0) as units_calculated,\nclqnote_child.id is not null as clqnote_has_child,\ncoalesce(schedule.Mi"
						+ "ssedShiftID,-1) as missed_shift_ID,\ncoalesce(schedule.MissedShiftUnits,0) as missed_shift_units,\n0 as billed_units,\ncast"
						+ "('S' as varchar(1)) as transaction_type,\ncoalesce(cast(to_char(date(schedule.startdate),'YYYYMMDD') as int),-1) as trans"
						+ "action_date_id\nfrom base\nleft join smallmiracle.bltimeschedule schedule on base.authorized_id=schedule.blserviceauthoriz"
						+ "edid \nLEFT JOIN smallmiracle.missedshift ON schedule.missedshiftid = missedshift.id\nLEFT JOIN smallmiracle.bltimeschedul"
						+ "estatus status ON schedule.bltimeschedulestatusid = status.id\nleft join schoolstatus on base.school_district_id = school"
						+ "status.schooldistrict AND schoolstatus.date = schedule.startdate \nLEFT JOIN smallmiracle.BLTimeActual actual ON schedule"
						+ ".ID = actual.BLTimeScheduleID\nleft join smallmiracle.clqnote as clqnote_schedule on schedule.id=clqnote_schedule.bltimes"
						+ "cheduleid \nleft join smallmiracle.clqnote as clqnote_child on clqnote_schedule.id=clqnote_child.clqnoteidparent \ncross j"
						+ "oin smallmiracle.up_findlastcheckdtandadjstflag(actual.id) \ncross join smallmiracle.fn_getbillingattendingnpisselect(nul"
						+ "l, actual.id)\nwhere base.Authorized_id in " + context.ServiceID;

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							row1.client_id = null;
						} else {

							row1.client_id = rs_tDBInput_1.getInt(1);
							if (rs_tDBInput_1.wasNull()) {
								row1.client_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 2) {
							row1.supervisor_id = null;
						} else {

							row1.supervisor_id = rs_tDBInput_1.getInt(2);
							if (rs_tDBInput_1.wasNull()) {
								row1.supervisor_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 3) {
							row1.client_cost_center_id = null;
						} else {

							row1.client_cost_center_id = rs_tDBInput_1.getInt(3);
							if (rs_tDBInput_1.wasNull()) {
								row1.client_cost_center_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 4) {
							row1.employee_cost_center_id = null;
						} else {

							row1.employee_cost_center_id = rs_tDBInput_1.getInt(4);
							if (rs_tDBInput_1.wasNull()) {
								row1.employee_cost_center_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 5) {
							row1.employee_id = null;
						} else {

							row1.employee_id = rs_tDBInput_1.getInt(5);
							if (rs_tDBInput_1.wasNull()) {
								row1.employee_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 6) {
							row1.ar_payer_id = null;
						} else {

							row1.ar_payer_id = rs_tDBInput_1.getInt(6);
							if (rs_tDBInput_1.wasNull()) {
								row1.ar_payer_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 7) {
							row1.department_id = null;
						} else {

							row1.department_id = rs_tDBInput_1.getInt(7);
							if (rs_tDBInput_1.wasNull()) {
								row1.department_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 8) {
							row1.service_cost_center_id = null;
						} else {

							row1.service_cost_center_id = rs_tDBInput_1.getInt(8);
							if (rs_tDBInput_1.wasNull()) {
								row1.service_cost_center_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 9) {
							row1.site_id = null;
						} else {

							row1.site_id = rs_tDBInput_1.getInt(9);
							if (rs_tDBInput_1.wasNull()) {
								row1.site_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 10) {
							row1.school_district_id = null;
						} else {

							row1.school_district_id = rs_tDBInput_1.getInt(10);
							if (rs_tDBInput_1.wasNull()) {
								row1.school_district_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 11) {
							row1.authorization_id = null;
						} else {

							row1.authorization_id = rs_tDBInput_1.getInt(11);
							if (rs_tDBInput_1.wasNull()) {
								row1.authorization_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 12) {
							row1.authorized_id = null;
						} else {

							row1.authorized_id = rs_tDBInput_1.getInt(12);
							if (rs_tDBInput_1.wasNull()) {
								row1.authorized_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 13) {
							row1.service_authorization_approval = null;
						} else {

							row1.service_authorization_approval = routines.system.JDBCUtil.getString(rs_tDBInput_1, 13,
									false);
						}
						if (colQtyInRs_tDBInput_1 < 14) {
							row1.service_authorization_date_id = null;
						} else {

							row1.service_authorization_date_id = routines.system.JDBCUtil.getString(rs_tDBInput_1, 14,
									false);
						}
						if (colQtyInRs_tDBInput_1 < 15) {
							row1.Service_Authorization_Expired = null;
						} else {

							row1.Service_Authorization_Expired = routines.system.JDBCUtil.getString(rs_tDBInput_1, 15,
									false);
						}
						if (colQtyInRs_tDBInput_1 < 16) {
							row1.service_authorization_description = null;
						} else {

							row1.service_authorization_description = routines.system.JDBCUtil.getString(rs_tDBInput_1,
									16, false);
						}
						if (colQtyInRs_tDBInput_1 < 17) {
							row1.company_name = null;
						} else {

							row1.company_name = routines.system.JDBCUtil.getString(rs_tDBInput_1, 17, false);
						}
						if (colQtyInRs_tDBInput_1 < 18) {
							row1.service_abbreviation = null;
						} else {

							row1.service_abbreviation = routines.system.JDBCUtil.getString(rs_tDBInput_1, 18, false);
						}
						if (colQtyInRs_tDBInput_1 < 19) {
							row1.service_code = null;
						} else {

							row1.service_code = routines.system.JDBCUtil.getString(rs_tDBInput_1, 19, false);
						}
						if (colQtyInRs_tDBInput_1 < 20) {
							row1.authorized_start_date_id = null;
						} else {

							row1.authorized_start_date_id = routines.system.JDBCUtil.getString(rs_tDBInput_1, 20,
									false);
						}
						if (colQtyInRs_tDBInput_1 < 21) {
							row1.authorized_end_date_id = null;
						} else {

							row1.authorized_end_date_id = routines.system.JDBCUtil.getString(rs_tDBInput_1, 21, false);
						}
						if (colQtyInRs_tDBInput_1 < 22) {
							row1.authorization_start_date_id = null;
						} else {

							row1.authorization_start_date_id = routines.system.JDBCUtil.getString(rs_tDBInput_1, 22,
									false);
						}
						if (colQtyInRs_tDBInput_1 < 23) {
							row1.authorization_end_date_id = null;
						} else {

							row1.authorization_end_date_id = routines.system.JDBCUtil.getString(rs_tDBInput_1, 23,
									false);
						}
						if (colQtyInRs_tDBInput_1 < 24) {
							row1.service_program = null;
						} else {

							row1.service_program = routines.system.JDBCUtil.getString(rs_tDBInput_1, 24, false);
						}
						if (colQtyInRs_tDBInput_1 < 25) {
							row1.service_place = null;
						} else {

							row1.service_place = routines.system.JDBCUtil.getString(rs_tDBInput_1, 25, false);
						}
						if (colQtyInRs_tDBInput_1 < 26) {
							row1.service_is_sum_and_round = null;
						} else {

							row1.service_is_sum_and_round = rs_tDBInput_1.getInt(26);
							if (rs_tDBInput_1.wasNull()) {
								row1.service_is_sum_and_round = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 27) {
							row1.validate_to_schedules = null;
						} else {

							row1.validate_to_schedules = rs_tDBInput_1.getInt(27);
							if (rs_tDBInput_1.wasNull()) {
								row1.validate_to_schedules = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 28) {
							row1.service_minimum_minutes = null;
						} else {

							row1.service_minimum_minutes = rs_tDBInput_1.getInt(28);
							if (rs_tDBInput_1.wasNull()) {
								row1.service_minimum_minutes = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 29) {
							row1.service_units_per_hour = null;
						} else {

							row1.service_units_per_hour = rs_tDBInput_1.getInt(29);
							if (rs_tDBInput_1.wasNull()) {
								row1.service_units_per_hour = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 30) {
							row1.service_max_units_total = null;
						} else {

							row1.service_max_units_total = rs_tDBInput_1.getInt(30);
							if (rs_tDBInput_1.wasNull()) {
								row1.service_max_units_total = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 31) {
							row1.service_auth_max_units_total = null;
						} else {

							row1.service_auth_max_units_total = rs_tDBInput_1.getInt(31);
							if (rs_tDBInput_1.wasNull()) {
								row1.service_auth_max_units_total = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 32) {
							row1.auth_level_validation = null;
						} else {

							row1.auth_level_validation = rs_tDBInput_1.getBoolean(32);
							if (rs_tDBInput_1.wasNull()) {
								row1.auth_level_validation = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 33) {
							row1.total_units_authorized = null;
						} else {

							row1.total_units_authorized = rs_tDBInput_1.getInt(33);
							if (rs_tDBInput_1.wasNull()) {
								row1.total_units_authorized = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 34) {
							row1.current_rate = null;
						} else {

							row1.current_rate = rs_tDBInput_1.getFloat(34);
							if (rs_tDBInput_1.wasNull()) {
								row1.current_rate = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 35) {
							row1.caregiver_id = null;
						} else {

							row1.caregiver_id = rs_tDBInput_1.getInt(35);
							if (rs_tDBInput_1.wasNull()) {
								row1.caregiver_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 36) {
							row1.inv_stg_service_date_id = null;
						} else {

							row1.inv_stg_service_date_id = rs_tDBInput_1.getInt(36);
							if (rs_tDBInput_1.wasNull()) {
								row1.inv_stg_service_date_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 37) {
							row1.in_schedule_note_service_date_id = null;
						} else {

							row1.in_schedule_note_service_date_id = rs_tDBInput_1.getInt(37);
							if (rs_tDBInput_1.wasNull()) {
								row1.in_schedule_note_service_date_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 38) {
							row1.note_date_of_service_id = null;
						} else {

							row1.note_date_of_service_id = rs_tDBInput_1.getInt(38);
							if (rs_tDBInput_1.wasNull()) {
								row1.note_date_of_service_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 39) {
							row1.in_actual_note_service_date_id = null;
						} else {

							row1.in_actual_note_service_date_id = rs_tDBInput_1.getInt(39);
							if (rs_tDBInput_1.wasNull()) {
								row1.in_actual_note_service_date_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 40) {
							row1.schedule_duration = null;
						} else {

							row1.schedule_duration = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 40);
						}
						if (colQtyInRs_tDBInput_1 < 41) {
							row1.schedule_start_date_id = null;
						} else {

							row1.schedule_start_date_id = rs_tDBInput_1.getInt(41);
							if (rs_tDBInput_1.wasNull()) {
								row1.schedule_start_date_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 42) {
							row1.schedule_end_date_id = null;
						} else {

							row1.schedule_end_date_id = rs_tDBInput_1.getInt(42);
							if (rs_tDBInput_1.wasNull()) {
								row1.schedule_end_date_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 43) {
							row1.schedule_start_time = null;
						} else {

							row1.schedule_start_time = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 43);
						}
						if (colQtyInRs_tDBInput_1 < 44) {
							row1.schedule_end_time = null;
						} else {

							row1.schedule_end_time = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 44);
						}
						if (colQtyInRs_tDBInput_1 < 45) {
							row1.schedule_units = null;
						} else {

							row1.schedule_units = rs_tDBInput_1.getInt(45);
							if (rs_tDBInput_1.wasNull()) {
								row1.schedule_units = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 46) {
							row1.schedule_status = null;
						} else {

							row1.schedule_status = routines.system.JDBCUtil.getString(rs_tDBInput_1, 46, false);
						}
						if (colQtyInRs_tDBInput_1 < 47) {
							row1.actual_start_date_id = null;
						} else {

							row1.actual_start_date_id = rs_tDBInput_1.getInt(47);
							if (rs_tDBInput_1.wasNull()) {
								row1.actual_start_date_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 48) {
							row1.actual_end_date_id = null;
						} else {

							row1.actual_end_date_id = rs_tDBInput_1.getInt(48);
							if (rs_tDBInput_1.wasNull()) {
								row1.actual_end_date_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 49) {
							row1.billing_attending_NPI = null;
						} else {

							row1.billing_attending_NPI = routines.system.JDBCUtil.getString(rs_tDBInput_1, 49, false);
						}
						if (colQtyInRs_tDBInput_1 < 50) {
							row1.actual_imported = null;
						} else {

							row1.actual_imported = rs_tDBInput_1.getBoolean(50);
							if (rs_tDBInput_1.wasNull()) {
								row1.actual_imported = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 51) {
							row1.actual_hold_pay = null;
						} else {

							row1.actual_hold_pay = rs_tDBInput_1.getBoolean(51);
							if (rs_tDBInput_1.wasNull()) {
								row1.actual_hold_pay = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 52) {
							row1.actual_hold_bill = null;
						} else {

							row1.actual_hold_bill = rs_tDBInput_1.getBoolean(52);
							if (rs_tDBInput_1.wasNull()) {
								row1.actual_hold_bill = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 53) {
							row1.actual_time_sheet_approved = null;
						} else {

							row1.actual_time_sheet_approved = rs_tDBInput_1.getBoolean(53);
							if (rs_tDBInput_1.wasNull()) {
								row1.actual_time_sheet_approved = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 54) {
							row1.actual_note_approved_bl = null;
						} else {

							row1.actual_note_approved_bl = rs_tDBInput_1.getBoolean(54);
							if (rs_tDBInput_1.wasNull()) {
								row1.actual_note_approved_bl = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 55) {
							row1.actual_note_approved_pr = null;
						} else {

							row1.actual_note_approved_pr = rs_tDBInput_1.getBoolean(55);
							if (rs_tDBInput_1.wasNull()) {
								row1.actual_note_approved_pr = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 56) {
							row1.actual_status_BL = null;
						} else {

							row1.actual_status_BL = routines.system.JDBCUtil.getString(rs_tDBInput_1, 56, false);
						}
						if (colQtyInRs_tDBInput_1 < 57) {
							row1.actual_emp_pay_type = null;
						} else {

							row1.actual_emp_pay_type = routines.system.JDBCUtil.getString(rs_tDBInput_1, 57, false);
						}
						if (colQtyInRs_tDBInput_1 < 58) {
							row1.ineligible_for_billing = null;
						} else {

							row1.ineligible_for_billing = rs_tDBInput_1.getBoolean(58);
							if (rs_tDBInput_1.wasNull()) {
								row1.ineligible_for_billing = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 59) {
							row1.actual_adjustment = null;
						} else {

							row1.actual_adjustment = rs_tDBInput_1.getBoolean(59);
							if (rs_tDBInput_1.wasNull()) {
								row1.actual_adjustment = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 60) {
							row1.actual_check_date_id = null;
						} else {

							row1.actual_check_date_id = rs_tDBInput_1.getInt(60);
							if (rs_tDBInput_1.wasNull()) {
								row1.actual_check_date_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 61) {
							row1.actual_last_check_date_id = null;
						} else {

							row1.actual_last_check_date_id = rs_tDBInput_1.getInt(61);
							if (rs_tDBInput_1.wasNull()) {
								row1.actual_last_check_date_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 62) {
							row1.actual_paid = null;
						} else {

							row1.actual_paid = rs_tDBInput_1.getBoolean(62);
							if (rs_tDBInput_1.wasNull()) {
								row1.actual_paid = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 63) {
							row1.ineligible_for_payroll = null;
						} else {

							row1.ineligible_for_payroll = rs_tDBInput_1.getBoolean(63);
							if (rs_tDBInput_1.wasNull()) {
								row1.ineligible_for_payroll = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 64) {
							row1.actual_invoice_number = null;
						} else {

							row1.actual_invoice_number = rs_tDBInput_1.getInt(64);
							if (rs_tDBInput_1.wasNull()) {
								row1.actual_invoice_number = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 65) {
							row1.actual_billed = null;
						} else {

							row1.actual_billed = rs_tDBInput_1.getBoolean(65);
							if (rs_tDBInput_1.wasNull()) {
								row1.actual_billed = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 66) {
							row1.actual_start_time = null;
						} else {

							row1.actual_start_time = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 66);
						}
						if (colQtyInRs_tDBInput_1 < 67) {
							row1.actual_end_time = null;
						} else {

							row1.actual_end_time = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 67);
						}
						if (colQtyInRs_tDBInput_1 < 68) {
							row1.actual_units = null;
						} else {

							row1.actual_units = rs_tDBInput_1.getInt(68);
							if (rs_tDBInput_1.wasNull()) {
								row1.actual_units = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 69) {
							row1.actual_duration = null;
						} else {

							row1.actual_duration = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 69);
						}
						if (colQtyInRs_tDBInput_1 < 70) {
							row1.service_billed_date_id = null;
						} else {

							row1.service_billed_date_id = rs_tDBInput_1.getInt(70);
							if (rs_tDBInput_1.wasNull()) {
								row1.service_billed_date_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 71) {
							row1.in_process_units_batched = null;
						} else {

							row1.in_process_units_batched = rs_tDBInput_1.getInt(71);
							if (rs_tDBInput_1.wasNull()) {
								row1.in_process_units_batched = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 72) {
							row1.note_duration = null;
						} else {

							row1.note_duration = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 72);
						}
						if (colQtyInRs_tDBInput_1 < 73) {
							row1.note_end_time = null;
						} else {

							row1.note_end_time = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 73);
						}
						if (colQtyInRs_tDBInput_1 < 74) {
							row1.note_start_time = null;
						} else {

							row1.note_start_time = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 74);
						}
						if (colQtyInRs_tDBInput_1 < 75) {
							row1.rate_type = null;
						} else {

							row1.rate_type = routines.system.JDBCUtil.getString(rs_tDBInput_1, 75, false);
						}
						if (colQtyInRs_tDBInput_1 < 76) {
							row1.first_encounter = null;
						} else {

							row1.first_encounter = rs_tDBInput_1.getBoolean(76);
							if (rs_tDBInput_1.wasNull()) {
								row1.first_encounter = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 77) {
							row1.units_calculated = null;
						} else {

							row1.units_calculated = rs_tDBInput_1.getInt(77);
							if (rs_tDBInput_1.wasNull()) {
								row1.units_calculated = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 78) {
							row1.clqnote_has_child = null;
						} else {

							row1.clqnote_has_child = rs_tDBInput_1.getBoolean(78);
							if (rs_tDBInput_1.wasNull()) {
								row1.clqnote_has_child = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 79) {
							row1.missed_shift_id = null;
						} else {

							row1.missed_shift_id = rs_tDBInput_1.getInt(79);
							if (rs_tDBInput_1.wasNull()) {
								row1.missed_shift_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 80) {
							row1.missed_shift_units = null;
						} else {

							row1.missed_shift_units = rs_tDBInput_1.getInt(80);
							if (rs_tDBInput_1.wasNull()) {
								row1.missed_shift_units = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 81) {
							row1.billed_units = null;
						} else {

							row1.billed_units = rs_tDBInput_1.getInt(81);
							if (rs_tDBInput_1.wasNull()) {
								row1.billed_units = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 82) {
							row1.transaction_type = null;
						} else {

							row1.transaction_type = routines.system.JDBCUtil.getString(rs_tDBInput_1, 82, false);
						}
						if (colQtyInRs_tDBInput_1 < 83) {
							row1.transaction_date_id = null;
						} else {

							row1.transaction_date_id = rs_tDBInput_1.getInt(83);
							if (rs_tDBInput_1.wasNull()) {
								row1.transaction_date_id = null;
							}
						}

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tBigQueryOutput_1_tBQOB main ] start
						 */

						currentVirtualComponent = "tBigQueryOutput_1";

						currentComponent = "tBigQueryOutput_1_tBQOB";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row1"

							);
						}

						String[] row_tBigQueryOutput_1_tBQOB = new String[83];
						java.util.Arrays.fill(row_tBigQueryOutput_1_tBQOB, "\\N");

						int curColumnIndex_tBigQueryOutput_1_tBQOB = 0;

						curColumnIndex_tBigQueryOutput_1_tBQOB = 0;

						if (row1.client_id != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = String
									.valueOf(row1.client_id);

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 1;

						if (row1.supervisor_id != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = String
									.valueOf(row1.supervisor_id);

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 2;

						if (row1.client_cost_center_id != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = String
									.valueOf(row1.client_cost_center_id);

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 3;

						if (row1.employee_cost_center_id != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = String
									.valueOf(row1.employee_cost_center_id);

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 4;

						if (row1.employee_id != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = String
									.valueOf(row1.employee_id);

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 5;

						if (row1.ar_payer_id != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = String
									.valueOf(row1.ar_payer_id);

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 6;

						if (row1.department_id != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = String
									.valueOf(row1.department_id);

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 7;

						if (row1.service_cost_center_id != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = String
									.valueOf(row1.service_cost_center_id);

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 8;

						if (row1.site_id != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = String
									.valueOf(row1.site_id);

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 9;

						if (row1.school_district_id != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = String
									.valueOf(row1.school_district_id);

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 10;

						if (row1.authorization_id != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = String
									.valueOf(row1.authorization_id);

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 11;

						if (row1.authorized_id != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = String
									.valueOf(row1.authorized_id);

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 12;

						if (row1.service_authorization_approval != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = row1.service_authorization_approval;

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 13;

						if (row1.service_authorization_date_id != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = row1.service_authorization_date_id;

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 14;

						if (row1.Service_Authorization_Expired != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = row1.Service_Authorization_Expired;

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 15;

						if (row1.service_authorization_description != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = row1.service_authorization_description;

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 16;

						if (row1.company_name != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = row1.company_name;

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 17;

						if (row1.service_abbreviation != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = row1.service_abbreviation;

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 18;

						if (row1.service_code != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = row1.service_code;

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 19;

						if (row1.authorized_start_date_id != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = row1.authorized_start_date_id;

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 20;

						if (row1.authorized_end_date_id != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = row1.authorized_end_date_id;

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 21;

						if (row1.authorization_start_date_id != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = row1.authorization_start_date_id;

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 22;

						if (row1.authorization_end_date_id != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = row1.authorization_end_date_id;

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 23;

						if (row1.service_program != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = row1.service_program;

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 24;

						if (row1.service_place != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = row1.service_place;

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 25;

						if (row1.service_is_sum_and_round != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = String
									.valueOf(row1.service_is_sum_and_round);

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 26;

						if (row1.validate_to_schedules != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = String
									.valueOf(row1.validate_to_schedules);

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 27;

						if (row1.service_minimum_minutes != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = String
									.valueOf(row1.service_minimum_minutes);

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 28;

						if (row1.service_units_per_hour != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = String
									.valueOf(row1.service_units_per_hour);

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 29;

						if (row1.service_max_units_total != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = String
									.valueOf(row1.service_max_units_total);

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 30;

						if (row1.service_auth_max_units_total != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = String
									.valueOf(row1.service_auth_max_units_total);

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 31;

						if (row1.auth_level_validation != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = String
									.valueOf(true == row1.auth_level_validation ? "1" : "0");

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 32;

						if (row1.total_units_authorized != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = String
									.valueOf(row1.total_units_authorized);

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 33;

						if (row1.current_rate != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = String
									.valueOf(row1.current_rate);

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 34;

						if (row1.caregiver_id != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = String
									.valueOf(row1.caregiver_id);

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 35;

						if (row1.inv_stg_service_date_id != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = String
									.valueOf(row1.inv_stg_service_date_id);

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 36;

						if (row1.in_schedule_note_service_date_id != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = String
									.valueOf(row1.in_schedule_note_service_date_id);

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 37;

						if (row1.note_date_of_service_id != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = String
									.valueOf(row1.note_date_of_service_id);

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 38;

						if (row1.in_actual_note_service_date_id != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = String
									.valueOf(row1.in_actual_note_service_date_id);

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 39;

						if (row1.schedule_duration != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = FormatterUtils
									.format_Date(row1.schedule_duration, "yyyy-MM-dd HH:mm:ss");

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 40;

						if (row1.schedule_start_date_id != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = String
									.valueOf(row1.schedule_start_date_id);

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 41;

						if (row1.schedule_end_date_id != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = String
									.valueOf(row1.schedule_end_date_id);

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 42;

						if (row1.schedule_start_time != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = FormatterUtils
									.format_Date(row1.schedule_start_time, "yyyy-MM-dd HH:mm:ss");

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 43;

						if (row1.schedule_end_time != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = FormatterUtils
									.format_Date(row1.schedule_end_time, "yyyy-MM-dd HH:mm:ss");

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 44;

						if (row1.schedule_units != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = String
									.valueOf(row1.schedule_units);

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 45;

						if (row1.schedule_status != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = row1.schedule_status;

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 46;

						if (row1.actual_start_date_id != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = String
									.valueOf(row1.actual_start_date_id);

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 47;

						if (row1.actual_end_date_id != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = String
									.valueOf(row1.actual_end_date_id);

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 48;

						if (row1.billing_attending_NPI != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = row1.billing_attending_NPI;

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 49;

						if (row1.actual_imported != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = String
									.valueOf(true == row1.actual_imported ? "1" : "0");

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 50;

						if (row1.actual_hold_pay != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = String
									.valueOf(true == row1.actual_hold_pay ? "1" : "0");

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 51;

						if (row1.actual_hold_bill != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = String
									.valueOf(true == row1.actual_hold_bill ? "1" : "0");

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 52;

						if (row1.actual_time_sheet_approved != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = String
									.valueOf(true == row1.actual_time_sheet_approved ? "1" : "0");

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 53;

						if (row1.actual_note_approved_bl != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = String
									.valueOf(true == row1.actual_note_approved_bl ? "1" : "0");

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 54;

						if (row1.actual_note_approved_pr != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = String
									.valueOf(true == row1.actual_note_approved_pr ? "1" : "0");

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 55;

						if (row1.actual_status_BL != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = row1.actual_status_BL;

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 56;

						if (row1.actual_emp_pay_type != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = row1.actual_emp_pay_type;

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 57;

						if (row1.ineligible_for_billing != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = String
									.valueOf(true == row1.ineligible_for_billing ? "1" : "0");

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 58;

						if (row1.actual_adjustment != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = String
									.valueOf(true == row1.actual_adjustment ? "1" : "0");

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 59;

						if (row1.actual_check_date_id != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = String
									.valueOf(row1.actual_check_date_id);

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 60;

						if (row1.actual_last_check_date_id != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = String
									.valueOf(row1.actual_last_check_date_id);

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 61;

						if (row1.actual_paid != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = String
									.valueOf(true == row1.actual_paid ? "1" : "0");

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 62;

						if (row1.ineligible_for_payroll != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = String
									.valueOf(true == row1.ineligible_for_payroll ? "1" : "0");

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 63;

						if (row1.actual_invoice_number != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = String
									.valueOf(row1.actual_invoice_number);

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 64;

						if (row1.actual_billed != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = String
									.valueOf(true == row1.actual_billed ? "1" : "0");

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 65;

						if (row1.actual_start_time != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = FormatterUtils
									.format_Date(row1.actual_start_time, "yyyy-MM-dd HH:mm:ss");

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 66;

						if (row1.actual_end_time != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = FormatterUtils
									.format_Date(row1.actual_end_time, "yyyy-MM-dd HH:mm:ss");

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 67;

						if (row1.actual_units != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = String
									.valueOf(row1.actual_units);

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 68;

						if (row1.actual_duration != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = FormatterUtils
									.format_Date(row1.actual_duration, "yyyy-MM-dd HH:mm:ss");

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 69;

						if (row1.service_billed_date_id != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = String
									.valueOf(row1.service_billed_date_id);

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 70;

						if (row1.in_process_units_batched != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = String
									.valueOf(row1.in_process_units_batched);

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 71;

						if (row1.note_duration != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = FormatterUtils
									.format_Date(row1.note_duration, "yyyy-MM-dd HH:mm:ss");

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 72;

						if (row1.note_end_time != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = FormatterUtils
									.format_Date(row1.note_end_time, "yyyy-MM-dd HH:mm:ss");

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 73;

						if (row1.note_start_time != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = FormatterUtils
									.format_Date(row1.note_start_time, "yyyy-MM-dd HH:mm:ss");

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 74;

						if (row1.rate_type != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = row1.rate_type;

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 75;

						if (row1.first_encounter != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = String
									.valueOf(true == row1.first_encounter ? "1" : "0");

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 76;

						if (row1.units_calculated != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = String
									.valueOf(row1.units_calculated);

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 77;

						if (row1.clqnote_has_child != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = String
									.valueOf(true == row1.clqnote_has_child ? "1" : "0");

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 78;

						if (row1.missed_shift_id != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = String
									.valueOf(row1.missed_shift_id);

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 79;

						if (row1.missed_shift_units != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = String
									.valueOf(row1.missed_shift_units);

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 80;

						if (row1.billed_units != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = String
									.valueOf(row1.billed_units);

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 81;

						if (row1.transaction_type != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = row1.transaction_type;

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 82;

						if (row1.transaction_date_id != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = String
									.valueOf(row1.transaction_date_id);

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						csvWriter_tBigQueryOutput_1_tBQOB.writeNextEnhance(row_tBigQueryOutput_1_tBQOB, "");
						nb_line_tBigQueryOutput_1_tBQOB++;

						tos_count_tBigQueryOutput_1_tBQOB++;

						/**
						 * [tBigQueryOutput_1_tBQOB main ] stop
						 */

						/**
						 * [tBigQueryOutput_1_tBQOB process_data_begin ] start
						 */

						currentVirtualComponent = "tBigQueryOutput_1";

						currentComponent = "tBigQueryOutput_1_tBQOB";

						/**
						 * [tBigQueryOutput_1_tBQOB process_data_begin ] stop
						 */

						/**
						 * [tBigQueryOutput_1_tBQOB process_data_end ] start
						 */

						currentVirtualComponent = "tBigQueryOutput_1";

						currentComponent = "tBigQueryOutput_1_tBQOB";

						/**
						 * [tBigQueryOutput_1_tBQOB process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					if (rs_tDBInput_1 != null) {
						rs_tDBInput_1.close();
					}
					if (stmt_tDBInput_1 != null) {
						stmt_tDBInput_1.close();
					}
					if (conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {

						conn_tDBInput_1.commit();

						conn_tDBInput_1.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}
				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tBigQueryOutput_1_tBQOB end ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_1";

				currentComponent = "tBigQueryOutput_1_tBQOB";

				if (csvWriter_tBigQueryOutput_1_tBQOB != null) {
					csvWriter_tBigQueryOutput_1_tBQOB.close();
				}
				resourceMap.put("finish_tBigQueryOutput_1_tBQOB", true);
				globalMap.put("tBigQueryOutput_1_tBQOB_NB_LINE", nb_line_tBigQueryOutput_1_tBQOB);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tBigQueryOutput_1_tBQOB", true);
				end_Hash.put("tBigQueryOutput_1_tBQOB", System.currentTimeMillis());

				/**
				 * [tBigQueryOutput_1_tBQOB end ] stop
				 */

				/**
				 * [tBigQueryOutput_1_tBQBE begin ] start
				 */

				ok_Hash.put("tBigQueryOutput_1_tBQBE", false);
				start_Hash.put("tBigQueryOutput_1_tBQBE", System.currentTimeMillis());

				currentVirtualComponent = "tBigQueryOutput_1";

				currentComponent = "tBigQueryOutput_1_tBQBE";

				int tos_count_tBigQueryOutput_1_tBQBE = 0;

				/* ----START-CREATING-CLIENT (Cloud API)---- */

				com.google.auth.oauth2.GoogleCredentials credentials_tBigQueryOutput_1;
				java.io.File credentialsFile_tBigQueryOutput_1 = new java.io.File(
						"/Users/jsun/Documents/WCIWork/OnTarget/code/otmirror-060322-9471bb896012.json");
				try (java.io.FileInputStream credentialsStream_tBigQueryOutput_1 = new java.io.FileInputStream(
						credentialsFile_tBigQueryOutput_1)) {
					credentials_tBigQueryOutput_1 = com.google.auth.oauth2.ServiceAccountCredentials
							.fromStream(credentialsStream_tBigQueryOutput_1);
				}

				com.google.cloud.bigquery.BigQuery bigquery_tBigQueryOutput_1 = com.google.cloud.bigquery.BigQueryOptions
						.newBuilder().setCredentials(credentials_tBigQueryOutput_1).setProjectId("otmirror-060322")
						.build().getService();

				/* ----END-CREATING-CLIENT (Cloud API)---- */

				long nb_line_tBigQueryOutput_1 = 0;

				com.google.auth.Credentials credential_tBigQueryOutput_1 = null;
				try {
					credential_tBigQueryOutput_1 = com.google.auth.oauth2.GoogleCredentials
							.fromStream(new java.io.FileInputStream(
									"/Users/jsun/Documents/WCIWork/OnTarget/code/otmirror-060322-9471bb896012.json"));
				} catch (IOException e_tBigQueryOutput_1) {
					globalMap.put("tBigQueryOutput_1_ERROR_MESSAGE", e_tBigQueryOutput_1.getMessage());
				}
				com.google.cloud.storage.Storage storage_tBigQueryOutput_1 = com.google.cloud.storage.StorageOptions
						.newBuilder().setCredentials(credential_tBigQueryOutput_1).build().getService();

				java.io.File file_tBigQueryOutput_1 = new java.io.File(
						"/Applications/TOSDI-8.0.1/studio/workspace/schedule_data.avro");

				com.google.cloud.storage.BlobInfo blobInfo_tBigQueryOutput_1 = com.google.cloud.storage.BlobInfo
						.newBuilder("dw-tmp", file_tBigQueryOutput_1.getName()).build();
				storage_tBigQueryOutput_1.create(blobInfo_tBigQueryOutput_1,
						java.nio.file.Files.readAllBytes(file_tBigQueryOutput_1.toPath()));

				/* ----END-UPLOADING-FILE---- */

				/* ----START-CREATING-JOB (Cloud API)---- */
				com.google.cloud.bigquery.TableId tableId_tBigQueryOutput_1 = com.google.cloud.bigquery.TableId
						.of("otmirror-060322", "DW", "fact_transactions");
				com.google.cloud.bigquery.LoadJobConfiguration.Builder loadJobBuilder_tBigQueryOutput_1 = com.google.cloud.bigquery.LoadJobConfiguration
						.newBuilder(tableId_tBigQueryOutput_1, "gs://dw-tmp/schedule_data.avro");

				boolean dropTable_tBigQueryOutput_1 = false;

				if (dropTable_tBigQueryOutput_1
						&& bigquery_tBigQueryOutput_1.getTable(tableId_tBigQueryOutput_1) != null) {
					boolean deleted = bigquery_tBigQueryOutput_1.delete(tableId_tBigQueryOutput_1);
					if (deleted) {

					} else {
						throw new RuntimeException("Unable to delete table " + tableId_tBigQueryOutput_1);
					}
				}

				if (bigquery_tBigQueryOutput_1.getTable(tableId_tBigQueryOutput_1) == null) {
					java.util.List<com.google.cloud.bigquery.Field> fields_tBigQueryOutput_1 = new java.util.ArrayList<>();

					com.google.cloud.bigquery.Field field_0 = com.google.cloud.bigquery.Field
							.newBuilder("client_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_0);

					com.google.cloud.bigquery.Field field_1 = com.google.cloud.bigquery.Field
							.newBuilder("supervisor_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_1);

					com.google.cloud.bigquery.Field field_2 = com.google.cloud.bigquery.Field
							.newBuilder("client_cost_center_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_2);

					com.google.cloud.bigquery.Field field_3 = com.google.cloud.bigquery.Field
							.newBuilder("employee_cost_center_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_3);

					com.google.cloud.bigquery.Field field_4 = com.google.cloud.bigquery.Field
							.newBuilder("employee_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_4);

					com.google.cloud.bigquery.Field field_5 = com.google.cloud.bigquery.Field
							.newBuilder("ar_payer_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_5);

					com.google.cloud.bigquery.Field field_6 = com.google.cloud.bigquery.Field
							.newBuilder("department_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_6);

					com.google.cloud.bigquery.Field field_7 = com.google.cloud.bigquery.Field
							.newBuilder("service_cost_center_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_7);

					com.google.cloud.bigquery.Field field_8 = com.google.cloud.bigquery.Field
							.newBuilder("site_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_8);

					com.google.cloud.bigquery.Field field_9 = com.google.cloud.bigquery.Field
							.newBuilder("school_district_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_9);

					com.google.cloud.bigquery.Field field_10 = com.google.cloud.bigquery.Field
							.newBuilder("authorization_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_10);

					com.google.cloud.bigquery.Field field_11 = com.google.cloud.bigquery.Field
							.newBuilder("authorized_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_11);

					com.google.cloud.bigquery.Field field_12 = com.google.cloud.bigquery.Field
							.newBuilder("service_authorization_approval",
									com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_12);

					com.google.cloud.bigquery.Field field_13 = com.google.cloud.bigquery.Field
							.newBuilder("service_authorization_date_id",
									com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_13);

					com.google.cloud.bigquery.Field field_14 = com.google.cloud.bigquery.Field
							.newBuilder("Service_Authorization_Expired",
									com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_14);

					com.google.cloud.bigquery.Field field_15 = com.google.cloud.bigquery.Field
							.newBuilder("service_authorization_description",
									com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_15);

					com.google.cloud.bigquery.Field field_16 = com.google.cloud.bigquery.Field
							.newBuilder("company_name", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_16);

					com.google.cloud.bigquery.Field field_17 = com.google.cloud.bigquery.Field
							.newBuilder("service_abbreviation", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_17);

					com.google.cloud.bigquery.Field field_18 = com.google.cloud.bigquery.Field
							.newBuilder("service_code", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_18);

					com.google.cloud.bigquery.Field field_19 = com.google.cloud.bigquery.Field
							.newBuilder("authorized_start_date_id", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_19);

					com.google.cloud.bigquery.Field field_20 = com.google.cloud.bigquery.Field
							.newBuilder("authorized_end_date_id", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_20);

					com.google.cloud.bigquery.Field field_21 = com.google.cloud.bigquery.Field
							.newBuilder("authorization_start_date_id",
									com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_21);

					com.google.cloud.bigquery.Field field_22 = com.google.cloud.bigquery.Field
							.newBuilder("authorization_end_date_id", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_22);

					com.google.cloud.bigquery.Field field_23 = com.google.cloud.bigquery.Field
							.newBuilder("service_program", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_23);

					com.google.cloud.bigquery.Field field_24 = com.google.cloud.bigquery.Field
							.newBuilder("service_place", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_24);

					com.google.cloud.bigquery.Field field_25 = com.google.cloud.bigquery.Field
							.newBuilder("service_is_sum_and_round", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_25);

					com.google.cloud.bigquery.Field field_26 = com.google.cloud.bigquery.Field
							.newBuilder("validate_to_schedules", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_26);

					com.google.cloud.bigquery.Field field_27 = com.google.cloud.bigquery.Field
							.newBuilder("service_minimum_minutes", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_27);

					com.google.cloud.bigquery.Field field_28 = com.google.cloud.bigquery.Field
							.newBuilder("service_units_per_hour", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_28);

					com.google.cloud.bigquery.Field field_29 = com.google.cloud.bigquery.Field
							.newBuilder("service_max_units_total", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_29);

					com.google.cloud.bigquery.Field field_30 = com.google.cloud.bigquery.Field
							.newBuilder("service_auth_max_units_total",
									com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_30);

					com.google.cloud.bigquery.Field field_31 = com.google.cloud.bigquery.Field
							.newBuilder("auth_level_validation", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_31);

					com.google.cloud.bigquery.Field field_32 = com.google.cloud.bigquery.Field
							.newBuilder("total_units_authorized", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_32);

					com.google.cloud.bigquery.Field field_33 = com.google.cloud.bigquery.Field
							.newBuilder("current_rate", com.google.cloud.bigquery.LegacySQLTypeName.FLOAT)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_33);

					com.google.cloud.bigquery.Field field_34 = com.google.cloud.bigquery.Field
							.newBuilder("caregiver_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_34);

					com.google.cloud.bigquery.Field field_35 = com.google.cloud.bigquery.Field
							.newBuilder("inv_stg_service_date_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_35);

					com.google.cloud.bigquery.Field field_36 = com.google.cloud.bigquery.Field
							.newBuilder("in_schedule_note_service_date_id",
									com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_36);

					com.google.cloud.bigquery.Field field_37 = com.google.cloud.bigquery.Field
							.newBuilder("note_date_of_service_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_37);

					com.google.cloud.bigquery.Field field_38 = com.google.cloud.bigquery.Field
							.newBuilder("in_actual_note_service_date_id",
									com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_38);

					com.google.cloud.bigquery.Field field_39 = com.google.cloud.bigquery.Field
							.newBuilder("schedule_duration", com.google.cloud.bigquery.LegacySQLTypeName.TIMESTAMP)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_39);

					com.google.cloud.bigquery.Field field_40 = com.google.cloud.bigquery.Field
							.newBuilder("schedule_start_date_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_40);

					com.google.cloud.bigquery.Field field_41 = com.google.cloud.bigquery.Field
							.newBuilder("schedule_end_date_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_41);

					com.google.cloud.bigquery.Field field_42 = com.google.cloud.bigquery.Field
							.newBuilder("schedule_start_time", com.google.cloud.bigquery.LegacySQLTypeName.TIMESTAMP)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_42);

					com.google.cloud.bigquery.Field field_43 = com.google.cloud.bigquery.Field
							.newBuilder("schedule_end_time", com.google.cloud.bigquery.LegacySQLTypeName.TIMESTAMP)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_43);

					com.google.cloud.bigquery.Field field_44 = com.google.cloud.bigquery.Field
							.newBuilder("schedule_units", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_44);

					com.google.cloud.bigquery.Field field_45 = com.google.cloud.bigquery.Field
							.newBuilder("schedule_status", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_45);

					com.google.cloud.bigquery.Field field_46 = com.google.cloud.bigquery.Field
							.newBuilder("actual_start_date_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_46);

					com.google.cloud.bigquery.Field field_47 = com.google.cloud.bigquery.Field
							.newBuilder("actual_end_date_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_47);

					com.google.cloud.bigquery.Field field_48 = com.google.cloud.bigquery.Field
							.newBuilder("billing_attending_NPI", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_48);

					com.google.cloud.bigquery.Field field_49 = com.google.cloud.bigquery.Field
							.newBuilder("actual_imported", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_49);

					com.google.cloud.bigquery.Field field_50 = com.google.cloud.bigquery.Field
							.newBuilder("actual_hold_pay", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_50);

					com.google.cloud.bigquery.Field field_51 = com.google.cloud.bigquery.Field
							.newBuilder("actual_hold_bill", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_51);

					com.google.cloud.bigquery.Field field_52 = com.google.cloud.bigquery.Field
							.newBuilder("actual_time_sheet_approved",
									com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_52);

					com.google.cloud.bigquery.Field field_53 = com.google.cloud.bigquery.Field
							.newBuilder("actual_note_approved_bl", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_53);

					com.google.cloud.bigquery.Field field_54 = com.google.cloud.bigquery.Field
							.newBuilder("actual_note_approved_pr", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_54);

					com.google.cloud.bigquery.Field field_55 = com.google.cloud.bigquery.Field
							.newBuilder("actual_status_BL", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_55);

					com.google.cloud.bigquery.Field field_56 = com.google.cloud.bigquery.Field
							.newBuilder("actual_emp_pay_type", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_56);

					com.google.cloud.bigquery.Field field_57 = com.google.cloud.bigquery.Field
							.newBuilder("ineligible_for_billing", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_57);

					com.google.cloud.bigquery.Field field_58 = com.google.cloud.bigquery.Field
							.newBuilder("actual_adjustment", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_58);

					com.google.cloud.bigquery.Field field_59 = com.google.cloud.bigquery.Field
							.newBuilder("actual_check_date_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_59);

					com.google.cloud.bigquery.Field field_60 = com.google.cloud.bigquery.Field
							.newBuilder("actual_last_check_date_id",
									com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_60);

					com.google.cloud.bigquery.Field field_61 = com.google.cloud.bigquery.Field
							.newBuilder("actual_paid", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_61);

					com.google.cloud.bigquery.Field field_62 = com.google.cloud.bigquery.Field
							.newBuilder("ineligible_for_payroll", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_62);

					com.google.cloud.bigquery.Field field_63 = com.google.cloud.bigquery.Field
							.newBuilder("actual_invoice_number", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_63);

					com.google.cloud.bigquery.Field field_64 = com.google.cloud.bigquery.Field
							.newBuilder("actual_billed", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_64);

					com.google.cloud.bigquery.Field field_65 = com.google.cloud.bigquery.Field
							.newBuilder("actual_start_time", com.google.cloud.bigquery.LegacySQLTypeName.TIMESTAMP)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_65);

					com.google.cloud.bigquery.Field field_66 = com.google.cloud.bigquery.Field
							.newBuilder("actual_end_time", com.google.cloud.bigquery.LegacySQLTypeName.TIMESTAMP)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_66);

					com.google.cloud.bigquery.Field field_67 = com.google.cloud.bigquery.Field
							.newBuilder("actual_units", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_67);

					com.google.cloud.bigquery.Field field_68 = com.google.cloud.bigquery.Field
							.newBuilder("actual_duration", com.google.cloud.bigquery.LegacySQLTypeName.TIMESTAMP)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_68);

					com.google.cloud.bigquery.Field field_69 = com.google.cloud.bigquery.Field
							.newBuilder("service_billed_date_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_69);

					com.google.cloud.bigquery.Field field_70 = com.google.cloud.bigquery.Field
							.newBuilder("in_process_units_batched", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_70);

					com.google.cloud.bigquery.Field field_71 = com.google.cloud.bigquery.Field
							.newBuilder("note_duration", com.google.cloud.bigquery.LegacySQLTypeName.TIMESTAMP)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_71);

					com.google.cloud.bigquery.Field field_72 = com.google.cloud.bigquery.Field
							.newBuilder("note_end_time", com.google.cloud.bigquery.LegacySQLTypeName.TIMESTAMP)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_72);

					com.google.cloud.bigquery.Field field_73 = com.google.cloud.bigquery.Field
							.newBuilder("note_start_time", com.google.cloud.bigquery.LegacySQLTypeName.TIMESTAMP)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_73);

					com.google.cloud.bigquery.Field field_74 = com.google.cloud.bigquery.Field
							.newBuilder("rate_type", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_74);

					com.google.cloud.bigquery.Field field_75 = com.google.cloud.bigquery.Field
							.newBuilder("first_encounter", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_75);

					com.google.cloud.bigquery.Field field_76 = com.google.cloud.bigquery.Field
							.newBuilder("units_calculated", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_76);

					com.google.cloud.bigquery.Field field_77 = com.google.cloud.bigquery.Field
							.newBuilder("clqnote_has_child", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_77);

					com.google.cloud.bigquery.Field field_78 = com.google.cloud.bigquery.Field
							.newBuilder("missed_shift_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_78);

					com.google.cloud.bigquery.Field field_79 = com.google.cloud.bigquery.Field
							.newBuilder("missed_shift_units", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_79);

					com.google.cloud.bigquery.Field field_80 = com.google.cloud.bigquery.Field
							.newBuilder("billed_units", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_80);

					com.google.cloud.bigquery.Field field_81 = com.google.cloud.bigquery.Field
							.newBuilder("transaction_type", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_81);

					com.google.cloud.bigquery.Field field_82 = com.google.cloud.bigquery.Field
							.newBuilder("transaction_date_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_82);

					com.google.cloud.bigquery.Schema schema_tBigQueryOutput_1 = com.google.cloud.bigquery.Schema
							.of(fields_tBigQueryOutput_1);
					com.google.cloud.bigquery.TableInfo tableInfo_tBigQueryOutput_1 = com.google.cloud.bigquery.TableInfo
							.newBuilder(tableId_tBigQueryOutput_1,
									com.google.cloud.bigquery.StandardTableDefinition.of(schema_tBigQueryOutput_1))
							.build();
					com.google.cloud.bigquery.Table table_tBigQueryOutput_1 = bigquery_tBigQueryOutput_1
							.create(tableInfo_tBigQueryOutput_1);
					loadJobBuilder_tBigQueryOutput_1.setSchema(schema_tBigQueryOutput_1);
					loadJobBuilder_tBigQueryOutput_1
							.setCreateDisposition(com.google.cloud.bigquery.JobInfo.CreateDisposition.CREATE_IF_NEEDED);

				} else {
					loadJobBuilder_tBigQueryOutput_1
							.setCreateDisposition(com.google.cloud.bigquery.JobInfo.CreateDisposition.CREATE_NEVER);
				}

				loadJobBuilder_tBigQueryOutput_1
						.setWriteDisposition(com.google.cloud.bigquery.JobInfo.WriteDisposition.WRITE_APPEND);
				loadJobBuilder_tBigQueryOutput_1.setDestinationTable(tableId_tBigQueryOutput_1);
				com.google.cloud.bigquery.CsvOptions.Builder csvOptions_tBigQueryOutput_1 = com.google.cloud.bigquery.CsvOptions
						.newBuilder();
				csvOptions_tBigQueryOutput_1.setAllowQuotedNewLines(true);
				csvOptions_tBigQueryOutput_1.setSkipLeadingRows(0);

				csvOptions_tBigQueryOutput_1.setFieldDelimiter(",");

				loadJobBuilder_tBigQueryOutput_1.setFormatOptions(csvOptions_tBigQueryOutput_1.build());
				loadJobBuilder_tBigQueryOutput_1.setNullMarker("\\N");
				com.google.cloud.bigquery.Job job_tBigQueryOutput_1 = bigquery_tBigQueryOutput_1
						.create(com.google.cloud.bigquery.JobInfo.of(loadJobBuilder_tBigQueryOutput_1.build()));
				job_tBigQueryOutput_1 = job_tBigQueryOutput_1
						.waitFor(com.google.cloud.RetryOption.initialRetryDelay(org.threeten.bp.Duration.ofSeconds(1)));
				com.google.gson.Gson gsonObject_tBigQueryOutput_1 = new com.google.gson.Gson();
				if (job_tBigQueryOutput_1 != null && job_tBigQueryOutput_1.getStatus().getError() == null) {
					globalMap.put("tBigQueryOutput_1_JOBID", job_tBigQueryOutput_1.getJobId().getJob());
					globalMap.put("tBigQueryOutput_1_STATISTICS",
							gsonObject_tBigQueryOutput_1.toJson(job_tBigQueryOutput_1.getStatistics()));

				} else {
					if (job_tBigQueryOutput_1 == null) {
						throw new RuntimeException("Job no longer exists");
					}
					globalMap.put("tBigQueryOutput_1_JOBID", job_tBigQueryOutput_1.getJobId().getJob());
					globalMap.put("tBigQueryOutput_1_STATISTICS",
							gsonObject_tBigQueryOutput_1.toJson(job_tBigQueryOutput_1.getStatistics()));
					List<com.google.cloud.bigquery.BigQueryError> errorList = job_tBigQueryOutput_1.getStatus()
							.getExecutionErrors();
					throw new RuntimeException("Job failed: " + errorList.get(errorList.size() - 1));
				}

				/* ----END-CREATING-JOB (Cloud API)---- */

				/**
				 * [tBigQueryOutput_1_tBQBE begin ] stop
				 */

				/**
				 * [tBigQueryOutput_1_tBQBE main ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_1";

				currentComponent = "tBigQueryOutput_1_tBQBE";

				tos_count_tBigQueryOutput_1_tBQBE++;

				/**
				 * [tBigQueryOutput_1_tBQBE main ] stop
				 */

				/**
				 * [tBigQueryOutput_1_tBQBE process_data_begin ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_1";

				currentComponent = "tBigQueryOutput_1_tBQBE";

				/**
				 * [tBigQueryOutput_1_tBQBE process_data_begin ] stop
				 */

				/**
				 * [tBigQueryOutput_1_tBQBE process_data_end ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_1";

				currentComponent = "tBigQueryOutput_1_tBQBE";

				/**
				 * [tBigQueryOutput_1_tBQBE process_data_end ] stop
				 */

				/**
				 * [tBigQueryOutput_1_tBQBE end ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_1";

				currentComponent = "tBigQueryOutput_1_tBQBE";

				ok_Hash.put("tBigQueryOutput_1_tBQBE", true);
				end_Hash.put("tBigQueryOutput_1_tBQBE", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tJava_1Process(globalMap);

				/**
				 * [tBigQueryOutput_1_tBQBE end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tBigQueryOutput_1_tBQOB finally ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_1";

				currentComponent = "tBigQueryOutput_1_tBQOB";

				if (resourceMap.get("finish_tBigQueryOutput_1_tBQOB") == null) {
					if (resourceMap.get("csvWriter_tBigQueryOutput_1_tBQOB") != null) {
						((com.talend.csv.CSVWriter) resourceMap.get("csvWriter_tBigQueryOutput_1_tBQOB")).close();
					}
				}

				/**
				 * [tBigQueryOutput_1_tBQOB finally ] stop
				 */

				/**
				 * [tBigQueryOutput_1_tBQBE finally ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_1";

				currentComponent = "tBigQueryOutput_1_tBQBE";

				/**
				 * [tBigQueryOutput_1_tBQBE finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tJava_1 begin ] start
				 */

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());

				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				String foo = "bar";
				Integer Lines = (Integer) globalMap.get("tDBInput_1_NB_LINE");
//System.out.println("In total processed "+Lines+" schedule lines to big query from service ids " + context.ServiceID);
				System.out.println("schedule data reload finished at " + TalendDate.getDate("YYYY-MM-dd HH:mm:ss"));
				System.out.println(
						"starting to reload invoice data in BigQuery " + TalendDate.getDate("YYYY-MM-dd HH:mm:ss"));

				/**
				 * [tJava_1 begin ] stop
				 */

				/**
				 * [tJava_1 main ] start
				 */

				currentComponent = "tJava_1";

				tos_count_tJava_1++;

				/**
				 * [tJava_1 main ] stop
				 */

				/**
				 * [tJava_1 process_data_begin ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 process_data_begin ] stop
				 */

				/**
				 * [tJava_1 process_data_end ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 process_data_end ] stop
				 */

				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				/**
				 * [tJava_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tJava_1 finally ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}

	public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_ONTARGET_load_transactions_initial = new byte[0];
		static byte[] commonByteArray_ONTARGET_load_transactions_initial = new byte[0];

		public Integer client_id;

		public Integer getClient_id() {
			return this.client_id;
		}

		public Integer supervisor_id;

		public Integer getSupervisor_id() {
			return this.supervisor_id;
		}

		public Integer client_cost_center_id;

		public Integer getClient_cost_center_id() {
			return this.client_cost_center_id;
		}

		public Integer employee_cost_center_id;

		public Integer getEmployee_cost_center_id() {
			return this.employee_cost_center_id;
		}

		public Integer employee_id;

		public Integer getEmployee_id() {
			return this.employee_id;
		}

		public Integer ar_payer_id;

		public Integer getAr_payer_id() {
			return this.ar_payer_id;
		}

		public Integer department_id;

		public Integer getDepartment_id() {
			return this.department_id;
		}

		public Integer service_cost_center_id;

		public Integer getService_cost_center_id() {
			return this.service_cost_center_id;
		}

		public Integer site_id;

		public Integer getSite_id() {
			return this.site_id;
		}

		public Integer school_district_id;

		public Integer getSchool_district_id() {
			return this.school_district_id;
		}

		public Integer authorization_id;

		public Integer getAuthorization_id() {
			return this.authorization_id;
		}

		public Integer authorized_id;

		public Integer getAuthorized_id() {
			return this.authorized_id;
		}

		public String service_authorization_approval;

		public String getService_authorization_approval() {
			return this.service_authorization_approval;
		}

		public String service_authorization_date_id;

		public String getService_authorization_date_id() {
			return this.service_authorization_date_id;
		}

		public String Service_Authorization_Expired;

		public String getService_Authorization_Expired() {
			return this.Service_Authorization_Expired;
		}

		public String service_authorization_description;

		public String getService_authorization_description() {
			return this.service_authorization_description;
		}

		public String company_name;

		public String getCompany_name() {
			return this.company_name;
		}

		public String service_abbreviation;

		public String getService_abbreviation() {
			return this.service_abbreviation;
		}

		public String service_code;

		public String getService_code() {
			return this.service_code;
		}

		public String authorized_start_date_id;

		public String getAuthorized_start_date_id() {
			return this.authorized_start_date_id;
		}

		public String authorized_end_date_id;

		public String getAuthorized_end_date_id() {
			return this.authorized_end_date_id;
		}

		public String authorization_start_date_id;

		public String getAuthorization_start_date_id() {
			return this.authorization_start_date_id;
		}

		public String authorization_end_date_id;

		public String getAuthorization_end_date_id() {
			return this.authorization_end_date_id;
		}

		public String service_program;

		public String getService_program() {
			return this.service_program;
		}

		public String service_place;

		public String getService_place() {
			return this.service_place;
		}

		public Integer service_is_sum_and_round;

		public Integer getService_is_sum_and_round() {
			return this.service_is_sum_and_round;
		}

		public Integer validate_to_schedules;

		public Integer getValidate_to_schedules() {
			return this.validate_to_schedules;
		}

		public Integer service_minimum_minutes;

		public Integer getService_minimum_minutes() {
			return this.service_minimum_minutes;
		}

		public Integer service_units_per_hour;

		public Integer getService_units_per_hour() {
			return this.service_units_per_hour;
		}

		public Integer service_max_units_total;

		public Integer getService_max_units_total() {
			return this.service_max_units_total;
		}

		public Integer service_auth_max_units_total;

		public Integer getService_auth_max_units_total() {
			return this.service_auth_max_units_total;
		}

		public Boolean auth_level_validation;

		public Boolean getAuth_level_validation() {
			return this.auth_level_validation;
		}

		public Integer total_units_authorized;

		public Integer getTotal_units_authorized() {
			return this.total_units_authorized;
		}

		public Float current_rate;

		public Float getCurrent_rate() {
			return this.current_rate;
		}

		public Integer caregiver_id;

		public Integer getCaregiver_id() {
			return this.caregiver_id;
		}

		public Integer inv_stg_service_date_id;

		public Integer getInv_stg_service_date_id() {
			return this.inv_stg_service_date_id;
		}

		public Integer in_schedule_note_service_date_id;

		public Integer getIn_schedule_note_service_date_id() {
			return this.in_schedule_note_service_date_id;
		}

		public Integer note_date_of_service_id;

		public Integer getNote_date_of_service_id() {
			return this.note_date_of_service_id;
		}

		public Integer in_actual_note_service_date_id;

		public Integer getIn_actual_note_service_date_id() {
			return this.in_actual_note_service_date_id;
		}

		public java.util.Date schedule_duration;

		public java.util.Date getSchedule_duration() {
			return this.schedule_duration;
		}

		public Integer schedule_start_date_id;

		public Integer getSchedule_start_date_id() {
			return this.schedule_start_date_id;
		}

		public Integer schedule_end_date_id;

		public Integer getSchedule_end_date_id() {
			return this.schedule_end_date_id;
		}

		public java.util.Date schedule_start_time;

		public java.util.Date getSchedule_start_time() {
			return this.schedule_start_time;
		}

		public java.util.Date schedule_end_time;

		public java.util.Date getSchedule_end_time() {
			return this.schedule_end_time;
		}

		public Integer schedule_units;

		public Integer getSchedule_units() {
			return this.schedule_units;
		}

		public String schedule_status;

		public String getSchedule_status() {
			return this.schedule_status;
		}

		public Integer actual_start_date_id;

		public Integer getActual_start_date_id() {
			return this.actual_start_date_id;
		}

		public Integer actual_end_date_id;

		public Integer getActual_end_date_id() {
			return this.actual_end_date_id;
		}

		public String billing_attending_NPI;

		public String getBilling_attending_NPI() {
			return this.billing_attending_NPI;
		}

		public Boolean actual_imported;

		public Boolean getActual_imported() {
			return this.actual_imported;
		}

		public Boolean actual_hold_pay;

		public Boolean getActual_hold_pay() {
			return this.actual_hold_pay;
		}

		public Boolean actual_hold_bill;

		public Boolean getActual_hold_bill() {
			return this.actual_hold_bill;
		}

		public Boolean actual_time_sheet_approved;

		public Boolean getActual_time_sheet_approved() {
			return this.actual_time_sheet_approved;
		}

		public Boolean actual_note_approved_bl;

		public Boolean getActual_note_approved_bl() {
			return this.actual_note_approved_bl;
		}

		public Boolean actual_note_approved_pr;

		public Boolean getActual_note_approved_pr() {
			return this.actual_note_approved_pr;
		}

		public String actual_status_BL;

		public String getActual_status_BL() {
			return this.actual_status_BL;
		}

		public String actual_emp_pay_type;

		public String getActual_emp_pay_type() {
			return this.actual_emp_pay_type;
		}

		public Boolean ineligible_for_billing;

		public Boolean getIneligible_for_billing() {
			return this.ineligible_for_billing;
		}

		public Boolean actual_adjustment;

		public Boolean getActual_adjustment() {
			return this.actual_adjustment;
		}

		public Integer actual_check_date_id;

		public Integer getActual_check_date_id() {
			return this.actual_check_date_id;
		}

		public Integer actual_last_check_date_id;

		public Integer getActual_last_check_date_id() {
			return this.actual_last_check_date_id;
		}

		public Boolean actual_paid;

		public Boolean getActual_paid() {
			return this.actual_paid;
		}

		public Boolean ineligible_for_payroll;

		public Boolean getIneligible_for_payroll() {
			return this.ineligible_for_payroll;
		}

		public Integer actual_invoice_number;

		public Integer getActual_invoice_number() {
			return this.actual_invoice_number;
		}

		public Boolean actual_billed;

		public Boolean getActual_billed() {
			return this.actual_billed;
		}

		public java.util.Date actual_start_time;

		public java.util.Date getActual_start_time() {
			return this.actual_start_time;
		}

		public java.util.Date actual_end_time;

		public java.util.Date getActual_end_time() {
			return this.actual_end_time;
		}

		public Integer actual_units;

		public Integer getActual_units() {
			return this.actual_units;
		}

		public java.util.Date actual_duration;

		public java.util.Date getActual_duration() {
			return this.actual_duration;
		}

		public Integer service_billed_date_id;

		public Integer getService_billed_date_id() {
			return this.service_billed_date_id;
		}

		public Integer in_process_units_batched;

		public Integer getIn_process_units_batched() {
			return this.in_process_units_batched;
		}

		public java.util.Date note_duration;

		public java.util.Date getNote_duration() {
			return this.note_duration;
		}

		public java.util.Date note_end_time;

		public java.util.Date getNote_end_time() {
			return this.note_end_time;
		}

		public java.util.Date note_start_time;

		public java.util.Date getNote_start_time() {
			return this.note_start_time;
		}

		public String rate_type;

		public String getRate_type() {
			return this.rate_type;
		}

		public Boolean first_encounter;

		public Boolean getFirst_encounter() {
			return this.first_encounter;
		}

		public Integer units_calculated;

		public Integer getUnits_calculated() {
			return this.units_calculated;
		}

		public Boolean clqnote_has_child;

		public Boolean getClqnote_has_child() {
			return this.clqnote_has_child;
		}

		public Integer missed_shift_id;

		public Integer getMissed_shift_id() {
			return this.missed_shift_id;
		}

		public Integer missed_shift_units;

		public Integer getMissed_shift_units() {
			return this.missed_shift_units;
		}

		public Integer billed_units;

		public Integer getBilled_units() {
			return this.billed_units;
		}

		public String transaction_type;

		public String getTransaction_type() {
			return this.transaction_type;
		}

		public Integer transaction_date_id;

		public Integer getTransaction_date_id() {
			return this.transaction_date_id;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ONTARGET_load_transactions_initial.length) {
					if (length < 1024 && commonByteArray_ONTARGET_load_transactions_initial.length == 0) {
						commonByteArray_ONTARGET_load_transactions_initial = new byte[1024];
					} else {
						commonByteArray_ONTARGET_load_transactions_initial = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ONTARGET_load_transactions_initial, 0, length);
				strReturn = new String(commonByteArray_ONTARGET_load_transactions_initial, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ONTARGET_load_transactions_initial.length) {
					if (length < 1024 && commonByteArray_ONTARGET_load_transactions_initial.length == 0) {
						commonByteArray_ONTARGET_load_transactions_initial = new byte[1024];
					} else {
						commonByteArray_ONTARGET_load_transactions_initial = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_ONTARGET_load_transactions_initial, 0, length);
				strReturn = new String(commonByteArray_ONTARGET_load_transactions_initial, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ONTARGET_load_transactions_initial) {

				try {

					int length = 0;

					this.client_id = readInteger(dis);

					this.supervisor_id = readInteger(dis);

					this.client_cost_center_id = readInteger(dis);

					this.employee_cost_center_id = readInteger(dis);

					this.employee_id = readInteger(dis);

					this.ar_payer_id = readInteger(dis);

					this.department_id = readInteger(dis);

					this.service_cost_center_id = readInteger(dis);

					this.site_id = readInteger(dis);

					this.school_district_id = readInteger(dis);

					this.authorization_id = readInteger(dis);

					this.authorized_id = readInteger(dis);

					this.service_authorization_approval = readString(dis);

					this.service_authorization_date_id = readString(dis);

					this.Service_Authorization_Expired = readString(dis);

					this.service_authorization_description = readString(dis);

					this.company_name = readString(dis);

					this.service_abbreviation = readString(dis);

					this.service_code = readString(dis);

					this.authorized_start_date_id = readString(dis);

					this.authorized_end_date_id = readString(dis);

					this.authorization_start_date_id = readString(dis);

					this.authorization_end_date_id = readString(dis);

					this.service_program = readString(dis);

					this.service_place = readString(dis);

					this.service_is_sum_and_round = readInteger(dis);

					this.validate_to_schedules = readInteger(dis);

					this.service_minimum_minutes = readInteger(dis);

					this.service_units_per_hour = readInteger(dis);

					this.service_max_units_total = readInteger(dis);

					this.service_auth_max_units_total = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.auth_level_validation = null;
					} else {
						this.auth_level_validation = dis.readBoolean();
					}

					this.total_units_authorized = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.current_rate = null;
					} else {
						this.current_rate = dis.readFloat();
					}

					this.caregiver_id = readInteger(dis);

					this.inv_stg_service_date_id = readInteger(dis);

					this.in_schedule_note_service_date_id = readInteger(dis);

					this.note_date_of_service_id = readInteger(dis);

					this.in_actual_note_service_date_id = readInteger(dis);

					this.schedule_duration = readDate(dis);

					this.schedule_start_date_id = readInteger(dis);

					this.schedule_end_date_id = readInteger(dis);

					this.schedule_start_time = readDate(dis);

					this.schedule_end_time = readDate(dis);

					this.schedule_units = readInteger(dis);

					this.schedule_status = readString(dis);

					this.actual_start_date_id = readInteger(dis);

					this.actual_end_date_id = readInteger(dis);

					this.billing_attending_NPI = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.actual_imported = null;
					} else {
						this.actual_imported = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_hold_pay = null;
					} else {
						this.actual_hold_pay = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_hold_bill = null;
					} else {
						this.actual_hold_bill = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_time_sheet_approved = null;
					} else {
						this.actual_time_sheet_approved = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_note_approved_bl = null;
					} else {
						this.actual_note_approved_bl = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_note_approved_pr = null;
					} else {
						this.actual_note_approved_pr = dis.readBoolean();
					}

					this.actual_status_BL = readString(dis);

					this.actual_emp_pay_type = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ineligible_for_billing = null;
					} else {
						this.ineligible_for_billing = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_adjustment = null;
					} else {
						this.actual_adjustment = dis.readBoolean();
					}

					this.actual_check_date_id = readInteger(dis);

					this.actual_last_check_date_id = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.actual_paid = null;
					} else {
						this.actual_paid = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.ineligible_for_payroll = null;
					} else {
						this.ineligible_for_payroll = dis.readBoolean();
					}

					this.actual_invoice_number = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.actual_billed = null;
					} else {
						this.actual_billed = dis.readBoolean();
					}

					this.actual_start_time = readDate(dis);

					this.actual_end_time = readDate(dis);

					this.actual_units = readInteger(dis);

					this.actual_duration = readDate(dis);

					this.service_billed_date_id = readInteger(dis);

					this.in_process_units_batched = readInteger(dis);

					this.note_duration = readDate(dis);

					this.note_end_time = readDate(dis);

					this.note_start_time = readDate(dis);

					this.rate_type = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.first_encounter = null;
					} else {
						this.first_encounter = dis.readBoolean();
					}

					this.units_calculated = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.clqnote_has_child = null;
					} else {
						this.clqnote_has_child = dis.readBoolean();
					}

					this.missed_shift_id = readInteger(dis);

					this.missed_shift_units = readInteger(dis);

					this.billed_units = readInteger(dis);

					this.transaction_type = readString(dis);

					this.transaction_date_id = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ONTARGET_load_transactions_initial) {

				try {

					int length = 0;

					this.client_id = readInteger(dis);

					this.supervisor_id = readInteger(dis);

					this.client_cost_center_id = readInteger(dis);

					this.employee_cost_center_id = readInteger(dis);

					this.employee_id = readInteger(dis);

					this.ar_payer_id = readInteger(dis);

					this.department_id = readInteger(dis);

					this.service_cost_center_id = readInteger(dis);

					this.site_id = readInteger(dis);

					this.school_district_id = readInteger(dis);

					this.authorization_id = readInteger(dis);

					this.authorized_id = readInteger(dis);

					this.service_authorization_approval = readString(dis);

					this.service_authorization_date_id = readString(dis);

					this.Service_Authorization_Expired = readString(dis);

					this.service_authorization_description = readString(dis);

					this.company_name = readString(dis);

					this.service_abbreviation = readString(dis);

					this.service_code = readString(dis);

					this.authorized_start_date_id = readString(dis);

					this.authorized_end_date_id = readString(dis);

					this.authorization_start_date_id = readString(dis);

					this.authorization_end_date_id = readString(dis);

					this.service_program = readString(dis);

					this.service_place = readString(dis);

					this.service_is_sum_and_round = readInteger(dis);

					this.validate_to_schedules = readInteger(dis);

					this.service_minimum_minutes = readInteger(dis);

					this.service_units_per_hour = readInteger(dis);

					this.service_max_units_total = readInteger(dis);

					this.service_auth_max_units_total = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.auth_level_validation = null;
					} else {
						this.auth_level_validation = dis.readBoolean();
					}

					this.total_units_authorized = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.current_rate = null;
					} else {
						this.current_rate = dis.readFloat();
					}

					this.caregiver_id = readInteger(dis);

					this.inv_stg_service_date_id = readInteger(dis);

					this.in_schedule_note_service_date_id = readInteger(dis);

					this.note_date_of_service_id = readInteger(dis);

					this.in_actual_note_service_date_id = readInteger(dis);

					this.schedule_duration = readDate(dis);

					this.schedule_start_date_id = readInteger(dis);

					this.schedule_end_date_id = readInteger(dis);

					this.schedule_start_time = readDate(dis);

					this.schedule_end_time = readDate(dis);

					this.schedule_units = readInteger(dis);

					this.schedule_status = readString(dis);

					this.actual_start_date_id = readInteger(dis);

					this.actual_end_date_id = readInteger(dis);

					this.billing_attending_NPI = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.actual_imported = null;
					} else {
						this.actual_imported = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_hold_pay = null;
					} else {
						this.actual_hold_pay = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_hold_bill = null;
					} else {
						this.actual_hold_bill = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_time_sheet_approved = null;
					} else {
						this.actual_time_sheet_approved = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_note_approved_bl = null;
					} else {
						this.actual_note_approved_bl = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_note_approved_pr = null;
					} else {
						this.actual_note_approved_pr = dis.readBoolean();
					}

					this.actual_status_BL = readString(dis);

					this.actual_emp_pay_type = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ineligible_for_billing = null;
					} else {
						this.ineligible_for_billing = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_adjustment = null;
					} else {
						this.actual_adjustment = dis.readBoolean();
					}

					this.actual_check_date_id = readInteger(dis);

					this.actual_last_check_date_id = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.actual_paid = null;
					} else {
						this.actual_paid = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.ineligible_for_payroll = null;
					} else {
						this.ineligible_for_payroll = dis.readBoolean();
					}

					this.actual_invoice_number = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.actual_billed = null;
					} else {
						this.actual_billed = dis.readBoolean();
					}

					this.actual_start_time = readDate(dis);

					this.actual_end_time = readDate(dis);

					this.actual_units = readInteger(dis);

					this.actual_duration = readDate(dis);

					this.service_billed_date_id = readInteger(dis);

					this.in_process_units_batched = readInteger(dis);

					this.note_duration = readDate(dis);

					this.note_end_time = readDate(dis);

					this.note_start_time = readDate(dis);

					this.rate_type = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.first_encounter = null;
					} else {
						this.first_encounter = dis.readBoolean();
					}

					this.units_calculated = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.clqnote_has_child = null;
					} else {
						this.clqnote_has_child = dis.readBoolean();
					}

					this.missed_shift_id = readInteger(dis);

					this.missed_shift_units = readInteger(dis);

					this.billed_units = readInteger(dis);

					this.transaction_type = readString(dis);

					this.transaction_date_id = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.client_id, dos);

				// Integer

				writeInteger(this.supervisor_id, dos);

				// Integer

				writeInteger(this.client_cost_center_id, dos);

				// Integer

				writeInteger(this.employee_cost_center_id, dos);

				// Integer

				writeInteger(this.employee_id, dos);

				// Integer

				writeInteger(this.ar_payer_id, dos);

				// Integer

				writeInteger(this.department_id, dos);

				// Integer

				writeInteger(this.service_cost_center_id, dos);

				// Integer

				writeInteger(this.site_id, dos);

				// Integer

				writeInteger(this.school_district_id, dos);

				// Integer

				writeInteger(this.authorization_id, dos);

				// Integer

				writeInteger(this.authorized_id, dos);

				// String

				writeString(this.service_authorization_approval, dos);

				// String

				writeString(this.service_authorization_date_id, dos);

				// String

				writeString(this.Service_Authorization_Expired, dos);

				// String

				writeString(this.service_authorization_description, dos);

				// String

				writeString(this.company_name, dos);

				// String

				writeString(this.service_abbreviation, dos);

				// String

				writeString(this.service_code, dos);

				// String

				writeString(this.authorized_start_date_id, dos);

				// String

				writeString(this.authorized_end_date_id, dos);

				// String

				writeString(this.authorization_start_date_id, dos);

				// String

				writeString(this.authorization_end_date_id, dos);

				// String

				writeString(this.service_program, dos);

				// String

				writeString(this.service_place, dos);

				// Integer

				writeInteger(this.service_is_sum_and_round, dos);

				// Integer

				writeInteger(this.validate_to_schedules, dos);

				// Integer

				writeInteger(this.service_minimum_minutes, dos);

				// Integer

				writeInteger(this.service_units_per_hour, dos);

				// Integer

				writeInteger(this.service_max_units_total, dos);

				// Integer

				writeInteger(this.service_auth_max_units_total, dos);

				// Boolean

				if (this.auth_level_validation == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.auth_level_validation);
				}

				// Integer

				writeInteger(this.total_units_authorized, dos);

				// Float

				if (this.current_rate == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.current_rate);
				}

				// Integer

				writeInteger(this.caregiver_id, dos);

				// Integer

				writeInteger(this.inv_stg_service_date_id, dos);

				// Integer

				writeInteger(this.in_schedule_note_service_date_id, dos);

				// Integer

				writeInteger(this.note_date_of_service_id, dos);

				// Integer

				writeInteger(this.in_actual_note_service_date_id, dos);

				// java.util.Date

				writeDate(this.schedule_duration, dos);

				// Integer

				writeInteger(this.schedule_start_date_id, dos);

				// Integer

				writeInteger(this.schedule_end_date_id, dos);

				// java.util.Date

				writeDate(this.schedule_start_time, dos);

				// java.util.Date

				writeDate(this.schedule_end_time, dos);

				// Integer

				writeInteger(this.schedule_units, dos);

				// String

				writeString(this.schedule_status, dos);

				// Integer

				writeInteger(this.actual_start_date_id, dos);

				// Integer

				writeInteger(this.actual_end_date_id, dos);

				// String

				writeString(this.billing_attending_NPI, dos);

				// Boolean

				if (this.actual_imported == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_imported);
				}

				// Boolean

				if (this.actual_hold_pay == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_hold_pay);
				}

				// Boolean

				if (this.actual_hold_bill == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_hold_bill);
				}

				// Boolean

				if (this.actual_time_sheet_approved == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_time_sheet_approved);
				}

				// Boolean

				if (this.actual_note_approved_bl == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_note_approved_bl);
				}

				// Boolean

				if (this.actual_note_approved_pr == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_note_approved_pr);
				}

				// String

				writeString(this.actual_status_BL, dos);

				// String

				writeString(this.actual_emp_pay_type, dos);

				// Boolean

				if (this.ineligible_for_billing == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.ineligible_for_billing);
				}

				// Boolean

				if (this.actual_adjustment == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_adjustment);
				}

				// Integer

				writeInteger(this.actual_check_date_id, dos);

				// Integer

				writeInteger(this.actual_last_check_date_id, dos);

				// Boolean

				if (this.actual_paid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_paid);
				}

				// Boolean

				if (this.ineligible_for_payroll == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.ineligible_for_payroll);
				}

				// Integer

				writeInteger(this.actual_invoice_number, dos);

				// Boolean

				if (this.actual_billed == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_billed);
				}

				// java.util.Date

				writeDate(this.actual_start_time, dos);

				// java.util.Date

				writeDate(this.actual_end_time, dos);

				// Integer

				writeInteger(this.actual_units, dos);

				// java.util.Date

				writeDate(this.actual_duration, dos);

				// Integer

				writeInteger(this.service_billed_date_id, dos);

				// Integer

				writeInteger(this.in_process_units_batched, dos);

				// java.util.Date

				writeDate(this.note_duration, dos);

				// java.util.Date

				writeDate(this.note_end_time, dos);

				// java.util.Date

				writeDate(this.note_start_time, dos);

				// String

				writeString(this.rate_type, dos);

				// Boolean

				if (this.first_encounter == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.first_encounter);
				}

				// Integer

				writeInteger(this.units_calculated, dos);

				// Boolean

				if (this.clqnote_has_child == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.clqnote_has_child);
				}

				// Integer

				writeInteger(this.missed_shift_id, dos);

				// Integer

				writeInteger(this.missed_shift_units, dos);

				// Integer

				writeInteger(this.billed_units, dos);

				// String

				writeString(this.transaction_type, dos);

				// Integer

				writeInteger(this.transaction_date_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.client_id, dos);

				// Integer

				writeInteger(this.supervisor_id, dos);

				// Integer

				writeInteger(this.client_cost_center_id, dos);

				// Integer

				writeInteger(this.employee_cost_center_id, dos);

				// Integer

				writeInteger(this.employee_id, dos);

				// Integer

				writeInteger(this.ar_payer_id, dos);

				// Integer

				writeInteger(this.department_id, dos);

				// Integer

				writeInteger(this.service_cost_center_id, dos);

				// Integer

				writeInteger(this.site_id, dos);

				// Integer

				writeInteger(this.school_district_id, dos);

				// Integer

				writeInteger(this.authorization_id, dos);

				// Integer

				writeInteger(this.authorized_id, dos);

				// String

				writeString(this.service_authorization_approval, dos);

				// String

				writeString(this.service_authorization_date_id, dos);

				// String

				writeString(this.Service_Authorization_Expired, dos);

				// String

				writeString(this.service_authorization_description, dos);

				// String

				writeString(this.company_name, dos);

				// String

				writeString(this.service_abbreviation, dos);

				// String

				writeString(this.service_code, dos);

				// String

				writeString(this.authorized_start_date_id, dos);

				// String

				writeString(this.authorized_end_date_id, dos);

				// String

				writeString(this.authorization_start_date_id, dos);

				// String

				writeString(this.authorization_end_date_id, dos);

				// String

				writeString(this.service_program, dos);

				// String

				writeString(this.service_place, dos);

				// Integer

				writeInteger(this.service_is_sum_and_round, dos);

				// Integer

				writeInteger(this.validate_to_schedules, dos);

				// Integer

				writeInteger(this.service_minimum_minutes, dos);

				// Integer

				writeInteger(this.service_units_per_hour, dos);

				// Integer

				writeInteger(this.service_max_units_total, dos);

				// Integer

				writeInteger(this.service_auth_max_units_total, dos);

				// Boolean

				if (this.auth_level_validation == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.auth_level_validation);
				}

				// Integer

				writeInteger(this.total_units_authorized, dos);

				// Float

				if (this.current_rate == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.current_rate);
				}

				// Integer

				writeInteger(this.caregiver_id, dos);

				// Integer

				writeInteger(this.inv_stg_service_date_id, dos);

				// Integer

				writeInteger(this.in_schedule_note_service_date_id, dos);

				// Integer

				writeInteger(this.note_date_of_service_id, dos);

				// Integer

				writeInteger(this.in_actual_note_service_date_id, dos);

				// java.util.Date

				writeDate(this.schedule_duration, dos);

				// Integer

				writeInteger(this.schedule_start_date_id, dos);

				// Integer

				writeInteger(this.schedule_end_date_id, dos);

				// java.util.Date

				writeDate(this.schedule_start_time, dos);

				// java.util.Date

				writeDate(this.schedule_end_time, dos);

				// Integer

				writeInteger(this.schedule_units, dos);

				// String

				writeString(this.schedule_status, dos);

				// Integer

				writeInteger(this.actual_start_date_id, dos);

				// Integer

				writeInteger(this.actual_end_date_id, dos);

				// String

				writeString(this.billing_attending_NPI, dos);

				// Boolean

				if (this.actual_imported == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_imported);
				}

				// Boolean

				if (this.actual_hold_pay == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_hold_pay);
				}

				// Boolean

				if (this.actual_hold_bill == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_hold_bill);
				}

				// Boolean

				if (this.actual_time_sheet_approved == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_time_sheet_approved);
				}

				// Boolean

				if (this.actual_note_approved_bl == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_note_approved_bl);
				}

				// Boolean

				if (this.actual_note_approved_pr == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_note_approved_pr);
				}

				// String

				writeString(this.actual_status_BL, dos);

				// String

				writeString(this.actual_emp_pay_type, dos);

				// Boolean

				if (this.ineligible_for_billing == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.ineligible_for_billing);
				}

				// Boolean

				if (this.actual_adjustment == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_adjustment);
				}

				// Integer

				writeInteger(this.actual_check_date_id, dos);

				// Integer

				writeInteger(this.actual_last_check_date_id, dos);

				// Boolean

				if (this.actual_paid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_paid);
				}

				// Boolean

				if (this.ineligible_for_payroll == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.ineligible_for_payroll);
				}

				// Integer

				writeInteger(this.actual_invoice_number, dos);

				// Boolean

				if (this.actual_billed == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_billed);
				}

				// java.util.Date

				writeDate(this.actual_start_time, dos);

				// java.util.Date

				writeDate(this.actual_end_time, dos);

				// Integer

				writeInteger(this.actual_units, dos);

				// java.util.Date

				writeDate(this.actual_duration, dos);

				// Integer

				writeInteger(this.service_billed_date_id, dos);

				// Integer

				writeInteger(this.in_process_units_batched, dos);

				// java.util.Date

				writeDate(this.note_duration, dos);

				// java.util.Date

				writeDate(this.note_end_time, dos);

				// java.util.Date

				writeDate(this.note_start_time, dos);

				// String

				writeString(this.rate_type, dos);

				// Boolean

				if (this.first_encounter == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.first_encounter);
				}

				// Integer

				writeInteger(this.units_calculated, dos);

				// Boolean

				if (this.clqnote_has_child == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.clqnote_has_child);
				}

				// Integer

				writeInteger(this.missed_shift_id, dos);

				// Integer

				writeInteger(this.missed_shift_units, dos);

				// Integer

				writeInteger(this.billed_units, dos);

				// String

				writeString(this.transaction_type, dos);

				// Integer

				writeInteger(this.transaction_date_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("client_id=" + String.valueOf(client_id));
			sb.append(",supervisor_id=" + String.valueOf(supervisor_id));
			sb.append(",client_cost_center_id=" + String.valueOf(client_cost_center_id));
			sb.append(",employee_cost_center_id=" + String.valueOf(employee_cost_center_id));
			sb.append(",employee_id=" + String.valueOf(employee_id));
			sb.append(",ar_payer_id=" + String.valueOf(ar_payer_id));
			sb.append(",department_id=" + String.valueOf(department_id));
			sb.append(",service_cost_center_id=" + String.valueOf(service_cost_center_id));
			sb.append(",site_id=" + String.valueOf(site_id));
			sb.append(",school_district_id=" + String.valueOf(school_district_id));
			sb.append(",authorization_id=" + String.valueOf(authorization_id));
			sb.append(",authorized_id=" + String.valueOf(authorized_id));
			sb.append(",service_authorization_approval=" + service_authorization_approval);
			sb.append(",service_authorization_date_id=" + service_authorization_date_id);
			sb.append(",Service_Authorization_Expired=" + Service_Authorization_Expired);
			sb.append(",service_authorization_description=" + service_authorization_description);
			sb.append(",company_name=" + company_name);
			sb.append(",service_abbreviation=" + service_abbreviation);
			sb.append(",service_code=" + service_code);
			sb.append(",authorized_start_date_id=" + authorized_start_date_id);
			sb.append(",authorized_end_date_id=" + authorized_end_date_id);
			sb.append(",authorization_start_date_id=" + authorization_start_date_id);
			sb.append(",authorization_end_date_id=" + authorization_end_date_id);
			sb.append(",service_program=" + service_program);
			sb.append(",service_place=" + service_place);
			sb.append(",service_is_sum_and_round=" + String.valueOf(service_is_sum_and_round));
			sb.append(",validate_to_schedules=" + String.valueOf(validate_to_schedules));
			sb.append(",service_minimum_minutes=" + String.valueOf(service_minimum_minutes));
			sb.append(",service_units_per_hour=" + String.valueOf(service_units_per_hour));
			sb.append(",service_max_units_total=" + String.valueOf(service_max_units_total));
			sb.append(",service_auth_max_units_total=" + String.valueOf(service_auth_max_units_total));
			sb.append(",auth_level_validation=" + String.valueOf(auth_level_validation));
			sb.append(",total_units_authorized=" + String.valueOf(total_units_authorized));
			sb.append(",current_rate=" + String.valueOf(current_rate));
			sb.append(",caregiver_id=" + String.valueOf(caregiver_id));
			sb.append(",inv_stg_service_date_id=" + String.valueOf(inv_stg_service_date_id));
			sb.append(",in_schedule_note_service_date_id=" + String.valueOf(in_schedule_note_service_date_id));
			sb.append(",note_date_of_service_id=" + String.valueOf(note_date_of_service_id));
			sb.append(",in_actual_note_service_date_id=" + String.valueOf(in_actual_note_service_date_id));
			sb.append(",schedule_duration=" + String.valueOf(schedule_duration));
			sb.append(",schedule_start_date_id=" + String.valueOf(schedule_start_date_id));
			sb.append(",schedule_end_date_id=" + String.valueOf(schedule_end_date_id));
			sb.append(",schedule_start_time=" + String.valueOf(schedule_start_time));
			sb.append(",schedule_end_time=" + String.valueOf(schedule_end_time));
			sb.append(",schedule_units=" + String.valueOf(schedule_units));
			sb.append(",schedule_status=" + schedule_status);
			sb.append(",actual_start_date_id=" + String.valueOf(actual_start_date_id));
			sb.append(",actual_end_date_id=" + String.valueOf(actual_end_date_id));
			sb.append(",billing_attending_NPI=" + billing_attending_NPI);
			sb.append(",actual_imported=" + String.valueOf(actual_imported));
			sb.append(",actual_hold_pay=" + String.valueOf(actual_hold_pay));
			sb.append(",actual_hold_bill=" + String.valueOf(actual_hold_bill));
			sb.append(",actual_time_sheet_approved=" + String.valueOf(actual_time_sheet_approved));
			sb.append(",actual_note_approved_bl=" + String.valueOf(actual_note_approved_bl));
			sb.append(",actual_note_approved_pr=" + String.valueOf(actual_note_approved_pr));
			sb.append(",actual_status_BL=" + actual_status_BL);
			sb.append(",actual_emp_pay_type=" + actual_emp_pay_type);
			sb.append(",ineligible_for_billing=" + String.valueOf(ineligible_for_billing));
			sb.append(",actual_adjustment=" + String.valueOf(actual_adjustment));
			sb.append(",actual_check_date_id=" + String.valueOf(actual_check_date_id));
			sb.append(",actual_last_check_date_id=" + String.valueOf(actual_last_check_date_id));
			sb.append(",actual_paid=" + String.valueOf(actual_paid));
			sb.append(",ineligible_for_payroll=" + String.valueOf(ineligible_for_payroll));
			sb.append(",actual_invoice_number=" + String.valueOf(actual_invoice_number));
			sb.append(",actual_billed=" + String.valueOf(actual_billed));
			sb.append(",actual_start_time=" + String.valueOf(actual_start_time));
			sb.append(",actual_end_time=" + String.valueOf(actual_end_time));
			sb.append(",actual_units=" + String.valueOf(actual_units));
			sb.append(",actual_duration=" + String.valueOf(actual_duration));
			sb.append(",service_billed_date_id=" + String.valueOf(service_billed_date_id));
			sb.append(",in_process_units_batched=" + String.valueOf(in_process_units_batched));
			sb.append(",note_duration=" + String.valueOf(note_duration));
			sb.append(",note_end_time=" + String.valueOf(note_end_time));
			sb.append(",note_start_time=" + String.valueOf(note_start_time));
			sb.append(",rate_type=" + rate_type);
			sb.append(",first_encounter=" + String.valueOf(first_encounter));
			sb.append(",units_calculated=" + String.valueOf(units_calculated));
			sb.append(",clqnote_has_child=" + String.valueOf(clqnote_has_child));
			sb.append(",missed_shift_id=" + String.valueOf(missed_shift_id));
			sb.append(",missed_shift_units=" + String.valueOf(missed_shift_units));
			sb.append(",billed_units=" + String.valueOf(billed_units));
			sb.append(",transaction_type=" + transaction_type);
			sb.append(",transaction_date_id=" + String.valueOf(transaction_date_id));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row5Struct row5 = new row5Struct();

				/**
				 * [tBigQueryOutput_4_tBQOB begin ] start
				 */

				ok_Hash.put("tBigQueryOutput_4_tBQOB", false);
				start_Hash.put("tBigQueryOutput_4_tBQOB", System.currentTimeMillis());

				currentVirtualComponent = "tBigQueryOutput_4";

				currentComponent = "tBigQueryOutput_4_tBQOB";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row5");
				}

				int tos_count_tBigQueryOutput_4_tBQOB = 0;

				int nb_line_tBigQueryOutput_4_tBQOB = 0;
				String rowSeparator_tBigQueryOutput_4_tBQOB = "\n";
				String fieldSeparator_tBigQueryOutput_4_tBQOB = ",";
				char escapeChar_tBigQueryOutput_4_tBQOB = "\\".charAt(0);
				char textEnclosure_tBigQueryOutput_4_tBQOB = "\"".charAt(0);

				escapeChar_tBigQueryOutput_4_tBQOB = textEnclosure_tBigQueryOutput_4_tBQOB;

				if (escapeChar_tBigQueryOutput_4_tBQOB == '\\') {
				} else if (escapeChar_tBigQueryOutput_4_tBQOB == textEnclosure_tBigQueryOutput_4_tBQOB) {
				} else {
					throw new RuntimeException("The escape mode only support the '\\' or double text enclosure.");
				}

				java.io.File file_tBigQueryOutput_4_tBQOB = new java.io.File(
						"/Applications/TOSDI-8.0.1/studio/workspace/inv_data.avro");

				file_tBigQueryOutput_4_tBQOB.getParentFile().mkdirs();

				com.talend.csv.CSVWriter csvWriter_tBigQueryOutput_4_tBQOB = new com.talend.csv.CSVWriter(
						new java.io.BufferedWriter(new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(file_tBigQueryOutput_4_tBQOB, false), "ISO-8859-15")));
				resourceMap.put("csvWriter_tBigQueryOutput_4_tBQOB", csvWriter_tBigQueryOutput_4_tBQOB);
				csvWriter_tBigQueryOutput_4_tBQOB.setSeparator(fieldSeparator_tBigQueryOutput_4_tBQOB.charAt(0));

				csvWriter_tBigQueryOutput_4_tBQOB.setLineEnd(rowSeparator_tBigQueryOutput_4_tBQOB);
				csvWriter_tBigQueryOutput_4_tBQOB.setEscapeChar(escapeChar_tBigQueryOutput_4_tBQOB);
				csvWriter_tBigQueryOutput_4_tBQOB.setQuoteChar(textEnclosure_tBigQueryOutput_4_tBQOB);
				csvWriter_tBigQueryOutput_4_tBQOB.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.AUTO);

				/**
				 * [tBigQueryOutput_4_tBQOB begin ] stop
				 */

				/**
				 * [tDBInput_4 begin ] start
				 */

				ok_Hash.put("tDBInput_4", false);
				start_Hash.put("tDBInput_4", System.currentTimeMillis());

				currentComponent = "tDBInput_4";

				int tos_count_tDBInput_4 = 0;

				int nb_line_tDBInput_4 = 0;
				java.sql.Connection conn_tDBInput_4 = null;
				String driverClass_tDBInput_4 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBInput_4 = java.lang.Class.forName(driverClass_tDBInput_4);
				String dbUser_tDBInput_4 = "datafusion";

				final String decryptedPassword_tDBInput_4 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:ois7BZ+XWrnl1pcbwyPI1NYucezOu/BO+C9hy2p/Gd2xCmf5XuI=");

				String dbPwd_tDBInput_4 = decryptedPassword_tDBInput_4;

				String url_tDBInput_4 = "jdbc:postgresql://" + "localhost" + ":" + "5431" + "/" + "OnTarget" + "?"
						+ "currentSchema=smallmiracle";

				conn_tDBInput_4 = java.sql.DriverManager.getConnection(url_tDBInput_4, dbUser_tDBInput_4,
						dbPwd_tDBInput_4);

				conn_tDBInput_4.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

				String dbquery_tDBInput_4 = "WITH schoolstatus AS (\nSELECT schoolyear.schooldistrictid AS schooldistrict,n.date\nFROM smallmiracle.schoolyear\nJOIN sm"
						+ "allmiracle.nonschoolday n ON schoolyear.id = n.schoolyearid\nGROUP BY schoolyear.schooldistrictid, n.date\n), base as(\nsel"
						+ "ect auth.id as Authorization_ID,authd.id as Authorized_ID,\nauth.ClientID as Client_ID,e.id as Employee_ID,dept.id as Dep"
						+ "artment_ID,cc.Id as Client_Cost_Center_ID,empCostCenter.id as Emp_Cost_Center_ID,\ncc_service.ID as Service_Cost_Center_I"
						+ "D,facility.ID as site_id,\ncase when auth.approved then 'a' else 'u' end as Service_Authorization_Approval,\nto_char(date("
						+ "auth.enddate),'YYYYMMDD') as Service_Authorization_Date_ID,\ncase when auth.EndDate<current_date then 'e' else 'u' end as"
						+ " Service_Authorization_Expired,\nauth.description as Service_Authorization_Description,\n'Abound Health, LLC' as company_n"
						+ "ame,\nBLServiceMaster.ServiceAbbreviation AS svcabbreviation,\nBLServiceMaster.ServiceCode AS svccode,\nto_char(date(authd."
						+ "startdate),'YYYYMMDD') as Authorized_Start_Date_ID,\nto_char(date(authd.enddate),'YYYYMMDD') as Authorized_End_Date_ID,\nt"
						+ "o_char(date(auth.startdate),'YYYYMMDD') as Authorization_Start_Date_ID,\nto_char(date(auth.startdate),'YYYYMMDD') as Auth"
						+ "orization_End_Date_ID,\ncoalesce(GLProgramCode.Description,'') AS Service_Program,\np.id as AR_Payer_ID,\np.OverrideNU AS P"
						+ "ayer_Override,\nBLServiceState.Eligible4Billing,\nBLServiceState.Eligible4Payroll,\nBLServiceMaster.RateType,\nauthd.BLServi"
						+ "cePayerID,\nBLServiceLocation.Code AS Service_Place,\nfn_isservicesumandround(authd.id)::int as Service_Is_Sum_And_Round,\n"
						+ "BLServiceState.validatetoschedules::int as Validate_To_Schedules,\ncoalesce(BLServiceMaster.MinimumMinutes,0) as Service_"
						+ "Minimum_Minutes,\nBLServiceMaster.UnitsPerHour as Service_Units_Per_Hour,\ncoalesce(authd.maxunitstotal,0) as Service_Max_"
						+ "Units_Total,\ncoalesce(auth.maxunitstotal,0) as Service_Auth_Max_Units_Total,\nauth.AuthLevelValidation as Auth_Level_Vali"
						+ "dation,\nCASE WHEN auth.AuthLevelValidation THEN COALESCE(auth.MaxUnitsTotal, 0) ELSE COALESCE(authd.MaxUnitsTotal, 0) en"
						+ "d as Total_Units_Authorized,\nc.schooldistrictid as school_district_id\nfrom BLServiceAuthorization auth \ninner join BLSer"
						+ "viceAuthorized authd on auth.ID=authd.blserviceauthorizationid \nINNER JOIN BLServicePayer ON authd.BLServicePayerID = BL"
						+ "ServicePayer.ID\nINNER JOIN BLServiceState ON BLServicePayer.BLStateServiceID = BLServiceState.ID\nLEFT JOIN GLProgramCode"
						+ " ON BLServiceState.GLProgramCodeID = GLProgramCode.ID\nINNER JOIN BLServiceMaster ON BLServiceState.BLServiceMasterID = B"
						+ "LServiceMaster.ID\ninner join clclient c on c.id=auth.clientid\nLEFT JOIN PREmployee e ON c.PREmployeeID = e.ID\nLEFT JOIN "
						+ "prempdemo PRD ON PRD.PREmployeeID = e.ID\nLEFT JOIN prbusdepartment dept on PRD.prbusdepartmentid = dept.id\nLEFT JOIN PRB"
						+ "usCostCenter cc ON c.PRBusCostCenterID = cc.ID\nLEFT JOIN prbuscostcenter cc_service ON authd.PRBusCostCenterID = cc_serv"
						+ "ice.ID\nleft outer join PRBusCostCenter as empCostCenter on prd.PRBusCostCenterID = empCostCenter.ID\nINNER JOIN arpayer p"
						+ " ON auth.ARPayerID = p.ID\nINNER JOIN BLServiceLocation ON authd.BLServiceLocationID = BLServiceLocation.ID\nleft outer jo"
						+ "in FCFacility as facility on authd.FCFacilityID = facility.ID  \n)\nselect coalesce(cast(base.client_id as int),-1),\ncoale"
						+ "sce(cast(base.employee_id as int),-1) as Supervisor_id,coalesce(cast(base.client_cost_center_id as int),-1) as client_co"
						+ "st_center_id,\ncoalesce(cast(base.Emp_Cost_Center_ID as int),-1) as Employee_Cost_Center_ID,coalesce(cast(base.employee_i"
						+ "d as int),-1) as employee_id,\ncoalesce(cast(base.AR_Payer_ID as int),-1) as ar_payer_id,coalesce(cast(base.department_id"
						+ " as int),-1) as department_id,\ncoalesce(cast(base.service_cost_center_id as int),-1) as service_cost_center_id,\ncoalesce"
						+ "(cast(base.site_id as int),-1) as site_id,-1 as school_district_id,\nbase.Authorization_ID,base.authorized_id,\nbase.Servi"
						+ "ce_Authorization_Approval,base.Service_Authorization_Date_ID,base.Service_Authorization_Expired,base.Service_Authorizati"
						+ "on_Description,\nbase.company_name,base.svcabbreviation as service_abbreviation,base.svccode as service_code,base.Authori"
						+ "zed_Start_Date_ID,base.Authorized_End_Date_ID,\nbase.Authorization_Start_Date_ID,base.Authorization_End_Date_ID,base.Serv"
						+ "ice_Program,base.Service_Place,base.Service_Is_Sum_And_Round,base.Validate_To_Schedules,\nbase.Service_Minimum_Minutes,ba"
						+ "se.Service_Units_Per_Hour,base.Service_Max_Units_Total,base.Service_Auth_Max_Units_Total,base.Auth_Level_Validation,base"
						+ ".total_units_authorized,\ncoalesce(fn_getcurrate(base.authorized_id),0) as current_rate,\n-1 as caregiver_id,-1 as inv_stg"
						+ "_service_date_id,-1 as in_schedule_note_service_date_id,-1 as note_date_of_service_id,\n-1 as in_actual_note_service_date"
						+ "_id,\nTO_TIMESTAMP('1900-01-01 00:00:00','YYYY-MM-DD HH24:MI:SS') as schedule_duration,-1 as schedule_start_date_id,-1 as"
						+ " schedule_end_date_id,\nTO_TIMESTAMP('1900-01-01 00:00:00','YYYY-MM-DD HH24:MI:SS') schedule_start_time, TO_TIMESTAMP('19"
						+ "00-01-01 00:00:00','YYYY-MM-DD HH24:MI:SS') as schedule_end_time,0 as schedule_units,cast('' as varchar(10)) AS schedule"
						+ "_status,\n-1 as actual_start_date_id,-1 as actual_end_date_id, cast('' as varchar(100)) as billing_attending_NPI,\nfalse a"
						+ "s actual_imported,false as actual_hold_pay,false as actual_hold_bill,false as actual_time_sheet_Approved,\nfalse as actua"
						+ "l_note_approved_bl,false as actual_note_approved_pr,\ncast('' as varchar(10)) as actual_status_BL,\ncast('' as varchar(10)"
						+ ") as actual_emp_pay_type,\nfalse as ineligible_For_Billing,\nfalse as actual_adjustment,-1 as actual_check_Date_ID,\n-1 as "
						+ "actual_last_Check_Date_id,false as actual_paid,\nfalse as ineligible_For_Payroll,\ncoalesce(invoice.InvoiceNumber,-1) as a"
						+ "ctual_invoice_Number,false as actual_billed,TO_TIMESTAMP('1900-01-01 00:00:00','YYYY-MM-DD HH24:MI:SS') as actual_start_"
						+ "time, TO_TIMESTAMP('1900-01-01 00:00:00','YYYY-MM-DD HH24:MI:SS') as actual_end_time,\ncast(0 as int) as actual_units,\nTO"
						+ "_TIMESTAMP('1900-01-01 00:00:00','YYYY-MM-DD HH24:MI:SS') as actual_duration,\ncoalesce(cast(to_char(date(invline.service"
						+ "date),'YYYYMMDD') as int),-1) as service_billed_date_id,0 as in_process_units_batched,\nTO_TIMESTAMP('1900-01-01 00:00:00"
						+ "','YYYY-MM-DD HH24:MI:SS') as note_duration,\nTO_TIMESTAMP('1900-01-01 00:00:00','YYYY-MM-DD HH24:MI:SS') as note_end_tim"
						+ "e,\nTO_TIMESTAMP('1900-01-01 00:00:00','YYYY-MM-DD HH24:MI:SS') as note_start_time,\nbase.ratetype as rate_type,\nfalse as "
						+ "first_encounter,\n0 as units_calculated,\nfalse is not null as clqnote_has_child,\n-1 as missed_shift_ID,\n0 as missed_shift"
						+ "_units,\ncoalesce(invline.quantity,0) as billed_units,\ncast('I' as varchar(1)) as transaction_type,\ncoalesce(cast(to_char"
						+ "(date(invline.servicedate),'YYYYMMDD') as int),-1) as transaction_date_id\nfrom base\nleft join blinvoiceline invline on i"
						+ "nvline.blserviceauthorizedid =base.authorized_id\nleft join blinvoice invoice on invoice.id=invline.blinvoiceid\nwhere bas"
						+ "e.Authorized_id in " + context.ServiceID;

				globalMap.put("tDBInput_4_QUERY", dbquery_tDBInput_4);
				java.sql.ResultSet rs_tDBInput_4 = null;

				try {
					rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
					java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
					int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

					String tmpContent_tDBInput_4 = null;

					while (rs_tDBInput_4.next()) {
						nb_line_tDBInput_4++;

						if (colQtyInRs_tDBInput_4 < 1) {
							row5.client_id = null;
						} else {

							row5.client_id = rs_tDBInput_4.getInt(1);
							if (rs_tDBInput_4.wasNull()) {
								row5.client_id = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 2) {
							row5.supervisor_id = null;
						} else {

							row5.supervisor_id = rs_tDBInput_4.getInt(2);
							if (rs_tDBInput_4.wasNull()) {
								row5.supervisor_id = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 3) {
							row5.client_cost_center_id = null;
						} else {

							row5.client_cost_center_id = rs_tDBInput_4.getInt(3);
							if (rs_tDBInput_4.wasNull()) {
								row5.client_cost_center_id = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 4) {
							row5.employee_cost_center_id = null;
						} else {

							row5.employee_cost_center_id = rs_tDBInput_4.getInt(4);
							if (rs_tDBInput_4.wasNull()) {
								row5.employee_cost_center_id = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 5) {
							row5.employee_id = null;
						} else {

							row5.employee_id = rs_tDBInput_4.getInt(5);
							if (rs_tDBInput_4.wasNull()) {
								row5.employee_id = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 6) {
							row5.ar_payer_id = null;
						} else {

							row5.ar_payer_id = rs_tDBInput_4.getInt(6);
							if (rs_tDBInput_4.wasNull()) {
								row5.ar_payer_id = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 7) {
							row5.department_id = null;
						} else {

							row5.department_id = rs_tDBInput_4.getInt(7);
							if (rs_tDBInput_4.wasNull()) {
								row5.department_id = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 8) {
							row5.service_cost_center_id = null;
						} else {

							row5.service_cost_center_id = rs_tDBInput_4.getInt(8);
							if (rs_tDBInput_4.wasNull()) {
								row5.service_cost_center_id = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 9) {
							row5.site_id = null;
						} else {

							row5.site_id = rs_tDBInput_4.getInt(9);
							if (rs_tDBInput_4.wasNull()) {
								row5.site_id = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 10) {
							row5.school_district_id = null;
						} else {

							row5.school_district_id = rs_tDBInput_4.getInt(10);
							if (rs_tDBInput_4.wasNull()) {
								row5.school_district_id = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 11) {
							row5.authorization_id = null;
						} else {

							row5.authorization_id = rs_tDBInput_4.getInt(11);
							if (rs_tDBInput_4.wasNull()) {
								row5.authorization_id = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 12) {
							row5.authorized_id = null;
						} else {

							row5.authorized_id = rs_tDBInput_4.getInt(12);
							if (rs_tDBInput_4.wasNull()) {
								row5.authorized_id = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 13) {
							row5.service_authorization_approval = null;
						} else {

							row5.service_authorization_approval = routines.system.JDBCUtil.getString(rs_tDBInput_4, 13,
									false);
						}
						if (colQtyInRs_tDBInput_4 < 14) {
							row5.service_authorization_date_id = null;
						} else {

							row5.service_authorization_date_id = routines.system.JDBCUtil.getString(rs_tDBInput_4, 14,
									false);
						}
						if (colQtyInRs_tDBInput_4 < 15) {
							row5.Service_Authorization_Expired = null;
						} else {

							row5.Service_Authorization_Expired = routines.system.JDBCUtil.getString(rs_tDBInput_4, 15,
									false);
						}
						if (colQtyInRs_tDBInput_4 < 16) {
							row5.service_authorization_description = null;
						} else {

							row5.service_authorization_description = routines.system.JDBCUtil.getString(rs_tDBInput_4,
									16, false);
						}
						if (colQtyInRs_tDBInput_4 < 17) {
							row5.company_name = null;
						} else {

							row5.company_name = routines.system.JDBCUtil.getString(rs_tDBInput_4, 17, false);
						}
						if (colQtyInRs_tDBInput_4 < 18) {
							row5.service_abbreviation = null;
						} else {

							row5.service_abbreviation = routines.system.JDBCUtil.getString(rs_tDBInput_4, 18, false);
						}
						if (colQtyInRs_tDBInput_4 < 19) {
							row5.service_code = null;
						} else {

							row5.service_code = routines.system.JDBCUtil.getString(rs_tDBInput_4, 19, false);
						}
						if (colQtyInRs_tDBInput_4 < 20) {
							row5.authorized_start_date_id = null;
						} else {

							row5.authorized_start_date_id = routines.system.JDBCUtil.getString(rs_tDBInput_4, 20,
									false);
						}
						if (colQtyInRs_tDBInput_4 < 21) {
							row5.authorized_end_date_id = null;
						} else {

							row5.authorized_end_date_id = routines.system.JDBCUtil.getString(rs_tDBInput_4, 21, false);
						}
						if (colQtyInRs_tDBInput_4 < 22) {
							row5.authorization_start_date_id = null;
						} else {

							row5.authorization_start_date_id = routines.system.JDBCUtil.getString(rs_tDBInput_4, 22,
									false);
						}
						if (colQtyInRs_tDBInput_4 < 23) {
							row5.authorization_end_date_id = null;
						} else {

							row5.authorization_end_date_id = routines.system.JDBCUtil.getString(rs_tDBInput_4, 23,
									false);
						}
						if (colQtyInRs_tDBInput_4 < 24) {
							row5.service_program = null;
						} else {

							row5.service_program = routines.system.JDBCUtil.getString(rs_tDBInput_4, 24, false);
						}
						if (colQtyInRs_tDBInput_4 < 25) {
							row5.service_place = null;
						} else {

							row5.service_place = routines.system.JDBCUtil.getString(rs_tDBInput_4, 25, false);
						}
						if (colQtyInRs_tDBInput_4 < 26) {
							row5.service_is_sum_and_round = null;
						} else {

							row5.service_is_sum_and_round = rs_tDBInput_4.getInt(26);
							if (rs_tDBInput_4.wasNull()) {
								row5.service_is_sum_and_round = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 27) {
							row5.validate_to_schedules = null;
						} else {

							row5.validate_to_schedules = rs_tDBInput_4.getInt(27);
							if (rs_tDBInput_4.wasNull()) {
								row5.validate_to_schedules = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 28) {
							row5.service_minimum_minutes = null;
						} else {

							row5.service_minimum_minutes = rs_tDBInput_4.getInt(28);
							if (rs_tDBInput_4.wasNull()) {
								row5.service_minimum_minutes = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 29) {
							row5.service_units_per_hour = null;
						} else {

							row5.service_units_per_hour = rs_tDBInput_4.getInt(29);
							if (rs_tDBInput_4.wasNull()) {
								row5.service_units_per_hour = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 30) {
							row5.service_max_units_total = null;
						} else {

							row5.service_max_units_total = rs_tDBInput_4.getInt(30);
							if (rs_tDBInput_4.wasNull()) {
								row5.service_max_units_total = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 31) {
							row5.service_auth_max_units_total = null;
						} else {

							row5.service_auth_max_units_total = rs_tDBInput_4.getInt(31);
							if (rs_tDBInput_4.wasNull()) {
								row5.service_auth_max_units_total = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 32) {
							row5.auth_level_validation = null;
						} else {

							row5.auth_level_validation = rs_tDBInput_4.getBoolean(32);
							if (rs_tDBInput_4.wasNull()) {
								row5.auth_level_validation = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 33) {
							row5.total_units_authorized = null;
						} else {

							row5.total_units_authorized = rs_tDBInput_4.getInt(33);
							if (rs_tDBInput_4.wasNull()) {
								row5.total_units_authorized = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 34) {
							row5.current_rate = null;
						} else {

							row5.current_rate = rs_tDBInput_4.getFloat(34);
							if (rs_tDBInput_4.wasNull()) {
								row5.current_rate = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 35) {
							row5.caregiver_id = null;
						} else {

							row5.caregiver_id = rs_tDBInput_4.getInt(35);
							if (rs_tDBInput_4.wasNull()) {
								row5.caregiver_id = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 36) {
							row5.inv_stg_service_date_id = null;
						} else {

							row5.inv_stg_service_date_id = rs_tDBInput_4.getInt(36);
							if (rs_tDBInput_4.wasNull()) {
								row5.inv_stg_service_date_id = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 37) {
							row5.in_schedule_note_service_date_id = null;
						} else {

							row5.in_schedule_note_service_date_id = rs_tDBInput_4.getInt(37);
							if (rs_tDBInput_4.wasNull()) {
								row5.in_schedule_note_service_date_id = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 38) {
							row5.note_date_of_service_id = null;
						} else {

							row5.note_date_of_service_id = rs_tDBInput_4.getInt(38);
							if (rs_tDBInput_4.wasNull()) {
								row5.note_date_of_service_id = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 39) {
							row5.in_actual_note_service_date_id = null;
						} else {

							row5.in_actual_note_service_date_id = rs_tDBInput_4.getInt(39);
							if (rs_tDBInput_4.wasNull()) {
								row5.in_actual_note_service_date_id = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 40) {
							row5.schedule_duration = null;
						} else {

							row5.schedule_duration = routines.system.JDBCUtil.getDate(rs_tDBInput_4, 40);
						}
						if (colQtyInRs_tDBInput_4 < 41) {
							row5.schedule_start_date_id = null;
						} else {

							row5.schedule_start_date_id = rs_tDBInput_4.getInt(41);
							if (rs_tDBInput_4.wasNull()) {
								row5.schedule_start_date_id = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 42) {
							row5.schedule_end_date_id = null;
						} else {

							row5.schedule_end_date_id = rs_tDBInput_4.getInt(42);
							if (rs_tDBInput_4.wasNull()) {
								row5.schedule_end_date_id = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 43) {
							row5.schedule_start_time = null;
						} else {

							row5.schedule_start_time = routines.system.JDBCUtil.getDate(rs_tDBInput_4, 43);
						}
						if (colQtyInRs_tDBInput_4 < 44) {
							row5.schedule_end_time = null;
						} else {

							row5.schedule_end_time = routines.system.JDBCUtil.getDate(rs_tDBInput_4, 44);
						}
						if (colQtyInRs_tDBInput_4 < 45) {
							row5.schedule_units = null;
						} else {

							row5.schedule_units = rs_tDBInput_4.getInt(45);
							if (rs_tDBInput_4.wasNull()) {
								row5.schedule_units = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 46) {
							row5.schedule_status = null;
						} else {

							row5.schedule_status = routines.system.JDBCUtil.getString(rs_tDBInput_4, 46, false);
						}
						if (colQtyInRs_tDBInput_4 < 47) {
							row5.actual_start_date_id = null;
						} else {

							row5.actual_start_date_id = rs_tDBInput_4.getInt(47);
							if (rs_tDBInput_4.wasNull()) {
								row5.actual_start_date_id = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 48) {
							row5.actual_end_date_id = null;
						} else {

							row5.actual_end_date_id = rs_tDBInput_4.getInt(48);
							if (rs_tDBInput_4.wasNull()) {
								row5.actual_end_date_id = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 49) {
							row5.billing_attending_NPI = null;
						} else {

							row5.billing_attending_NPI = routines.system.JDBCUtil.getString(rs_tDBInput_4, 49, false);
						}
						if (colQtyInRs_tDBInput_4 < 50) {
							row5.actual_imported = null;
						} else {

							row5.actual_imported = rs_tDBInput_4.getBoolean(50);
							if (rs_tDBInput_4.wasNull()) {
								row5.actual_imported = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 51) {
							row5.actual_hold_pay = null;
						} else {

							row5.actual_hold_pay = rs_tDBInput_4.getBoolean(51);
							if (rs_tDBInput_4.wasNull()) {
								row5.actual_hold_pay = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 52) {
							row5.actual_hold_bill = null;
						} else {

							row5.actual_hold_bill = rs_tDBInput_4.getBoolean(52);
							if (rs_tDBInput_4.wasNull()) {
								row5.actual_hold_bill = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 53) {
							row5.actual_time_sheet_approved = null;
						} else {

							row5.actual_time_sheet_approved = rs_tDBInput_4.getBoolean(53);
							if (rs_tDBInput_4.wasNull()) {
								row5.actual_time_sheet_approved = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 54) {
							row5.actual_note_approved_bl = null;
						} else {

							row5.actual_note_approved_bl = rs_tDBInput_4.getBoolean(54);
							if (rs_tDBInput_4.wasNull()) {
								row5.actual_note_approved_bl = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 55) {
							row5.actual_note_approved_pr = null;
						} else {

							row5.actual_note_approved_pr = rs_tDBInput_4.getBoolean(55);
							if (rs_tDBInput_4.wasNull()) {
								row5.actual_note_approved_pr = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 56) {
							row5.actual_status_BL = null;
						} else {

							row5.actual_status_BL = routines.system.JDBCUtil.getString(rs_tDBInput_4, 56, false);
						}
						if (colQtyInRs_tDBInput_4 < 57) {
							row5.actual_emp_pay_type = null;
						} else {

							row5.actual_emp_pay_type = routines.system.JDBCUtil.getString(rs_tDBInput_4, 57, false);
						}
						if (colQtyInRs_tDBInput_4 < 58) {
							row5.ineligible_for_billing = null;
						} else {

							row5.ineligible_for_billing = rs_tDBInput_4.getBoolean(58);
							if (rs_tDBInput_4.wasNull()) {
								row5.ineligible_for_billing = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 59) {
							row5.actual_adjustment = null;
						} else {

							row5.actual_adjustment = rs_tDBInput_4.getBoolean(59);
							if (rs_tDBInput_4.wasNull()) {
								row5.actual_adjustment = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 60) {
							row5.actual_check_date_id = null;
						} else {

							row5.actual_check_date_id = rs_tDBInput_4.getInt(60);
							if (rs_tDBInput_4.wasNull()) {
								row5.actual_check_date_id = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 61) {
							row5.actual_last_check_date_id = null;
						} else {

							row5.actual_last_check_date_id = rs_tDBInput_4.getInt(61);
							if (rs_tDBInput_4.wasNull()) {
								row5.actual_last_check_date_id = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 62) {
							row5.actual_paid = null;
						} else {

							row5.actual_paid = rs_tDBInput_4.getBoolean(62);
							if (rs_tDBInput_4.wasNull()) {
								row5.actual_paid = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 63) {
							row5.ineligible_for_payroll = null;
						} else {

							row5.ineligible_for_payroll = rs_tDBInput_4.getBoolean(63);
							if (rs_tDBInput_4.wasNull()) {
								row5.ineligible_for_payroll = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 64) {
							row5.actual_invoice_number = null;
						} else {

							row5.actual_invoice_number = rs_tDBInput_4.getInt(64);
							if (rs_tDBInput_4.wasNull()) {
								row5.actual_invoice_number = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 65) {
							row5.actual_billed = null;
						} else {

							row5.actual_billed = rs_tDBInput_4.getBoolean(65);
							if (rs_tDBInput_4.wasNull()) {
								row5.actual_billed = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 66) {
							row5.actual_start_time = null;
						} else {

							row5.actual_start_time = routines.system.JDBCUtil.getDate(rs_tDBInput_4, 66);
						}
						if (colQtyInRs_tDBInput_4 < 67) {
							row5.actual_end_time = null;
						} else {

							row5.actual_end_time = routines.system.JDBCUtil.getDate(rs_tDBInput_4, 67);
						}
						if (colQtyInRs_tDBInput_4 < 68) {
							row5.actual_units = null;
						} else {

							row5.actual_units = rs_tDBInput_4.getInt(68);
							if (rs_tDBInput_4.wasNull()) {
								row5.actual_units = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 69) {
							row5.actual_duration = null;
						} else {

							row5.actual_duration = routines.system.JDBCUtil.getDate(rs_tDBInput_4, 69);
						}
						if (colQtyInRs_tDBInput_4 < 70) {
							row5.service_billed_date_id = null;
						} else {

							row5.service_billed_date_id = rs_tDBInput_4.getInt(70);
							if (rs_tDBInput_4.wasNull()) {
								row5.service_billed_date_id = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 71) {
							row5.in_process_units_batched = null;
						} else {

							row5.in_process_units_batched = rs_tDBInput_4.getInt(71);
							if (rs_tDBInput_4.wasNull()) {
								row5.in_process_units_batched = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 72) {
							row5.note_duration = null;
						} else {

							row5.note_duration = routines.system.JDBCUtil.getDate(rs_tDBInput_4, 72);
						}
						if (colQtyInRs_tDBInput_4 < 73) {
							row5.note_end_time = null;
						} else {

							row5.note_end_time = routines.system.JDBCUtil.getDate(rs_tDBInput_4, 73);
						}
						if (colQtyInRs_tDBInput_4 < 74) {
							row5.note_start_time = null;
						} else {

							row5.note_start_time = routines.system.JDBCUtil.getDate(rs_tDBInput_4, 74);
						}
						if (colQtyInRs_tDBInput_4 < 75) {
							row5.rate_type = null;
						} else {

							row5.rate_type = routines.system.JDBCUtil.getString(rs_tDBInput_4, 75, false);
						}
						if (colQtyInRs_tDBInput_4 < 76) {
							row5.first_encounter = null;
						} else {

							row5.first_encounter = rs_tDBInput_4.getBoolean(76);
							if (rs_tDBInput_4.wasNull()) {
								row5.first_encounter = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 77) {
							row5.units_calculated = null;
						} else {

							row5.units_calculated = rs_tDBInput_4.getInt(77);
							if (rs_tDBInput_4.wasNull()) {
								row5.units_calculated = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 78) {
							row5.clqnote_has_child = null;
						} else {

							row5.clqnote_has_child = rs_tDBInput_4.getBoolean(78);
							if (rs_tDBInput_4.wasNull()) {
								row5.clqnote_has_child = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 79) {
							row5.missed_shift_id = null;
						} else {

							row5.missed_shift_id = rs_tDBInput_4.getInt(79);
							if (rs_tDBInput_4.wasNull()) {
								row5.missed_shift_id = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 80) {
							row5.missed_shift_units = null;
						} else {

							row5.missed_shift_units = rs_tDBInput_4.getInt(80);
							if (rs_tDBInput_4.wasNull()) {
								row5.missed_shift_units = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 81) {
							row5.billed_units = null;
						} else {

							row5.billed_units = rs_tDBInput_4.getInt(81);
							if (rs_tDBInput_4.wasNull()) {
								row5.billed_units = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 82) {
							row5.transaction_type = null;
						} else {

							row5.transaction_type = routines.system.JDBCUtil.getString(rs_tDBInput_4, 82, false);
						}
						if (colQtyInRs_tDBInput_4 < 83) {
							row5.transaction_date_id = null;
						} else {

							row5.transaction_date_id = rs_tDBInput_4.getInt(83);
							if (rs_tDBInput_4.wasNull()) {
								row5.transaction_date_id = null;
							}
						}

						/**
						 * [tDBInput_4 begin ] stop
						 */

						/**
						 * [tDBInput_4 main ] start
						 */

						currentComponent = "tDBInput_4";

						tos_count_tDBInput_4++;

						/**
						 * [tDBInput_4 main ] stop
						 */

						/**
						 * [tDBInput_4 process_data_begin ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_begin ] stop
						 */

						/**
						 * [tBigQueryOutput_4_tBQOB main ] start
						 */

						currentVirtualComponent = "tBigQueryOutput_4";

						currentComponent = "tBigQueryOutput_4_tBQOB";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row5"

							);
						}

						String[] row_tBigQueryOutput_4_tBQOB = new String[83];
						java.util.Arrays.fill(row_tBigQueryOutput_4_tBQOB, "\\N");

						int curColumnIndex_tBigQueryOutput_4_tBQOB = 0;

						curColumnIndex_tBigQueryOutput_4_tBQOB = 0;

						if (row5.client_id != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = String
									.valueOf(row5.client_id);

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 1;

						if (row5.supervisor_id != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = String
									.valueOf(row5.supervisor_id);

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 2;

						if (row5.client_cost_center_id != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = String
									.valueOf(row5.client_cost_center_id);

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 3;

						if (row5.employee_cost_center_id != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = String
									.valueOf(row5.employee_cost_center_id);

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 4;

						if (row5.employee_id != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = String
									.valueOf(row5.employee_id);

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 5;

						if (row5.ar_payer_id != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = String
									.valueOf(row5.ar_payer_id);

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 6;

						if (row5.department_id != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = String
									.valueOf(row5.department_id);

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 7;

						if (row5.service_cost_center_id != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = String
									.valueOf(row5.service_cost_center_id);

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 8;

						if (row5.site_id != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = String
									.valueOf(row5.site_id);

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 9;

						if (row5.school_district_id != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = String
									.valueOf(row5.school_district_id);

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 10;

						if (row5.authorization_id != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = String
									.valueOf(row5.authorization_id);

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 11;

						if (row5.authorized_id != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = String
									.valueOf(row5.authorized_id);

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 12;

						if (row5.service_authorization_approval != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = row5.service_authorization_approval;

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 13;

						if (row5.service_authorization_date_id != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = row5.service_authorization_date_id;

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 14;

						if (row5.Service_Authorization_Expired != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = row5.Service_Authorization_Expired;

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 15;

						if (row5.service_authorization_description != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = row5.service_authorization_description;

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 16;

						if (row5.company_name != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = row5.company_name;

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 17;

						if (row5.service_abbreviation != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = row5.service_abbreviation;

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 18;

						if (row5.service_code != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = row5.service_code;

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 19;

						if (row5.authorized_start_date_id != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = row5.authorized_start_date_id;

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 20;

						if (row5.authorized_end_date_id != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = row5.authorized_end_date_id;

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 21;

						if (row5.authorization_start_date_id != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = row5.authorization_start_date_id;

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 22;

						if (row5.authorization_end_date_id != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = row5.authorization_end_date_id;

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 23;

						if (row5.service_program != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = row5.service_program;

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 24;

						if (row5.service_place != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = row5.service_place;

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 25;

						if (row5.service_is_sum_and_round != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = String
									.valueOf(row5.service_is_sum_and_round);

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 26;

						if (row5.validate_to_schedules != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = String
									.valueOf(row5.validate_to_schedules);

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 27;

						if (row5.service_minimum_minutes != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = String
									.valueOf(row5.service_minimum_minutes);

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 28;

						if (row5.service_units_per_hour != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = String
									.valueOf(row5.service_units_per_hour);

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 29;

						if (row5.service_max_units_total != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = String
									.valueOf(row5.service_max_units_total);

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 30;

						if (row5.service_auth_max_units_total != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = String
									.valueOf(row5.service_auth_max_units_total);

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 31;

						if (row5.auth_level_validation != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = String
									.valueOf(true == row5.auth_level_validation ? "1" : "0");

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 32;

						if (row5.total_units_authorized != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = String
									.valueOf(row5.total_units_authorized);

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 33;

						if (row5.current_rate != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = String
									.valueOf(row5.current_rate);

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 34;

						if (row5.caregiver_id != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = String
									.valueOf(row5.caregiver_id);

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 35;

						if (row5.inv_stg_service_date_id != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = String
									.valueOf(row5.inv_stg_service_date_id);

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 36;

						if (row5.in_schedule_note_service_date_id != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = String
									.valueOf(row5.in_schedule_note_service_date_id);

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 37;

						if (row5.note_date_of_service_id != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = String
									.valueOf(row5.note_date_of_service_id);

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 38;

						if (row5.in_actual_note_service_date_id != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = String
									.valueOf(row5.in_actual_note_service_date_id);

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 39;

						if (row5.schedule_duration != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = FormatterUtils
									.format_Date(row5.schedule_duration, "yyyy-MM-dd HH:mm:ss");

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 40;

						if (row5.schedule_start_date_id != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = String
									.valueOf(row5.schedule_start_date_id);

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 41;

						if (row5.schedule_end_date_id != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = String
									.valueOf(row5.schedule_end_date_id);

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 42;

						if (row5.schedule_start_time != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = FormatterUtils
									.format_Date(row5.schedule_start_time, "yyyy-MM-dd HH:mm:ss");

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 43;

						if (row5.schedule_end_time != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = FormatterUtils
									.format_Date(row5.schedule_end_time, "yyyy-MM-dd HH:mm:ss");

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 44;

						if (row5.schedule_units != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = String
									.valueOf(row5.schedule_units);

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 45;

						if (row5.schedule_status != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = row5.schedule_status;

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 46;

						if (row5.actual_start_date_id != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = String
									.valueOf(row5.actual_start_date_id);

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 47;

						if (row5.actual_end_date_id != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = String
									.valueOf(row5.actual_end_date_id);

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 48;

						if (row5.billing_attending_NPI != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = row5.billing_attending_NPI;

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 49;

						if (row5.actual_imported != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = String
									.valueOf(true == row5.actual_imported ? "1" : "0");

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 50;

						if (row5.actual_hold_pay != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = String
									.valueOf(true == row5.actual_hold_pay ? "1" : "0");

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 51;

						if (row5.actual_hold_bill != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = String
									.valueOf(true == row5.actual_hold_bill ? "1" : "0");

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 52;

						if (row5.actual_time_sheet_approved != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = String
									.valueOf(true == row5.actual_time_sheet_approved ? "1" : "0");

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 53;

						if (row5.actual_note_approved_bl != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = String
									.valueOf(true == row5.actual_note_approved_bl ? "1" : "0");

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 54;

						if (row5.actual_note_approved_pr != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = String
									.valueOf(true == row5.actual_note_approved_pr ? "1" : "0");

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 55;

						if (row5.actual_status_BL != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = row5.actual_status_BL;

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 56;

						if (row5.actual_emp_pay_type != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = row5.actual_emp_pay_type;

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 57;

						if (row5.ineligible_for_billing != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = String
									.valueOf(true == row5.ineligible_for_billing ? "1" : "0");

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 58;

						if (row5.actual_adjustment != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = String
									.valueOf(true == row5.actual_adjustment ? "1" : "0");

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 59;

						if (row5.actual_check_date_id != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = String
									.valueOf(row5.actual_check_date_id);

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 60;

						if (row5.actual_last_check_date_id != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = String
									.valueOf(row5.actual_last_check_date_id);

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 61;

						if (row5.actual_paid != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = String
									.valueOf(true == row5.actual_paid ? "1" : "0");

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 62;

						if (row5.ineligible_for_payroll != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = String
									.valueOf(true == row5.ineligible_for_payroll ? "1" : "0");

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 63;

						if (row5.actual_invoice_number != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = String
									.valueOf(row5.actual_invoice_number);

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 64;

						if (row5.actual_billed != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = String
									.valueOf(true == row5.actual_billed ? "1" : "0");

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 65;

						if (row5.actual_start_time != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = FormatterUtils
									.format_Date(row5.actual_start_time, "yyyy-MM-dd HH:mm:ss");

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 66;

						if (row5.actual_end_time != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = FormatterUtils
									.format_Date(row5.actual_end_time, "yyyy-MM-dd HH:mm:ss");

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 67;

						if (row5.actual_units != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = String
									.valueOf(row5.actual_units);

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 68;

						if (row5.actual_duration != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = FormatterUtils
									.format_Date(row5.actual_duration, "yyyy-MM-dd HH:mm:ss");

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 69;

						if (row5.service_billed_date_id != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = String
									.valueOf(row5.service_billed_date_id);

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 70;

						if (row5.in_process_units_batched != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = String
									.valueOf(row5.in_process_units_batched);

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 71;

						if (row5.note_duration != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = FormatterUtils
									.format_Date(row5.note_duration, "yyyy-MM-dd HH:mm:ss");

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 72;

						if (row5.note_end_time != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = FormatterUtils
									.format_Date(row5.note_end_time, "yyyy-MM-dd HH:mm:ss");

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 73;

						if (row5.note_start_time != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = FormatterUtils
									.format_Date(row5.note_start_time, "yyyy-MM-dd HH:mm:ss");

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 74;

						if (row5.rate_type != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = row5.rate_type;

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 75;

						if (row5.first_encounter != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = String
									.valueOf(true == row5.first_encounter ? "1" : "0");

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 76;

						if (row5.units_calculated != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = String
									.valueOf(row5.units_calculated);

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 77;

						if (row5.clqnote_has_child != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = String
									.valueOf(true == row5.clqnote_has_child ? "1" : "0");

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 78;

						if (row5.missed_shift_id != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = String
									.valueOf(row5.missed_shift_id);

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 79;

						if (row5.missed_shift_units != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = String
									.valueOf(row5.missed_shift_units);

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 80;

						if (row5.billed_units != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = String
									.valueOf(row5.billed_units);

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 81;

						if (row5.transaction_type != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = row5.transaction_type;

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 82;

						if (row5.transaction_date_id != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = String
									.valueOf(row5.transaction_date_id);

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						csvWriter_tBigQueryOutput_4_tBQOB.writeNextEnhance(row_tBigQueryOutput_4_tBQOB, "");
						nb_line_tBigQueryOutput_4_tBQOB++;

						tos_count_tBigQueryOutput_4_tBQOB++;

						/**
						 * [tBigQueryOutput_4_tBQOB main ] stop
						 */

						/**
						 * [tBigQueryOutput_4_tBQOB process_data_begin ] start
						 */

						currentVirtualComponent = "tBigQueryOutput_4";

						currentComponent = "tBigQueryOutput_4_tBQOB";

						/**
						 * [tBigQueryOutput_4_tBQOB process_data_begin ] stop
						 */

						/**
						 * [tBigQueryOutput_4_tBQOB process_data_end ] start
						 */

						currentVirtualComponent = "tBigQueryOutput_4";

						currentComponent = "tBigQueryOutput_4_tBQOB";

						/**
						 * [tBigQueryOutput_4_tBQOB process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 process_data_end ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 end ] start
						 */

						currentComponent = "tDBInput_4";

					}
				} finally {
					if (rs_tDBInput_4 != null) {
						rs_tDBInput_4.close();
					}
					if (stmt_tDBInput_4 != null) {
						stmt_tDBInput_4.close();
					}
					if (conn_tDBInput_4 != null && !conn_tDBInput_4.isClosed()) {

						conn_tDBInput_4.commit();

						conn_tDBInput_4.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}
				globalMap.put("tDBInput_4_NB_LINE", nb_line_tDBInput_4);

				ok_Hash.put("tDBInput_4", true);
				end_Hash.put("tDBInput_4", System.currentTimeMillis());

				/**
				 * [tDBInput_4 end ] stop
				 */

				/**
				 * [tBigQueryOutput_4_tBQOB end ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_4";

				currentComponent = "tBigQueryOutput_4_tBQOB";

				if (csvWriter_tBigQueryOutput_4_tBQOB != null) {
					csvWriter_tBigQueryOutput_4_tBQOB.close();
				}
				resourceMap.put("finish_tBigQueryOutput_4_tBQOB", true);
				globalMap.put("tBigQueryOutput_4_tBQOB_NB_LINE", nb_line_tBigQueryOutput_4_tBQOB);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row5");
				}

				ok_Hash.put("tBigQueryOutput_4_tBQOB", true);
				end_Hash.put("tBigQueryOutput_4_tBQOB", System.currentTimeMillis());

				/**
				 * [tBigQueryOutput_4_tBQOB end ] stop
				 */

				/**
				 * [tBigQueryOutput_4_tBQBE begin ] start
				 */

				ok_Hash.put("tBigQueryOutput_4_tBQBE", false);
				start_Hash.put("tBigQueryOutput_4_tBQBE", System.currentTimeMillis());

				currentVirtualComponent = "tBigQueryOutput_4";

				currentComponent = "tBigQueryOutput_4_tBQBE";

				int tos_count_tBigQueryOutput_4_tBQBE = 0;

				/* ----START-CREATING-CLIENT (Cloud API)---- */

				com.google.auth.oauth2.GoogleCredentials credentials_tBigQueryOutput_4;
				java.io.File credentialsFile_tBigQueryOutput_4 = new java.io.File(
						"/Users/jsun/Documents/WCIWork/OnTarget/code/otmirror-060322-9471bb896012.json");
				try (java.io.FileInputStream credentialsStream_tBigQueryOutput_4 = new java.io.FileInputStream(
						credentialsFile_tBigQueryOutput_4)) {
					credentials_tBigQueryOutput_4 = com.google.auth.oauth2.ServiceAccountCredentials
							.fromStream(credentialsStream_tBigQueryOutput_4);
				}

				com.google.cloud.bigquery.BigQuery bigquery_tBigQueryOutput_4 = com.google.cloud.bigquery.BigQueryOptions
						.newBuilder().setCredentials(credentials_tBigQueryOutput_4).setProjectId("otmirror-060322")
						.build().getService();

				/* ----END-CREATING-CLIENT (Cloud API)---- */

				long nb_line_tBigQueryOutput_4 = 0;

				com.google.auth.Credentials credential_tBigQueryOutput_4 = null;
				try {
					credential_tBigQueryOutput_4 = com.google.auth.oauth2.GoogleCredentials
							.fromStream(new java.io.FileInputStream(
									"/Users/jsun/Documents/WCIWork/OnTarget/code/otmirror-060322-9471bb896012.json"));
				} catch (IOException e_tBigQueryOutput_4) {
					globalMap.put("tBigQueryOutput_4_ERROR_MESSAGE", e_tBigQueryOutput_4.getMessage());
				}
				com.google.cloud.storage.Storage storage_tBigQueryOutput_4 = com.google.cloud.storage.StorageOptions
						.newBuilder().setCredentials(credential_tBigQueryOutput_4).build().getService();

				java.io.File file_tBigQueryOutput_4 = new java.io.File(
						"/Applications/TOSDI-8.0.1/studio/workspace/inv_data.avro");

				com.google.cloud.storage.BlobInfo blobInfo_tBigQueryOutput_4 = com.google.cloud.storage.BlobInfo
						.newBuilder("dw-tmp", file_tBigQueryOutput_4.getName()).build();
				storage_tBigQueryOutput_4.create(blobInfo_tBigQueryOutput_4,
						java.nio.file.Files.readAllBytes(file_tBigQueryOutput_4.toPath()));

				/* ----END-UPLOADING-FILE---- */

				/* ----START-CREATING-JOB (Cloud API)---- */
				com.google.cloud.bigquery.TableId tableId_tBigQueryOutput_4 = com.google.cloud.bigquery.TableId
						.of("otmirror-060322", "DW", "fact_transactions");
				com.google.cloud.bigquery.LoadJobConfiguration.Builder loadJobBuilder_tBigQueryOutput_4 = com.google.cloud.bigquery.LoadJobConfiguration
						.newBuilder(tableId_tBigQueryOutput_4, "gs://dw-tmp/inv_data.avro");

				boolean dropTable_tBigQueryOutput_4 = false;

				if (dropTable_tBigQueryOutput_4
						&& bigquery_tBigQueryOutput_4.getTable(tableId_tBigQueryOutput_4) != null) {
					boolean deleted = bigquery_tBigQueryOutput_4.delete(tableId_tBigQueryOutput_4);
					if (deleted) {

					} else {
						throw new RuntimeException("Unable to delete table " + tableId_tBigQueryOutput_4);
					}
				}

				if (bigquery_tBigQueryOutput_4.getTable(tableId_tBigQueryOutput_4) == null) {
					java.util.List<com.google.cloud.bigquery.Field> fields_tBigQueryOutput_4 = new java.util.ArrayList<>();

					com.google.cloud.bigquery.Field field_0 = com.google.cloud.bigquery.Field
							.newBuilder("client_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_0);

					com.google.cloud.bigquery.Field field_1 = com.google.cloud.bigquery.Field
							.newBuilder("supervisor_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_1);

					com.google.cloud.bigquery.Field field_2 = com.google.cloud.bigquery.Field
							.newBuilder("client_cost_center_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_2);

					com.google.cloud.bigquery.Field field_3 = com.google.cloud.bigquery.Field
							.newBuilder("employee_cost_center_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_3);

					com.google.cloud.bigquery.Field field_4 = com.google.cloud.bigquery.Field
							.newBuilder("employee_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_4);

					com.google.cloud.bigquery.Field field_5 = com.google.cloud.bigquery.Field
							.newBuilder("ar_payer_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_5);

					com.google.cloud.bigquery.Field field_6 = com.google.cloud.bigquery.Field
							.newBuilder("department_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_6);

					com.google.cloud.bigquery.Field field_7 = com.google.cloud.bigquery.Field
							.newBuilder("service_cost_center_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_7);

					com.google.cloud.bigquery.Field field_8 = com.google.cloud.bigquery.Field
							.newBuilder("site_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_8);

					com.google.cloud.bigquery.Field field_9 = com.google.cloud.bigquery.Field
							.newBuilder("school_district_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_9);

					com.google.cloud.bigquery.Field field_10 = com.google.cloud.bigquery.Field
							.newBuilder("authorization_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_10);

					com.google.cloud.bigquery.Field field_11 = com.google.cloud.bigquery.Field
							.newBuilder("authorized_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_11);

					com.google.cloud.bigquery.Field field_12 = com.google.cloud.bigquery.Field
							.newBuilder("service_authorization_approval",
									com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_12);

					com.google.cloud.bigquery.Field field_13 = com.google.cloud.bigquery.Field
							.newBuilder("service_authorization_date_id",
									com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_13);

					com.google.cloud.bigquery.Field field_14 = com.google.cloud.bigquery.Field
							.newBuilder("Service_Authorization_Expired",
									com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_14);

					com.google.cloud.bigquery.Field field_15 = com.google.cloud.bigquery.Field
							.newBuilder("service_authorization_description",
									com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_15);

					com.google.cloud.bigquery.Field field_16 = com.google.cloud.bigquery.Field
							.newBuilder("company_name", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_16);

					com.google.cloud.bigquery.Field field_17 = com.google.cloud.bigquery.Field
							.newBuilder("service_abbreviation", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_17);

					com.google.cloud.bigquery.Field field_18 = com.google.cloud.bigquery.Field
							.newBuilder("service_code", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_18);

					com.google.cloud.bigquery.Field field_19 = com.google.cloud.bigquery.Field
							.newBuilder("authorized_start_date_id", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_19);

					com.google.cloud.bigquery.Field field_20 = com.google.cloud.bigquery.Field
							.newBuilder("authorized_end_date_id", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_20);

					com.google.cloud.bigquery.Field field_21 = com.google.cloud.bigquery.Field
							.newBuilder("authorization_start_date_id",
									com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_21);

					com.google.cloud.bigquery.Field field_22 = com.google.cloud.bigquery.Field
							.newBuilder("authorization_end_date_id", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_22);

					com.google.cloud.bigquery.Field field_23 = com.google.cloud.bigquery.Field
							.newBuilder("service_program", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_23);

					com.google.cloud.bigquery.Field field_24 = com.google.cloud.bigquery.Field
							.newBuilder("service_place", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_24);

					com.google.cloud.bigquery.Field field_25 = com.google.cloud.bigquery.Field
							.newBuilder("service_is_sum_and_round", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_25);

					com.google.cloud.bigquery.Field field_26 = com.google.cloud.bigquery.Field
							.newBuilder("validate_to_schedules", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_26);

					com.google.cloud.bigquery.Field field_27 = com.google.cloud.bigquery.Field
							.newBuilder("service_minimum_minutes", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_27);

					com.google.cloud.bigquery.Field field_28 = com.google.cloud.bigquery.Field
							.newBuilder("service_units_per_hour", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_28);

					com.google.cloud.bigquery.Field field_29 = com.google.cloud.bigquery.Field
							.newBuilder("service_max_units_total", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_29);

					com.google.cloud.bigquery.Field field_30 = com.google.cloud.bigquery.Field
							.newBuilder("service_auth_max_units_total",
									com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_30);

					com.google.cloud.bigquery.Field field_31 = com.google.cloud.bigquery.Field
							.newBuilder("auth_level_validation", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_31);

					com.google.cloud.bigquery.Field field_32 = com.google.cloud.bigquery.Field
							.newBuilder("total_units_authorized", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_32);

					com.google.cloud.bigquery.Field field_33 = com.google.cloud.bigquery.Field
							.newBuilder("current_rate", com.google.cloud.bigquery.LegacySQLTypeName.FLOAT)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_33);

					com.google.cloud.bigquery.Field field_34 = com.google.cloud.bigquery.Field
							.newBuilder("caregiver_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_34);

					com.google.cloud.bigquery.Field field_35 = com.google.cloud.bigquery.Field
							.newBuilder("inv_stg_service_date_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_35);

					com.google.cloud.bigquery.Field field_36 = com.google.cloud.bigquery.Field
							.newBuilder("in_schedule_note_service_date_id",
									com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_36);

					com.google.cloud.bigquery.Field field_37 = com.google.cloud.bigquery.Field
							.newBuilder("note_date_of_service_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_37);

					com.google.cloud.bigquery.Field field_38 = com.google.cloud.bigquery.Field
							.newBuilder("in_actual_note_service_date_id",
									com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_38);

					com.google.cloud.bigquery.Field field_39 = com.google.cloud.bigquery.Field
							.newBuilder("schedule_duration", com.google.cloud.bigquery.LegacySQLTypeName.TIMESTAMP)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_39);

					com.google.cloud.bigquery.Field field_40 = com.google.cloud.bigquery.Field
							.newBuilder("schedule_start_date_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_40);

					com.google.cloud.bigquery.Field field_41 = com.google.cloud.bigquery.Field
							.newBuilder("schedule_end_date_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_41);

					com.google.cloud.bigquery.Field field_42 = com.google.cloud.bigquery.Field
							.newBuilder("schedule_start_time", com.google.cloud.bigquery.LegacySQLTypeName.TIMESTAMP)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_42);

					com.google.cloud.bigquery.Field field_43 = com.google.cloud.bigquery.Field
							.newBuilder("schedule_end_time", com.google.cloud.bigquery.LegacySQLTypeName.TIMESTAMP)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_43);

					com.google.cloud.bigquery.Field field_44 = com.google.cloud.bigquery.Field
							.newBuilder("schedule_units", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_44);

					com.google.cloud.bigquery.Field field_45 = com.google.cloud.bigquery.Field
							.newBuilder("schedule_status", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_45);

					com.google.cloud.bigquery.Field field_46 = com.google.cloud.bigquery.Field
							.newBuilder("actual_start_date_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_46);

					com.google.cloud.bigquery.Field field_47 = com.google.cloud.bigquery.Field
							.newBuilder("actual_end_date_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_47);

					com.google.cloud.bigquery.Field field_48 = com.google.cloud.bigquery.Field
							.newBuilder("billing_attending_NPI", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_48);

					com.google.cloud.bigquery.Field field_49 = com.google.cloud.bigquery.Field
							.newBuilder("actual_imported", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_49);

					com.google.cloud.bigquery.Field field_50 = com.google.cloud.bigquery.Field
							.newBuilder("actual_hold_pay", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_50);

					com.google.cloud.bigquery.Field field_51 = com.google.cloud.bigquery.Field
							.newBuilder("actual_hold_bill", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_51);

					com.google.cloud.bigquery.Field field_52 = com.google.cloud.bigquery.Field
							.newBuilder("actual_time_sheet_approved",
									com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_52);

					com.google.cloud.bigquery.Field field_53 = com.google.cloud.bigquery.Field
							.newBuilder("actual_note_approved_bl", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_53);

					com.google.cloud.bigquery.Field field_54 = com.google.cloud.bigquery.Field
							.newBuilder("actual_note_approved_pr", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_54);

					com.google.cloud.bigquery.Field field_55 = com.google.cloud.bigquery.Field
							.newBuilder("actual_status_BL", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_55);

					com.google.cloud.bigquery.Field field_56 = com.google.cloud.bigquery.Field
							.newBuilder("actual_emp_pay_type", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_56);

					com.google.cloud.bigquery.Field field_57 = com.google.cloud.bigquery.Field
							.newBuilder("ineligible_for_billing", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_57);

					com.google.cloud.bigquery.Field field_58 = com.google.cloud.bigquery.Field
							.newBuilder("actual_adjustment", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_58);

					com.google.cloud.bigquery.Field field_59 = com.google.cloud.bigquery.Field
							.newBuilder("actual_check_date_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_59);

					com.google.cloud.bigquery.Field field_60 = com.google.cloud.bigquery.Field
							.newBuilder("actual_last_check_date_id",
									com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_60);

					com.google.cloud.bigquery.Field field_61 = com.google.cloud.bigquery.Field
							.newBuilder("actual_paid", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_61);

					com.google.cloud.bigquery.Field field_62 = com.google.cloud.bigquery.Field
							.newBuilder("ineligible_for_payroll", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_62);

					com.google.cloud.bigquery.Field field_63 = com.google.cloud.bigquery.Field
							.newBuilder("actual_invoice_number", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_63);

					com.google.cloud.bigquery.Field field_64 = com.google.cloud.bigquery.Field
							.newBuilder("actual_billed", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_64);

					com.google.cloud.bigquery.Field field_65 = com.google.cloud.bigquery.Field
							.newBuilder("actual_start_time", com.google.cloud.bigquery.LegacySQLTypeName.TIMESTAMP)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_65);

					com.google.cloud.bigquery.Field field_66 = com.google.cloud.bigquery.Field
							.newBuilder("actual_end_time", com.google.cloud.bigquery.LegacySQLTypeName.TIMESTAMP)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_66);

					com.google.cloud.bigquery.Field field_67 = com.google.cloud.bigquery.Field
							.newBuilder("actual_units", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_67);

					com.google.cloud.bigquery.Field field_68 = com.google.cloud.bigquery.Field
							.newBuilder("actual_duration", com.google.cloud.bigquery.LegacySQLTypeName.TIMESTAMP)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_68);

					com.google.cloud.bigquery.Field field_69 = com.google.cloud.bigquery.Field
							.newBuilder("service_billed_date_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_69);

					com.google.cloud.bigquery.Field field_70 = com.google.cloud.bigquery.Field
							.newBuilder("in_process_units_batched", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_70);

					com.google.cloud.bigquery.Field field_71 = com.google.cloud.bigquery.Field
							.newBuilder("note_duration", com.google.cloud.bigquery.LegacySQLTypeName.TIMESTAMP)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_71);

					com.google.cloud.bigquery.Field field_72 = com.google.cloud.bigquery.Field
							.newBuilder("note_end_time", com.google.cloud.bigquery.LegacySQLTypeName.TIMESTAMP)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_72);

					com.google.cloud.bigquery.Field field_73 = com.google.cloud.bigquery.Field
							.newBuilder("note_start_time", com.google.cloud.bigquery.LegacySQLTypeName.TIMESTAMP)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_73);

					com.google.cloud.bigquery.Field field_74 = com.google.cloud.bigquery.Field
							.newBuilder("rate_type", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_74);

					com.google.cloud.bigquery.Field field_75 = com.google.cloud.bigquery.Field
							.newBuilder("first_encounter", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_75);

					com.google.cloud.bigquery.Field field_76 = com.google.cloud.bigquery.Field
							.newBuilder("units_calculated", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_76);

					com.google.cloud.bigquery.Field field_77 = com.google.cloud.bigquery.Field
							.newBuilder("clqnote_has_child", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_77);

					com.google.cloud.bigquery.Field field_78 = com.google.cloud.bigquery.Field
							.newBuilder("missed_shift_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_78);

					com.google.cloud.bigquery.Field field_79 = com.google.cloud.bigquery.Field
							.newBuilder("missed_shift_units", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_79);

					com.google.cloud.bigquery.Field field_80 = com.google.cloud.bigquery.Field
							.newBuilder("billed_units", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_80);

					com.google.cloud.bigquery.Field field_81 = com.google.cloud.bigquery.Field
							.newBuilder("transaction_type", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_81);

					com.google.cloud.bigquery.Field field_82 = com.google.cloud.bigquery.Field
							.newBuilder("transaction_date_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_82);

					com.google.cloud.bigquery.Schema schema_tBigQueryOutput_4 = com.google.cloud.bigquery.Schema
							.of(fields_tBigQueryOutput_4);
					com.google.cloud.bigquery.TableInfo tableInfo_tBigQueryOutput_4 = com.google.cloud.bigquery.TableInfo
							.newBuilder(tableId_tBigQueryOutput_4,
									com.google.cloud.bigquery.StandardTableDefinition.of(schema_tBigQueryOutput_4))
							.build();
					com.google.cloud.bigquery.Table table_tBigQueryOutput_4 = bigquery_tBigQueryOutput_4
							.create(tableInfo_tBigQueryOutput_4);
					loadJobBuilder_tBigQueryOutput_4.setSchema(schema_tBigQueryOutput_4);
					loadJobBuilder_tBigQueryOutput_4
							.setCreateDisposition(com.google.cloud.bigquery.JobInfo.CreateDisposition.CREATE_IF_NEEDED);

				} else {
					loadJobBuilder_tBigQueryOutput_4
							.setCreateDisposition(com.google.cloud.bigquery.JobInfo.CreateDisposition.CREATE_NEVER);
				}

				loadJobBuilder_tBigQueryOutput_4
						.setWriteDisposition(com.google.cloud.bigquery.JobInfo.WriteDisposition.WRITE_APPEND);
				loadJobBuilder_tBigQueryOutput_4.setDestinationTable(tableId_tBigQueryOutput_4);
				com.google.cloud.bigquery.CsvOptions.Builder csvOptions_tBigQueryOutput_4 = com.google.cloud.bigquery.CsvOptions
						.newBuilder();
				csvOptions_tBigQueryOutput_4.setAllowQuotedNewLines(true);
				csvOptions_tBigQueryOutput_4.setSkipLeadingRows(0);

				csvOptions_tBigQueryOutput_4.setFieldDelimiter(",");

				loadJobBuilder_tBigQueryOutput_4.setFormatOptions(csvOptions_tBigQueryOutput_4.build());
				loadJobBuilder_tBigQueryOutput_4.setNullMarker("\\N");
				com.google.cloud.bigquery.Job job_tBigQueryOutput_4 = bigquery_tBigQueryOutput_4
						.create(com.google.cloud.bigquery.JobInfo.of(loadJobBuilder_tBigQueryOutput_4.build()));
				job_tBigQueryOutput_4 = job_tBigQueryOutput_4
						.waitFor(com.google.cloud.RetryOption.initialRetryDelay(org.threeten.bp.Duration.ofSeconds(1)));
				com.google.gson.Gson gsonObject_tBigQueryOutput_4 = new com.google.gson.Gson();
				if (job_tBigQueryOutput_4 != null && job_tBigQueryOutput_4.getStatus().getError() == null) {
					globalMap.put("tBigQueryOutput_4_JOBID", job_tBigQueryOutput_4.getJobId().getJob());
					globalMap.put("tBigQueryOutput_4_STATISTICS",
							gsonObject_tBigQueryOutput_4.toJson(job_tBigQueryOutput_4.getStatistics()));

				} else {
					if (job_tBigQueryOutput_4 == null) {
						throw new RuntimeException("Job no longer exists");
					}
					globalMap.put("tBigQueryOutput_4_JOBID", job_tBigQueryOutput_4.getJobId().getJob());
					globalMap.put("tBigQueryOutput_4_STATISTICS",
							gsonObject_tBigQueryOutput_4.toJson(job_tBigQueryOutput_4.getStatistics()));
					List<com.google.cloud.bigquery.BigQueryError> errorList = job_tBigQueryOutput_4.getStatus()
							.getExecutionErrors();
					throw new RuntimeException("Job failed: " + errorList.get(errorList.size() - 1));
				}

				/* ----END-CREATING-JOB (Cloud API)---- */

				/**
				 * [tBigQueryOutput_4_tBQBE begin ] stop
				 */

				/**
				 * [tBigQueryOutput_4_tBQBE main ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_4";

				currentComponent = "tBigQueryOutput_4_tBQBE";

				tos_count_tBigQueryOutput_4_tBQBE++;

				/**
				 * [tBigQueryOutput_4_tBQBE main ] stop
				 */

				/**
				 * [tBigQueryOutput_4_tBQBE process_data_begin ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_4";

				currentComponent = "tBigQueryOutput_4_tBQBE";

				/**
				 * [tBigQueryOutput_4_tBQBE process_data_begin ] stop
				 */

				/**
				 * [tBigQueryOutput_4_tBQBE process_data_end ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_4";

				currentComponent = "tBigQueryOutput_4_tBQBE";

				/**
				 * [tBigQueryOutput_4_tBQBE process_data_end ] stop
				 */

				/**
				 * [tBigQueryOutput_4_tBQBE end ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_4";

				currentComponent = "tBigQueryOutput_4_tBQBE";

				ok_Hash.put("tBigQueryOutput_4_tBQBE", true);
				end_Hash.put("tBigQueryOutput_4_tBQBE", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tJava_7Process(globalMap);

				/**
				 * [tBigQueryOutput_4_tBQBE end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_4 finally ] start
				 */

				currentComponent = "tDBInput_4";

				/**
				 * [tDBInput_4 finally ] stop
				 */

				/**
				 * [tBigQueryOutput_4_tBQOB finally ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_4";

				currentComponent = "tBigQueryOutput_4_tBQOB";

				if (resourceMap.get("finish_tBigQueryOutput_4_tBQOB") == null) {
					if (resourceMap.get("csvWriter_tBigQueryOutput_4_tBQOB") != null) {
						((com.talend.csv.CSVWriter) resourceMap.get("csvWriter_tBigQueryOutput_4_tBQOB")).close();
					}
				}

				/**
				 * [tBigQueryOutput_4_tBQOB finally ] stop
				 */

				/**
				 * [tBigQueryOutput_4_tBQBE finally ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_4";

				currentComponent = "tBigQueryOutput_4_tBQBE";

				/**
				 * [tBigQueryOutput_4_tBQBE finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}

	public void tJava_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tJava_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tJava_7 begin ] start
				 */

				ok_Hash.put("tJava_7", false);
				start_Hash.put("tJava_7", System.currentTimeMillis());

				currentComponent = "tJava_7";

				int tos_count_tJava_7 = 0;

				Integer Lines = (Integer) globalMap.get("tDBInput_4_NB_LINE");
//System.out.println("In total processed "+Lines+" invoice lines to big query from service ids " + context.ServiceID);
				System.out.println("invoice data reload finished at " + TalendDate.getDate("YYYY-MM-dd HH:mm:ss"));
				System.out.println(
						"starting to reload note data in BigQuery " + TalendDate.getDate("YYYY-MM-dd HH:mm:ss"));

				/**
				 * [tJava_7 begin ] stop
				 */

				/**
				 * [tJava_7 main ] start
				 */

				currentComponent = "tJava_7";

				tos_count_tJava_7++;

				/**
				 * [tJava_7 main ] stop
				 */

				/**
				 * [tJava_7 process_data_begin ] start
				 */

				currentComponent = "tJava_7";

				/**
				 * [tJava_7 process_data_begin ] stop
				 */

				/**
				 * [tJava_7 process_data_end ] start
				 */

				currentComponent = "tJava_7";

				/**
				 * [tJava_7 process_data_end ] stop
				 */

				/**
				 * [tJava_7 end ] start
				 */

				currentComponent = "tJava_7";

				ok_Hash.put("tJava_7", true);
				end_Hash.put("tJava_7", System.currentTimeMillis());

				/**
				 * [tJava_7 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tJava_7 finally ] start
				 */

				currentComponent = "tJava_7";

				/**
				 * [tJava_7 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_7_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_ONTARGET_load_transactions_initial = new byte[0];
		static byte[] commonByteArray_ONTARGET_load_transactions_initial = new byte[0];

		public Integer client_id;

		public Integer getClient_id() {
			return this.client_id;
		}

		public Integer supervisor_id;

		public Integer getSupervisor_id() {
			return this.supervisor_id;
		}

		public Integer client_cost_center_id;

		public Integer getClient_cost_center_id() {
			return this.client_cost_center_id;
		}

		public Integer employee_cost_center_id;

		public Integer getEmployee_cost_center_id() {
			return this.employee_cost_center_id;
		}

		public Integer employee_id;

		public Integer getEmployee_id() {
			return this.employee_id;
		}

		public Integer ar_payer_id;

		public Integer getAr_payer_id() {
			return this.ar_payer_id;
		}

		public Integer department_id;

		public Integer getDepartment_id() {
			return this.department_id;
		}

		public Integer service_cost_center_id;

		public Integer getService_cost_center_id() {
			return this.service_cost_center_id;
		}

		public Integer site_id;

		public Integer getSite_id() {
			return this.site_id;
		}

		public Integer school_district_id;

		public Integer getSchool_district_id() {
			return this.school_district_id;
		}

		public Integer authorization_id;

		public Integer getAuthorization_id() {
			return this.authorization_id;
		}

		public Integer authorized_id;

		public Integer getAuthorized_id() {
			return this.authorized_id;
		}

		public String service_authorization_approval;

		public String getService_authorization_approval() {
			return this.service_authorization_approval;
		}

		public String service_authorization_date_id;

		public String getService_authorization_date_id() {
			return this.service_authorization_date_id;
		}

		public String Service_Authorization_Expired;

		public String getService_Authorization_Expired() {
			return this.Service_Authorization_Expired;
		}

		public String service_authorization_description;

		public String getService_authorization_description() {
			return this.service_authorization_description;
		}

		public String company_name;

		public String getCompany_name() {
			return this.company_name;
		}

		public String service_abbreviation;

		public String getService_abbreviation() {
			return this.service_abbreviation;
		}

		public String service_code;

		public String getService_code() {
			return this.service_code;
		}

		public String authorized_start_date_id;

		public String getAuthorized_start_date_id() {
			return this.authorized_start_date_id;
		}

		public String authorized_end_date_id;

		public String getAuthorized_end_date_id() {
			return this.authorized_end_date_id;
		}

		public String authorization_start_date_id;

		public String getAuthorization_start_date_id() {
			return this.authorization_start_date_id;
		}

		public String authorization_end_date_id;

		public String getAuthorization_end_date_id() {
			return this.authorization_end_date_id;
		}

		public String service_program;

		public String getService_program() {
			return this.service_program;
		}

		public String service_place;

		public String getService_place() {
			return this.service_place;
		}

		public Integer service_is_sum_and_round;

		public Integer getService_is_sum_and_round() {
			return this.service_is_sum_and_round;
		}

		public Integer validate_to_schedules;

		public Integer getValidate_to_schedules() {
			return this.validate_to_schedules;
		}

		public Integer service_minimum_minutes;

		public Integer getService_minimum_minutes() {
			return this.service_minimum_minutes;
		}

		public Integer service_units_per_hour;

		public Integer getService_units_per_hour() {
			return this.service_units_per_hour;
		}

		public Integer service_max_units_total;

		public Integer getService_max_units_total() {
			return this.service_max_units_total;
		}

		public Integer service_auth_max_units_total;

		public Integer getService_auth_max_units_total() {
			return this.service_auth_max_units_total;
		}

		public Boolean auth_level_validation;

		public Boolean getAuth_level_validation() {
			return this.auth_level_validation;
		}

		public Integer total_units_authorized;

		public Integer getTotal_units_authorized() {
			return this.total_units_authorized;
		}

		public Float current_rate;

		public Float getCurrent_rate() {
			return this.current_rate;
		}

		public Integer caregiver_id;

		public Integer getCaregiver_id() {
			return this.caregiver_id;
		}

		public Integer inv_stg_service_date_id;

		public Integer getInv_stg_service_date_id() {
			return this.inv_stg_service_date_id;
		}

		public Integer in_schedule_note_service_date_id;

		public Integer getIn_schedule_note_service_date_id() {
			return this.in_schedule_note_service_date_id;
		}

		public Integer note_date_of_service_id;

		public Integer getNote_date_of_service_id() {
			return this.note_date_of_service_id;
		}

		public Integer in_actual_note_service_date_id;

		public Integer getIn_actual_note_service_date_id() {
			return this.in_actual_note_service_date_id;
		}

		public java.util.Date schedule_duration;

		public java.util.Date getSchedule_duration() {
			return this.schedule_duration;
		}

		public Integer schedule_start_date_id;

		public Integer getSchedule_start_date_id() {
			return this.schedule_start_date_id;
		}

		public Integer schedule_end_date_id;

		public Integer getSchedule_end_date_id() {
			return this.schedule_end_date_id;
		}

		public java.util.Date schedule_start_time;

		public java.util.Date getSchedule_start_time() {
			return this.schedule_start_time;
		}

		public java.util.Date schedule_end_time;

		public java.util.Date getSchedule_end_time() {
			return this.schedule_end_time;
		}

		public Integer schedule_units;

		public Integer getSchedule_units() {
			return this.schedule_units;
		}

		public String schedule_status;

		public String getSchedule_status() {
			return this.schedule_status;
		}

		public Integer actual_start_date_id;

		public Integer getActual_start_date_id() {
			return this.actual_start_date_id;
		}

		public Integer actual_end_date_id;

		public Integer getActual_end_date_id() {
			return this.actual_end_date_id;
		}

		public String billing_attending_NPI;

		public String getBilling_attending_NPI() {
			return this.billing_attending_NPI;
		}

		public Boolean actual_imported;

		public Boolean getActual_imported() {
			return this.actual_imported;
		}

		public Boolean actual_hold_pay;

		public Boolean getActual_hold_pay() {
			return this.actual_hold_pay;
		}

		public Boolean actual_hold_bill;

		public Boolean getActual_hold_bill() {
			return this.actual_hold_bill;
		}

		public Boolean actual_time_sheet_approved;

		public Boolean getActual_time_sheet_approved() {
			return this.actual_time_sheet_approved;
		}

		public Boolean actual_note_approved_bl;

		public Boolean getActual_note_approved_bl() {
			return this.actual_note_approved_bl;
		}

		public Boolean actual_note_approved_pr;

		public Boolean getActual_note_approved_pr() {
			return this.actual_note_approved_pr;
		}

		public String actual_status_BL;

		public String getActual_status_BL() {
			return this.actual_status_BL;
		}

		public String actual_emp_pay_type;

		public String getActual_emp_pay_type() {
			return this.actual_emp_pay_type;
		}

		public Boolean ineligible_for_billing;

		public Boolean getIneligible_for_billing() {
			return this.ineligible_for_billing;
		}

		public Boolean actual_adjustment;

		public Boolean getActual_adjustment() {
			return this.actual_adjustment;
		}

		public Integer actual_check_date_id;

		public Integer getActual_check_date_id() {
			return this.actual_check_date_id;
		}

		public Integer actual_last_check_date_id;

		public Integer getActual_last_check_date_id() {
			return this.actual_last_check_date_id;
		}

		public Boolean actual_paid;

		public Boolean getActual_paid() {
			return this.actual_paid;
		}

		public Boolean ineligible_for_payroll;

		public Boolean getIneligible_for_payroll() {
			return this.ineligible_for_payroll;
		}

		public Integer actual_invoice_number;

		public Integer getActual_invoice_number() {
			return this.actual_invoice_number;
		}

		public Boolean actual_billed;

		public Boolean getActual_billed() {
			return this.actual_billed;
		}

		public java.util.Date actual_start_time;

		public java.util.Date getActual_start_time() {
			return this.actual_start_time;
		}

		public java.util.Date actual_end_time;

		public java.util.Date getActual_end_time() {
			return this.actual_end_time;
		}

		public Integer actual_units;

		public Integer getActual_units() {
			return this.actual_units;
		}

		public java.util.Date actual_duration;

		public java.util.Date getActual_duration() {
			return this.actual_duration;
		}

		public Integer service_billed_date_id;

		public Integer getService_billed_date_id() {
			return this.service_billed_date_id;
		}

		public Integer in_process_units_batched;

		public Integer getIn_process_units_batched() {
			return this.in_process_units_batched;
		}

		public java.util.Date note_duration;

		public java.util.Date getNote_duration() {
			return this.note_duration;
		}

		public java.util.Date note_end_time;

		public java.util.Date getNote_end_time() {
			return this.note_end_time;
		}

		public java.util.Date note_start_time;

		public java.util.Date getNote_start_time() {
			return this.note_start_time;
		}

		public String rate_type;

		public String getRate_type() {
			return this.rate_type;
		}

		public Boolean first_encounter;

		public Boolean getFirst_encounter() {
			return this.first_encounter;
		}

		public Integer units_calculated;

		public Integer getUnits_calculated() {
			return this.units_calculated;
		}

		public Boolean clqnote_has_child;

		public Boolean getClqnote_has_child() {
			return this.clqnote_has_child;
		}

		public Integer missed_shift_id;

		public Integer getMissed_shift_id() {
			return this.missed_shift_id;
		}

		public Integer missed_shift_units;

		public Integer getMissed_shift_units() {
			return this.missed_shift_units;
		}

		public Integer billed_units;

		public Integer getBilled_units() {
			return this.billed_units;
		}

		public String transaction_type;

		public String getTransaction_type() {
			return this.transaction_type;
		}

		public Integer transaction_date_id;

		public Integer getTransaction_date_id() {
			return this.transaction_date_id;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ONTARGET_load_transactions_initial.length) {
					if (length < 1024 && commonByteArray_ONTARGET_load_transactions_initial.length == 0) {
						commonByteArray_ONTARGET_load_transactions_initial = new byte[1024];
					} else {
						commonByteArray_ONTARGET_load_transactions_initial = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ONTARGET_load_transactions_initial, 0, length);
				strReturn = new String(commonByteArray_ONTARGET_load_transactions_initial, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ONTARGET_load_transactions_initial.length) {
					if (length < 1024 && commonByteArray_ONTARGET_load_transactions_initial.length == 0) {
						commonByteArray_ONTARGET_load_transactions_initial = new byte[1024];
					} else {
						commonByteArray_ONTARGET_load_transactions_initial = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_ONTARGET_load_transactions_initial, 0, length);
				strReturn = new String(commonByteArray_ONTARGET_load_transactions_initial, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ONTARGET_load_transactions_initial) {

				try {

					int length = 0;

					this.client_id = readInteger(dis);

					this.supervisor_id = readInteger(dis);

					this.client_cost_center_id = readInteger(dis);

					this.employee_cost_center_id = readInteger(dis);

					this.employee_id = readInteger(dis);

					this.ar_payer_id = readInteger(dis);

					this.department_id = readInteger(dis);

					this.service_cost_center_id = readInteger(dis);

					this.site_id = readInteger(dis);

					this.school_district_id = readInteger(dis);

					this.authorization_id = readInteger(dis);

					this.authorized_id = readInteger(dis);

					this.service_authorization_approval = readString(dis);

					this.service_authorization_date_id = readString(dis);

					this.Service_Authorization_Expired = readString(dis);

					this.service_authorization_description = readString(dis);

					this.company_name = readString(dis);

					this.service_abbreviation = readString(dis);

					this.service_code = readString(dis);

					this.authorized_start_date_id = readString(dis);

					this.authorized_end_date_id = readString(dis);

					this.authorization_start_date_id = readString(dis);

					this.authorization_end_date_id = readString(dis);

					this.service_program = readString(dis);

					this.service_place = readString(dis);

					this.service_is_sum_and_round = readInteger(dis);

					this.validate_to_schedules = readInteger(dis);

					this.service_minimum_minutes = readInteger(dis);

					this.service_units_per_hour = readInteger(dis);

					this.service_max_units_total = readInteger(dis);

					this.service_auth_max_units_total = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.auth_level_validation = null;
					} else {
						this.auth_level_validation = dis.readBoolean();
					}

					this.total_units_authorized = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.current_rate = null;
					} else {
						this.current_rate = dis.readFloat();
					}

					this.caregiver_id = readInteger(dis);

					this.inv_stg_service_date_id = readInteger(dis);

					this.in_schedule_note_service_date_id = readInteger(dis);

					this.note_date_of_service_id = readInteger(dis);

					this.in_actual_note_service_date_id = readInteger(dis);

					this.schedule_duration = readDate(dis);

					this.schedule_start_date_id = readInteger(dis);

					this.schedule_end_date_id = readInteger(dis);

					this.schedule_start_time = readDate(dis);

					this.schedule_end_time = readDate(dis);

					this.schedule_units = readInteger(dis);

					this.schedule_status = readString(dis);

					this.actual_start_date_id = readInteger(dis);

					this.actual_end_date_id = readInteger(dis);

					this.billing_attending_NPI = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.actual_imported = null;
					} else {
						this.actual_imported = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_hold_pay = null;
					} else {
						this.actual_hold_pay = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_hold_bill = null;
					} else {
						this.actual_hold_bill = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_time_sheet_approved = null;
					} else {
						this.actual_time_sheet_approved = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_note_approved_bl = null;
					} else {
						this.actual_note_approved_bl = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_note_approved_pr = null;
					} else {
						this.actual_note_approved_pr = dis.readBoolean();
					}

					this.actual_status_BL = readString(dis);

					this.actual_emp_pay_type = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ineligible_for_billing = null;
					} else {
						this.ineligible_for_billing = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_adjustment = null;
					} else {
						this.actual_adjustment = dis.readBoolean();
					}

					this.actual_check_date_id = readInteger(dis);

					this.actual_last_check_date_id = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.actual_paid = null;
					} else {
						this.actual_paid = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.ineligible_for_payroll = null;
					} else {
						this.ineligible_for_payroll = dis.readBoolean();
					}

					this.actual_invoice_number = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.actual_billed = null;
					} else {
						this.actual_billed = dis.readBoolean();
					}

					this.actual_start_time = readDate(dis);

					this.actual_end_time = readDate(dis);

					this.actual_units = readInteger(dis);

					this.actual_duration = readDate(dis);

					this.service_billed_date_id = readInteger(dis);

					this.in_process_units_batched = readInteger(dis);

					this.note_duration = readDate(dis);

					this.note_end_time = readDate(dis);

					this.note_start_time = readDate(dis);

					this.rate_type = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.first_encounter = null;
					} else {
						this.first_encounter = dis.readBoolean();
					}

					this.units_calculated = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.clqnote_has_child = null;
					} else {
						this.clqnote_has_child = dis.readBoolean();
					}

					this.missed_shift_id = readInteger(dis);

					this.missed_shift_units = readInteger(dis);

					this.billed_units = readInteger(dis);

					this.transaction_type = readString(dis);

					this.transaction_date_id = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ONTARGET_load_transactions_initial) {

				try {

					int length = 0;

					this.client_id = readInteger(dis);

					this.supervisor_id = readInteger(dis);

					this.client_cost_center_id = readInteger(dis);

					this.employee_cost_center_id = readInteger(dis);

					this.employee_id = readInteger(dis);

					this.ar_payer_id = readInteger(dis);

					this.department_id = readInteger(dis);

					this.service_cost_center_id = readInteger(dis);

					this.site_id = readInteger(dis);

					this.school_district_id = readInteger(dis);

					this.authorization_id = readInteger(dis);

					this.authorized_id = readInteger(dis);

					this.service_authorization_approval = readString(dis);

					this.service_authorization_date_id = readString(dis);

					this.Service_Authorization_Expired = readString(dis);

					this.service_authorization_description = readString(dis);

					this.company_name = readString(dis);

					this.service_abbreviation = readString(dis);

					this.service_code = readString(dis);

					this.authorized_start_date_id = readString(dis);

					this.authorized_end_date_id = readString(dis);

					this.authorization_start_date_id = readString(dis);

					this.authorization_end_date_id = readString(dis);

					this.service_program = readString(dis);

					this.service_place = readString(dis);

					this.service_is_sum_and_round = readInteger(dis);

					this.validate_to_schedules = readInteger(dis);

					this.service_minimum_minutes = readInteger(dis);

					this.service_units_per_hour = readInteger(dis);

					this.service_max_units_total = readInteger(dis);

					this.service_auth_max_units_total = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.auth_level_validation = null;
					} else {
						this.auth_level_validation = dis.readBoolean();
					}

					this.total_units_authorized = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.current_rate = null;
					} else {
						this.current_rate = dis.readFloat();
					}

					this.caregiver_id = readInteger(dis);

					this.inv_stg_service_date_id = readInteger(dis);

					this.in_schedule_note_service_date_id = readInteger(dis);

					this.note_date_of_service_id = readInteger(dis);

					this.in_actual_note_service_date_id = readInteger(dis);

					this.schedule_duration = readDate(dis);

					this.schedule_start_date_id = readInteger(dis);

					this.schedule_end_date_id = readInteger(dis);

					this.schedule_start_time = readDate(dis);

					this.schedule_end_time = readDate(dis);

					this.schedule_units = readInteger(dis);

					this.schedule_status = readString(dis);

					this.actual_start_date_id = readInteger(dis);

					this.actual_end_date_id = readInteger(dis);

					this.billing_attending_NPI = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.actual_imported = null;
					} else {
						this.actual_imported = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_hold_pay = null;
					} else {
						this.actual_hold_pay = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_hold_bill = null;
					} else {
						this.actual_hold_bill = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_time_sheet_approved = null;
					} else {
						this.actual_time_sheet_approved = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_note_approved_bl = null;
					} else {
						this.actual_note_approved_bl = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_note_approved_pr = null;
					} else {
						this.actual_note_approved_pr = dis.readBoolean();
					}

					this.actual_status_BL = readString(dis);

					this.actual_emp_pay_type = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ineligible_for_billing = null;
					} else {
						this.ineligible_for_billing = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_adjustment = null;
					} else {
						this.actual_adjustment = dis.readBoolean();
					}

					this.actual_check_date_id = readInteger(dis);

					this.actual_last_check_date_id = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.actual_paid = null;
					} else {
						this.actual_paid = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.ineligible_for_payroll = null;
					} else {
						this.ineligible_for_payroll = dis.readBoolean();
					}

					this.actual_invoice_number = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.actual_billed = null;
					} else {
						this.actual_billed = dis.readBoolean();
					}

					this.actual_start_time = readDate(dis);

					this.actual_end_time = readDate(dis);

					this.actual_units = readInteger(dis);

					this.actual_duration = readDate(dis);

					this.service_billed_date_id = readInteger(dis);

					this.in_process_units_batched = readInteger(dis);

					this.note_duration = readDate(dis);

					this.note_end_time = readDate(dis);

					this.note_start_time = readDate(dis);

					this.rate_type = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.first_encounter = null;
					} else {
						this.first_encounter = dis.readBoolean();
					}

					this.units_calculated = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.clqnote_has_child = null;
					} else {
						this.clqnote_has_child = dis.readBoolean();
					}

					this.missed_shift_id = readInteger(dis);

					this.missed_shift_units = readInteger(dis);

					this.billed_units = readInteger(dis);

					this.transaction_type = readString(dis);

					this.transaction_date_id = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.client_id, dos);

				// Integer

				writeInteger(this.supervisor_id, dos);

				// Integer

				writeInteger(this.client_cost_center_id, dos);

				// Integer

				writeInteger(this.employee_cost_center_id, dos);

				// Integer

				writeInteger(this.employee_id, dos);

				// Integer

				writeInteger(this.ar_payer_id, dos);

				// Integer

				writeInteger(this.department_id, dos);

				// Integer

				writeInteger(this.service_cost_center_id, dos);

				// Integer

				writeInteger(this.site_id, dos);

				// Integer

				writeInteger(this.school_district_id, dos);

				// Integer

				writeInteger(this.authorization_id, dos);

				// Integer

				writeInteger(this.authorized_id, dos);

				// String

				writeString(this.service_authorization_approval, dos);

				// String

				writeString(this.service_authorization_date_id, dos);

				// String

				writeString(this.Service_Authorization_Expired, dos);

				// String

				writeString(this.service_authorization_description, dos);

				// String

				writeString(this.company_name, dos);

				// String

				writeString(this.service_abbreviation, dos);

				// String

				writeString(this.service_code, dos);

				// String

				writeString(this.authorized_start_date_id, dos);

				// String

				writeString(this.authorized_end_date_id, dos);

				// String

				writeString(this.authorization_start_date_id, dos);

				// String

				writeString(this.authorization_end_date_id, dos);

				// String

				writeString(this.service_program, dos);

				// String

				writeString(this.service_place, dos);

				// Integer

				writeInteger(this.service_is_sum_and_round, dos);

				// Integer

				writeInteger(this.validate_to_schedules, dos);

				// Integer

				writeInteger(this.service_minimum_minutes, dos);

				// Integer

				writeInteger(this.service_units_per_hour, dos);

				// Integer

				writeInteger(this.service_max_units_total, dos);

				// Integer

				writeInteger(this.service_auth_max_units_total, dos);

				// Boolean

				if (this.auth_level_validation == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.auth_level_validation);
				}

				// Integer

				writeInteger(this.total_units_authorized, dos);

				// Float

				if (this.current_rate == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.current_rate);
				}

				// Integer

				writeInteger(this.caregiver_id, dos);

				// Integer

				writeInteger(this.inv_stg_service_date_id, dos);

				// Integer

				writeInteger(this.in_schedule_note_service_date_id, dos);

				// Integer

				writeInteger(this.note_date_of_service_id, dos);

				// Integer

				writeInteger(this.in_actual_note_service_date_id, dos);

				// java.util.Date

				writeDate(this.schedule_duration, dos);

				// Integer

				writeInteger(this.schedule_start_date_id, dos);

				// Integer

				writeInteger(this.schedule_end_date_id, dos);

				// java.util.Date

				writeDate(this.schedule_start_time, dos);

				// java.util.Date

				writeDate(this.schedule_end_time, dos);

				// Integer

				writeInteger(this.schedule_units, dos);

				// String

				writeString(this.schedule_status, dos);

				// Integer

				writeInteger(this.actual_start_date_id, dos);

				// Integer

				writeInteger(this.actual_end_date_id, dos);

				// String

				writeString(this.billing_attending_NPI, dos);

				// Boolean

				if (this.actual_imported == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_imported);
				}

				// Boolean

				if (this.actual_hold_pay == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_hold_pay);
				}

				// Boolean

				if (this.actual_hold_bill == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_hold_bill);
				}

				// Boolean

				if (this.actual_time_sheet_approved == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_time_sheet_approved);
				}

				// Boolean

				if (this.actual_note_approved_bl == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_note_approved_bl);
				}

				// Boolean

				if (this.actual_note_approved_pr == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_note_approved_pr);
				}

				// String

				writeString(this.actual_status_BL, dos);

				// String

				writeString(this.actual_emp_pay_type, dos);

				// Boolean

				if (this.ineligible_for_billing == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.ineligible_for_billing);
				}

				// Boolean

				if (this.actual_adjustment == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_adjustment);
				}

				// Integer

				writeInteger(this.actual_check_date_id, dos);

				// Integer

				writeInteger(this.actual_last_check_date_id, dos);

				// Boolean

				if (this.actual_paid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_paid);
				}

				// Boolean

				if (this.ineligible_for_payroll == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.ineligible_for_payroll);
				}

				// Integer

				writeInteger(this.actual_invoice_number, dos);

				// Boolean

				if (this.actual_billed == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_billed);
				}

				// java.util.Date

				writeDate(this.actual_start_time, dos);

				// java.util.Date

				writeDate(this.actual_end_time, dos);

				// Integer

				writeInteger(this.actual_units, dos);

				// java.util.Date

				writeDate(this.actual_duration, dos);

				// Integer

				writeInteger(this.service_billed_date_id, dos);

				// Integer

				writeInteger(this.in_process_units_batched, dos);

				// java.util.Date

				writeDate(this.note_duration, dos);

				// java.util.Date

				writeDate(this.note_end_time, dos);

				// java.util.Date

				writeDate(this.note_start_time, dos);

				// String

				writeString(this.rate_type, dos);

				// Boolean

				if (this.first_encounter == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.first_encounter);
				}

				// Integer

				writeInteger(this.units_calculated, dos);

				// Boolean

				if (this.clqnote_has_child == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.clqnote_has_child);
				}

				// Integer

				writeInteger(this.missed_shift_id, dos);

				// Integer

				writeInteger(this.missed_shift_units, dos);

				// Integer

				writeInteger(this.billed_units, dos);

				// String

				writeString(this.transaction_type, dos);

				// Integer

				writeInteger(this.transaction_date_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.client_id, dos);

				// Integer

				writeInteger(this.supervisor_id, dos);

				// Integer

				writeInteger(this.client_cost_center_id, dos);

				// Integer

				writeInteger(this.employee_cost_center_id, dos);

				// Integer

				writeInteger(this.employee_id, dos);

				// Integer

				writeInteger(this.ar_payer_id, dos);

				// Integer

				writeInteger(this.department_id, dos);

				// Integer

				writeInteger(this.service_cost_center_id, dos);

				// Integer

				writeInteger(this.site_id, dos);

				// Integer

				writeInteger(this.school_district_id, dos);

				// Integer

				writeInteger(this.authorization_id, dos);

				// Integer

				writeInteger(this.authorized_id, dos);

				// String

				writeString(this.service_authorization_approval, dos);

				// String

				writeString(this.service_authorization_date_id, dos);

				// String

				writeString(this.Service_Authorization_Expired, dos);

				// String

				writeString(this.service_authorization_description, dos);

				// String

				writeString(this.company_name, dos);

				// String

				writeString(this.service_abbreviation, dos);

				// String

				writeString(this.service_code, dos);

				// String

				writeString(this.authorized_start_date_id, dos);

				// String

				writeString(this.authorized_end_date_id, dos);

				// String

				writeString(this.authorization_start_date_id, dos);

				// String

				writeString(this.authorization_end_date_id, dos);

				// String

				writeString(this.service_program, dos);

				// String

				writeString(this.service_place, dos);

				// Integer

				writeInteger(this.service_is_sum_and_round, dos);

				// Integer

				writeInteger(this.validate_to_schedules, dos);

				// Integer

				writeInteger(this.service_minimum_minutes, dos);

				// Integer

				writeInteger(this.service_units_per_hour, dos);

				// Integer

				writeInteger(this.service_max_units_total, dos);

				// Integer

				writeInteger(this.service_auth_max_units_total, dos);

				// Boolean

				if (this.auth_level_validation == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.auth_level_validation);
				}

				// Integer

				writeInteger(this.total_units_authorized, dos);

				// Float

				if (this.current_rate == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.current_rate);
				}

				// Integer

				writeInteger(this.caregiver_id, dos);

				// Integer

				writeInteger(this.inv_stg_service_date_id, dos);

				// Integer

				writeInteger(this.in_schedule_note_service_date_id, dos);

				// Integer

				writeInteger(this.note_date_of_service_id, dos);

				// Integer

				writeInteger(this.in_actual_note_service_date_id, dos);

				// java.util.Date

				writeDate(this.schedule_duration, dos);

				// Integer

				writeInteger(this.schedule_start_date_id, dos);

				// Integer

				writeInteger(this.schedule_end_date_id, dos);

				// java.util.Date

				writeDate(this.schedule_start_time, dos);

				// java.util.Date

				writeDate(this.schedule_end_time, dos);

				// Integer

				writeInteger(this.schedule_units, dos);

				// String

				writeString(this.schedule_status, dos);

				// Integer

				writeInteger(this.actual_start_date_id, dos);

				// Integer

				writeInteger(this.actual_end_date_id, dos);

				// String

				writeString(this.billing_attending_NPI, dos);

				// Boolean

				if (this.actual_imported == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_imported);
				}

				// Boolean

				if (this.actual_hold_pay == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_hold_pay);
				}

				// Boolean

				if (this.actual_hold_bill == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_hold_bill);
				}

				// Boolean

				if (this.actual_time_sheet_approved == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_time_sheet_approved);
				}

				// Boolean

				if (this.actual_note_approved_bl == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_note_approved_bl);
				}

				// Boolean

				if (this.actual_note_approved_pr == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_note_approved_pr);
				}

				// String

				writeString(this.actual_status_BL, dos);

				// String

				writeString(this.actual_emp_pay_type, dos);

				// Boolean

				if (this.ineligible_for_billing == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.ineligible_for_billing);
				}

				// Boolean

				if (this.actual_adjustment == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_adjustment);
				}

				// Integer

				writeInteger(this.actual_check_date_id, dos);

				// Integer

				writeInteger(this.actual_last_check_date_id, dos);

				// Boolean

				if (this.actual_paid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_paid);
				}

				// Boolean

				if (this.ineligible_for_payroll == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.ineligible_for_payroll);
				}

				// Integer

				writeInteger(this.actual_invoice_number, dos);

				// Boolean

				if (this.actual_billed == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_billed);
				}

				// java.util.Date

				writeDate(this.actual_start_time, dos);

				// java.util.Date

				writeDate(this.actual_end_time, dos);

				// Integer

				writeInteger(this.actual_units, dos);

				// java.util.Date

				writeDate(this.actual_duration, dos);

				// Integer

				writeInteger(this.service_billed_date_id, dos);

				// Integer

				writeInteger(this.in_process_units_batched, dos);

				// java.util.Date

				writeDate(this.note_duration, dos);

				// java.util.Date

				writeDate(this.note_end_time, dos);

				// java.util.Date

				writeDate(this.note_start_time, dos);

				// String

				writeString(this.rate_type, dos);

				// Boolean

				if (this.first_encounter == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.first_encounter);
				}

				// Integer

				writeInteger(this.units_calculated, dos);

				// Boolean

				if (this.clqnote_has_child == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.clqnote_has_child);
				}

				// Integer

				writeInteger(this.missed_shift_id, dos);

				// Integer

				writeInteger(this.missed_shift_units, dos);

				// Integer

				writeInteger(this.billed_units, dos);

				// String

				writeString(this.transaction_type, dos);

				// Integer

				writeInteger(this.transaction_date_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("client_id=" + String.valueOf(client_id));
			sb.append(",supervisor_id=" + String.valueOf(supervisor_id));
			sb.append(",client_cost_center_id=" + String.valueOf(client_cost_center_id));
			sb.append(",employee_cost_center_id=" + String.valueOf(employee_cost_center_id));
			sb.append(",employee_id=" + String.valueOf(employee_id));
			sb.append(",ar_payer_id=" + String.valueOf(ar_payer_id));
			sb.append(",department_id=" + String.valueOf(department_id));
			sb.append(",service_cost_center_id=" + String.valueOf(service_cost_center_id));
			sb.append(",site_id=" + String.valueOf(site_id));
			sb.append(",school_district_id=" + String.valueOf(school_district_id));
			sb.append(",authorization_id=" + String.valueOf(authorization_id));
			sb.append(",authorized_id=" + String.valueOf(authorized_id));
			sb.append(",service_authorization_approval=" + service_authorization_approval);
			sb.append(",service_authorization_date_id=" + service_authorization_date_id);
			sb.append(",Service_Authorization_Expired=" + Service_Authorization_Expired);
			sb.append(",service_authorization_description=" + service_authorization_description);
			sb.append(",company_name=" + company_name);
			sb.append(",service_abbreviation=" + service_abbreviation);
			sb.append(",service_code=" + service_code);
			sb.append(",authorized_start_date_id=" + authorized_start_date_id);
			sb.append(",authorized_end_date_id=" + authorized_end_date_id);
			sb.append(",authorization_start_date_id=" + authorization_start_date_id);
			sb.append(",authorization_end_date_id=" + authorization_end_date_id);
			sb.append(",service_program=" + service_program);
			sb.append(",service_place=" + service_place);
			sb.append(",service_is_sum_and_round=" + String.valueOf(service_is_sum_and_round));
			sb.append(",validate_to_schedules=" + String.valueOf(validate_to_schedules));
			sb.append(",service_minimum_minutes=" + String.valueOf(service_minimum_minutes));
			sb.append(",service_units_per_hour=" + String.valueOf(service_units_per_hour));
			sb.append(",service_max_units_total=" + String.valueOf(service_max_units_total));
			sb.append(",service_auth_max_units_total=" + String.valueOf(service_auth_max_units_total));
			sb.append(",auth_level_validation=" + String.valueOf(auth_level_validation));
			sb.append(",total_units_authorized=" + String.valueOf(total_units_authorized));
			sb.append(",current_rate=" + String.valueOf(current_rate));
			sb.append(",caregiver_id=" + String.valueOf(caregiver_id));
			sb.append(",inv_stg_service_date_id=" + String.valueOf(inv_stg_service_date_id));
			sb.append(",in_schedule_note_service_date_id=" + String.valueOf(in_schedule_note_service_date_id));
			sb.append(",note_date_of_service_id=" + String.valueOf(note_date_of_service_id));
			sb.append(",in_actual_note_service_date_id=" + String.valueOf(in_actual_note_service_date_id));
			sb.append(",schedule_duration=" + String.valueOf(schedule_duration));
			sb.append(",schedule_start_date_id=" + String.valueOf(schedule_start_date_id));
			sb.append(",schedule_end_date_id=" + String.valueOf(schedule_end_date_id));
			sb.append(",schedule_start_time=" + String.valueOf(schedule_start_time));
			sb.append(",schedule_end_time=" + String.valueOf(schedule_end_time));
			sb.append(",schedule_units=" + String.valueOf(schedule_units));
			sb.append(",schedule_status=" + schedule_status);
			sb.append(",actual_start_date_id=" + String.valueOf(actual_start_date_id));
			sb.append(",actual_end_date_id=" + String.valueOf(actual_end_date_id));
			sb.append(",billing_attending_NPI=" + billing_attending_NPI);
			sb.append(",actual_imported=" + String.valueOf(actual_imported));
			sb.append(",actual_hold_pay=" + String.valueOf(actual_hold_pay));
			sb.append(",actual_hold_bill=" + String.valueOf(actual_hold_bill));
			sb.append(",actual_time_sheet_approved=" + String.valueOf(actual_time_sheet_approved));
			sb.append(",actual_note_approved_bl=" + String.valueOf(actual_note_approved_bl));
			sb.append(",actual_note_approved_pr=" + String.valueOf(actual_note_approved_pr));
			sb.append(",actual_status_BL=" + actual_status_BL);
			sb.append(",actual_emp_pay_type=" + actual_emp_pay_type);
			sb.append(",ineligible_for_billing=" + String.valueOf(ineligible_for_billing));
			sb.append(",actual_adjustment=" + String.valueOf(actual_adjustment));
			sb.append(",actual_check_date_id=" + String.valueOf(actual_check_date_id));
			sb.append(",actual_last_check_date_id=" + String.valueOf(actual_last_check_date_id));
			sb.append(",actual_paid=" + String.valueOf(actual_paid));
			sb.append(",ineligible_for_payroll=" + String.valueOf(ineligible_for_payroll));
			sb.append(",actual_invoice_number=" + String.valueOf(actual_invoice_number));
			sb.append(",actual_billed=" + String.valueOf(actual_billed));
			sb.append(",actual_start_time=" + String.valueOf(actual_start_time));
			sb.append(",actual_end_time=" + String.valueOf(actual_end_time));
			sb.append(",actual_units=" + String.valueOf(actual_units));
			sb.append(",actual_duration=" + String.valueOf(actual_duration));
			sb.append(",service_billed_date_id=" + String.valueOf(service_billed_date_id));
			sb.append(",in_process_units_batched=" + String.valueOf(in_process_units_batched));
			sb.append(",note_duration=" + String.valueOf(note_duration));
			sb.append(",note_end_time=" + String.valueOf(note_end_time));
			sb.append(",note_start_time=" + String.valueOf(note_start_time));
			sb.append(",rate_type=" + rate_type);
			sb.append(",first_encounter=" + String.valueOf(first_encounter));
			sb.append(",units_calculated=" + String.valueOf(units_calculated));
			sb.append(",clqnote_has_child=" + String.valueOf(clqnote_has_child));
			sb.append(",missed_shift_id=" + String.valueOf(missed_shift_id));
			sb.append(",missed_shift_units=" + String.valueOf(missed_shift_units));
			sb.append(",billed_units=" + String.valueOf(billed_units));
			sb.append(",transaction_type=" + transaction_type);
			sb.append(",transaction_date_id=" + String.valueOf(transaction_date_id));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();

				/**
				 * [tBigQueryOutput_3_tBQOB begin ] start
				 */

				ok_Hash.put("tBigQueryOutput_3_tBQOB", false);
				start_Hash.put("tBigQueryOutput_3_tBQOB", System.currentTimeMillis());

				currentVirtualComponent = "tBigQueryOutput_3";

				currentComponent = "tBigQueryOutput_3_tBQOB";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row4");
				}

				int tos_count_tBigQueryOutput_3_tBQOB = 0;

				int nb_line_tBigQueryOutput_3_tBQOB = 0;
				String rowSeparator_tBigQueryOutput_3_tBQOB = "\n";
				String fieldSeparator_tBigQueryOutput_3_tBQOB = ",";
				char escapeChar_tBigQueryOutput_3_tBQOB = "\\".charAt(0);
				char textEnclosure_tBigQueryOutput_3_tBQOB = "\"".charAt(0);

				escapeChar_tBigQueryOutput_3_tBQOB = textEnclosure_tBigQueryOutput_3_tBQOB;

				if (escapeChar_tBigQueryOutput_3_tBQOB == '\\') {
				} else if (escapeChar_tBigQueryOutput_3_tBQOB == textEnclosure_tBigQueryOutput_3_tBQOB) {
				} else {
					throw new RuntimeException("The escape mode only support the '\\' or double text enclosure.");
				}

				java.io.File file_tBigQueryOutput_3_tBQOB = new java.io.File(
						"/Applications/TOSDI-8.0.1/studio/workspace/note_data.avro");

				file_tBigQueryOutput_3_tBQOB.getParentFile().mkdirs();

				com.talend.csv.CSVWriter csvWriter_tBigQueryOutput_3_tBQOB = new com.talend.csv.CSVWriter(
						new java.io.BufferedWriter(new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(file_tBigQueryOutput_3_tBQOB, false), "ISO-8859-15")));
				resourceMap.put("csvWriter_tBigQueryOutput_3_tBQOB", csvWriter_tBigQueryOutput_3_tBQOB);
				csvWriter_tBigQueryOutput_3_tBQOB.setSeparator(fieldSeparator_tBigQueryOutput_3_tBQOB.charAt(0));

				csvWriter_tBigQueryOutput_3_tBQOB.setLineEnd(rowSeparator_tBigQueryOutput_3_tBQOB);
				csvWriter_tBigQueryOutput_3_tBQOB.setEscapeChar(escapeChar_tBigQueryOutput_3_tBQOB);
				csvWriter_tBigQueryOutput_3_tBQOB.setQuoteChar(textEnclosure_tBigQueryOutput_3_tBQOB);
				csvWriter_tBigQueryOutput_3_tBQOB.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.AUTO);

				/**
				 * [tBigQueryOutput_3_tBQOB begin ] stop
				 */

				/**
				 * [tDBInput_3 begin ] start
				 */

				ok_Hash.put("tDBInput_3", false);
				start_Hash.put("tDBInput_3", System.currentTimeMillis());

				currentComponent = "tDBInput_3";

				int tos_count_tDBInput_3 = 0;

				int nb_line_tDBInput_3 = 0;
				java.sql.Connection conn_tDBInput_3 = null;
				String driverClass_tDBInput_3 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBInput_3 = java.lang.Class.forName(driverClass_tDBInput_3);
				String dbUser_tDBInput_3 = "datafusion";

				final String decryptedPassword_tDBInput_3 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:Hf8QIYhCmcjS1VNt/4F+c1Gl/3nbKf6oelkTAYv0q0pkMY+BT0I=");

				String dbPwd_tDBInput_3 = decryptedPassword_tDBInput_3;

				String url_tDBInput_3 = "jdbc:postgresql://" + "localhost" + ":" + "5431" + "/" + "OnTarget" + "?"
						+ "currentSchema=smallmiracle";

				conn_tDBInput_3 = java.sql.DriverManager.getConnection(url_tDBInput_3, dbUser_tDBInput_3,
						dbPwd_tDBInput_3);

				conn_tDBInput_3.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

				String dbquery_tDBInput_3 = "WITH schoolstatus AS (\nSELECT schoolyear.schooldistrictid AS schooldistrict,n.date\nFROM smallmiracle.schoolyear\nJOIN sm"
						+ "allmiracle.nonschoolday n ON schoolyear.id = n.schoolyearid\nGROUP BY schoolyear.schooldistrictid, n.date\n), base as(\nsel"
						+ "ect auth.id as Authorization_ID,authd.id as Authorized_ID,\nauth.ClientID as Client_ID,e.id as Employee_ID,dept.id as Dep"
						+ "artment_ID,cc.Id as Client_Cost_Center_ID,empCostCenter.id as Emp_Cost_Center_ID,\ncc_service.ID as Service_Cost_Center_I"
						+ "D,facility.ID as site_id,\ncase when auth.approved then 'a' else 'u' end as Service_Authorization_Approval,\nto_char(date("
						+ "auth.enddate),'YYYYMMDD') as Service_Authorization_Date_ID,\ncase when auth.EndDate<current_date then 'e' else 'u' end as"
						+ " Service_Authorization_Expired,\nauth.description as Service_Authorization_Description,\n'Abound Health, LLC' as company_n"
						+ "ame,\nBLServiceMaster.ServiceAbbreviation AS svcabbreviation,\nBLServiceMaster.ServiceCode AS svccode,\nto_char(date(authd."
						+ "startdate),'YYYYMMDD') as Authorized_Start_Date_ID,\nto_char(date(authd.enddate),'YYYYMMDD') as Authorized_End_Date_ID,\nt"
						+ "o_char(date(auth.startdate),'YYYYMMDD') as Authorization_Start_Date_ID,\nto_char(date(auth.startdate),'YYYYMMDD') as Auth"
						+ "orization_End_Date_ID,\ncoalesce(GLProgramCode.Description,'') AS Service_Program,\np.id as AR_Payer_ID,\np.OverrideNU AS P"
						+ "ayer_Override,\nBLServiceState.Eligible4Billing,\nBLServiceState.Eligible4Payroll,\nBLServiceMaster.RateType,\nauthd.BLServi"
						+ "cePayerID,\nBLServiceLocation.Code AS Service_Place,\nfn_isservicesumandround(authd.id)::int as Service_Is_Sum_And_Round,\n"
						+ "BLServiceState.validatetoschedules::int as Validate_To_Schedules,\ncoalesce(BLServiceMaster.MinimumMinutes,0) as Service_"
						+ "Minimum_Minutes,\nBLServiceMaster.UnitsPerHour as Service_Units_Per_Hour,\ncoalesce(authd.maxunitstotal,0) as Service_Max_"
						+ "Units_Total,\ncoalesce(auth.maxunitstotal,0) as Service_Auth_Max_Units_Total,\nauth.AuthLevelValidation as Auth_Level_Vali"
						+ "dation,\nCASE WHEN auth.AuthLevelValidation THEN COALESCE(auth.MaxUnitsTotal, 0) ELSE COALESCE(authd.MaxUnitsTotal, 0) en"
						+ "d as Total_Units_Authorized,\nc.schooldistrictid as school_district_id\nfrom BLServiceAuthorization auth \ninner join BLSer"
						+ "viceAuthorized authd on auth.ID=authd.blserviceauthorizationid \nINNER JOIN BLServicePayer ON authd.BLServicePayerID = BL"
						+ "ServicePayer.ID\nINNER JOIN BLServiceState ON BLServicePayer.BLStateServiceID = BLServiceState.ID\nLEFT JOIN GLProgramCode"
						+ " ON BLServiceState.GLProgramCodeID = GLProgramCode.ID\nINNER JOIN BLServiceMaster ON BLServiceState.BLServiceMasterID = B"
						+ "LServiceMaster.ID\ninner join clclient c on c.id=auth.clientid\nLEFT JOIN PREmployee e ON c.PREmployeeID = e.ID\nLEFT JOIN "
						+ "prempdemo PRD ON PRD.PREmployeeID = e.ID\nLEFT JOIN prbusdepartment dept on PRD.prbusdepartmentid = dept.id\nLEFT JOIN PRB"
						+ "usCostCenter cc ON c.PRBusCostCenterID = cc.ID\nLEFT JOIN prbuscostcenter cc_service ON authd.PRBusCostCenterID = cc_serv"
						+ "ice.ID\nleft outer join PRBusCostCenter as empCostCenter on prd.PRBusCostCenterID = empCostCenter.ID\nINNER JOIN arpayer p"
						+ " ON auth.ARPayerID = p.ID\nINNER JOIN BLServiceLocation ON authd.BLServiceLocationID = BLServiceLocation.ID\nleft outer jo"
						+ "in FCFacility as facility on authd.FCFacilityID = facility.ID  \n)\nselect coalesce(cast(base.client_id as int),-1) as cli"
						+ "ent_id,\ncoalesce(cast(base.employee_id as int),-1) as Supervisor_id,\ncoalesce(cast(base.client_cost_center_id as int),-1"
						+ ") as client_cost_center_id,\ncoalesce(cast(base.Emp_Cost_Center_ID as int),-1) as Employee_Cost_Center_ID,\ncoalesce(cast("
						+ "base.employee_id as int),-1) as employee_id,\ncoalesce(cast(base.AR_Payer_ID as int),-1) as ar_payer_id,\ncoalesce(cast(ba"
						+ "se.department_id as int),-1) as department_id,\ncoalesce(cast(base.service_cost_center_id as int),-1) as service_cost_cen"
						+ "ter_id,\ncoalesce(cast(base.site_id as int),-1) as site_id,\ncoalesce(cast(schoolstatus.schooldistrict as int),-1) as scho"
						+ "ol_district_id,\nbase.Authorization_ID,base.authorized_id,\nbase.Service_Authorization_Approval,base.Service_Authorization"
						+ "_Date_ID,base.Service_Authorization_Expired,base.Service_Authorization_Description,\nbase.company_name,base.svcabbreviati"
						+ "on as service_abbreviation,base.svccode as service_code,base.Authorized_Start_Date_ID,base.Authorized_End_Date_ID,\nbase."
						+ "Authorization_Start_Date_ID,base.Authorization_End_Date_ID,base.Service_Program,base.Service_Place,base.Service_Is_Sum_A"
						+ "nd_Round,base.Validate_To_Schedules,\nbase.Service_Minimum_Minutes,base.Service_Units_Per_Hour,base.Service_Max_Units_Tot"
						+ "al,base.Service_Auth_Max_Units_Total,base.Auth_Level_Validation,\nbase.total_units_authorized,coalesce(fn_getcurrate(base"
						+ ".authorized_id),0) as current_rate,\ncoalesce(actual.premployeeid,-1) as caregiver_id,\ncoalesce(cast(to_char(date(stg.ser"
						+ "vicedate),'YYYYMMDD') as int),-1) as inv_stg_service_date_id,\ncoalesce(cast(to_char(date(clqnote.dateofservice),'YYYYMMD"
						+ "D') as int),-1) as note_date_of_service_id,\ncase when schedule.id is not null then coalesce(cast(to_char(date(clqnote.da"
						+ "teofservice),'YYYYMMDD') as int),-1) else cast(-1 as int) end as in_schedule_note_service_date_id,\ncase when actual.id i"
						+ "s not null then coalesce(cast(to_char(date(clqnote.dateofservice),'YYYYMMDD') as int),-1) else cast(-1 as int) end as in"
						+ "_actual_note_service_date_id,\ncoalesce(schedule.duration,TO_TIMESTAMP('1900-01-01 00:00:00','YYYY-MM-DD HH24:MI:SS')) as"
						+ " schedule_duration,coalesce(cast(to_char(date(schedule.startdate),'YYYYMMDD') as int),-1) as schedule_start_date_id,\ncoa"
						+ "lesce(cast(to_char(date(schedule.enddate),'YYYYMMDD') as int),-1) as schedule_end_date_id,\ncoalesce(schedule.starttime,T"
						+ "O_TIMESTAMP('1900-01-01 00:00:00','YYYY-MM-DD HH24:MI:SS')) as schedule_start_time, \ncoalesce(schedule.endtime,TO_TIMEST"
						+ "AMP('1900-01-01 00:00:00','YYYY-MM-DD HH24:MI:SS')) as schedule_end_time,\ncoalesce(schedule.units,0) as schedule_units,C"
						+ "OALESCE(status.description, '') AS schedule_status,\ncoalesce(cast(to_char(date(actual.startdate),'YYYYMMDD') as int),-1)"
						+ " as actual_start_date_id,\ncoalesce(cast(to_char(date(actual.enddate),'YYYYMMDD') as int),-1) as actual_end_date_id, \nfor"
						+ "mat('%s / %s', p_op_billingnpi, p_op_attendingnpi) as billing_attending_NPI,\nactual.CLQNoteID is not null or actual.BLTi"
						+ "meScheduleID is not null as actual_imported,\ncoalesce(actual.holdpay,false) as actual_hold_pay,\ncoalesce(actual.holdbill"
						+ ",false) as actual_hold_bill,\ntimesheet.ApprovedDate is not null as actual_time_sheet_Approved,\ncase when actual.id is no"
						+ "t null then clqnote.ApprovedDate is not null else false end as actual_note_approved_bl,\ncase when actual.id is not null "
						+ "then clqnote.ApprovedDatePR is not null else false end as actual_note_approved_pr,\nCASE \n	when NOT invoice.Voided AND in"
						+ "voice.ClaimReferenceNumber IS NULL AND actual.IsCurrent\n		AND actual.BLInvoiceLineID IS NULL AND NOT actual.Billed AND N"
						+ "OT base.payer_override AND base.Eligible4Billing AND base.RateType = 'P' then 'BLOCKED'\n	when (actual.CLQNoteID is not n"
						+ "ull and (case when actual.id is not null then clqnote.ApprovedDate is null else true end OR case when actual.id is not n"
						+ "ull then clqnote.ApprovedDate else null end > actual.DateEdited)) and (actual.BLInvoiceLineID is not null and invoice.Ba"
						+ "tchConfirmedDate is not null\n    	and (invoice.ClaimReferenceNumber is null OR (invoice.ClaimReferenceNumber is not null"
						+ " and invoice.BLInvoiceIdReplaced IS NOT NULL AND NOT EXISTS (SELECT 1 FROM ARPayment arpaymentinner WHERE arpaymentinner"
						+ ".blinvoicelineid = invline.id AND arpaymentinner.referenceNumber IS NOT NULL))))\n        and (actual.units <> case when "
						+ "actual.id is not null then clqnote.unitsCalculated else null end or actual.BLServiceAuthorizedID <> case when actual.id "
						+ "is not null then clqnote.BLServiceAuthorizedID else null end) then 'BLOCKED'\n    when (actual.CLQNoteID is not null and "
						+ "(case when actual.id is not null then clqnote.ApprovedDate is null else true end OR case when actual.id is not null then"
						+ " clqnote.ApprovedDate else null end > actual.DateEdited)) then 'REVISION'\n    else 'OK' END as actual_status_BL,\ncoalesc"
						+ "e(busPayType.description,'') as actual_emp_pay_type,\nNOT (actual.BLServiceAuthorizedID is null or base.BLServicePayerID "
						+ "is null or (base.Eligible4Billing is null or base.Eligible4Billing)) as ineligible_For_Billing,\nIsAdjustment as actual_a"
						+ "djustment,coalesce(cast(to_char(date(prCheck.CheckDate),'YYYYMMDD') as int),-1) as actual_check_Date_ID,\ncoalesce(cast(t"
						+ "o_char(date(LastCheckDate),'YYYYMMDD') as int),-1) as actual_last_Check_Date_id,coalesce(actual.paid,false) as actual_pa"
						+ "id,\nNOT (actual.BLServiceAuthorizedID is null or base.BLServicePayerID is null or (base.Eligible4Billing is null or base"
						+ ".Eligible4Payroll)) as ineligible_For_Payroll,\ncoalesce(invoice.InvoiceNumber,-1) as actual_invoice_Number,coalesce(actu"
						+ "al.Billed,false) as actual_billed,coalesce(actual.starttime,TO_TIMESTAMP('1900-01-01 00:00:00','YYYY-MM-DD HH24:MI:SS'))"
						+ " as actual_start_time, \ncoalesce(actual.endtime,TO_TIMESTAMP('1900-01-01 00:00:00','YYYY-MM-DD HH24:MI:SS')) as actual_e"
						+ "nd_time,\ncoalesce(actual.Units, 0) as actual_units,coalesce(actual.duration,TO_TIMESTAMP('1900-01-01 00:00:00','YYYY-MM-"
						+ "DD HH24:MI:SS')) as actual_duration,\ncoalesce(cast(to_char(date(invline.servicedate),'YYYYMMDD') as int),-1) as service_"
						+ "billed_date_id,coalesce(stg.quantity,0) as in_process_units_batched,\ncoalesce(clqnote.duration,TO_TIMESTAMP('1900-01-01 "
						+ "00:00:00','YYYY-MM-DD HH24:MI:SS')) as note_duration,\ncoalesce(clqnote.endtime,TO_TIMESTAMP('1900-01-01 00:00:00','YYYY-"
						+ "MM-DD HH24:MI:SS')) as note_end_time,\ncoalesce(clqnote.starttime,TO_TIMESTAMP('1900-01-01 00:00:00','YYYY-MM-DD HH24:MI:"
						+ "SS')) as note_start_time,\nbase.ratetype as rate_type,\ncoalesce(clqnote.firstencounter,false) as first_encounter,\ncoalesc"
						+ "e(clqnote.unitscalculated,0) as units_calculated,\nclqnote_child.id is not null as clqnote_has_child,\ncoalesce(schedule.M"
						+ "issedShiftID,-1) as missed_shift_ID,\ncoalesce(schedule.MissedShiftUnits,0) as missed_shift_units,\ncoalesce(invline.quant"
						+ "ity,0) as billed_units,\ncast('N' as varchar(1)) as Transaction_type,\ncoalesce(cast(to_char(date(clqnote.dateofservice),'"
						+ "YYYYMMDD') as int),-1) as Transaction_date_id\nfrom base\nleft join clqnote on base.authorized_id=clqnote.blserviceauthori"
						+ "zedid\nleft join bltimeschedule schedule on clqnote.bltimescheduleid=schedule.id \nLEFT JOIN bltimeschedulestatus status O"
						+ "N schedule.bltimeschedulestatusid = status.id\nleft join schoolstatus on base.school_district_id = schoolstatus.schooldis"
						+ "trict AND schoolstatus.date = schedule.startdate \nLEFT JOIN BLTimeActual actual ON actual.clqnoteid=clqnote.id\nleft join"
						+ " clqnote as clqnote_child on clqnote.id=clqnote_child.clqnoteidparent \nleft join blinvoicelinestaged stg on actual.id=st"
						+ "g.bltimeactualid \nleft join blinvoiceline invline on invline.id=actual.blinvoicelineid \nleft outer join BLInvoice as inv"
						+ "oice on invline.BLInvoiceID = invoice.ID \nleft outer join PRTimesheet as timesheet on actual.PRTimesheetID = timesheet.I"
						+ "D \nleft outer join PREmpPayType as empPayType on actual.PREmpPayTypeID = empPayType.ID \nleft outer join PRBusPayType as "
						+ "busPayType on empPayType.PRBusPayTypeID = busPayType.ID \nleft outer join PREmpPayTran as empPayTran on actual.PREmpPayTr"
						+ "anID = empPayTran.ID \nleft outer join PRCheck as prCheck on empPayTran.PRCheckID = prCheck.ID \ncross join up_findlastche"
						+ "ckdtandadjstflag(actual.id) \ncross join fn_getbillingattendingnpisselect(null, actual.id) \nwhere base.Authorized_id in "
						+ context.ServiceID;

				globalMap.put("tDBInput_3_QUERY", dbquery_tDBInput_3);
				java.sql.ResultSet rs_tDBInput_3 = null;

				try {
					rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
					java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
					int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

					String tmpContent_tDBInput_3 = null;

					while (rs_tDBInput_3.next()) {
						nb_line_tDBInput_3++;

						if (colQtyInRs_tDBInput_3 < 1) {
							row4.client_id = null;
						} else {

							row4.client_id = rs_tDBInput_3.getInt(1);
							if (rs_tDBInput_3.wasNull()) {
								row4.client_id = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 2) {
							row4.supervisor_id = null;
						} else {

							row4.supervisor_id = rs_tDBInput_3.getInt(2);
							if (rs_tDBInput_3.wasNull()) {
								row4.supervisor_id = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 3) {
							row4.client_cost_center_id = null;
						} else {

							row4.client_cost_center_id = rs_tDBInput_3.getInt(3);
							if (rs_tDBInput_3.wasNull()) {
								row4.client_cost_center_id = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 4) {
							row4.employee_cost_center_id = null;
						} else {

							row4.employee_cost_center_id = rs_tDBInput_3.getInt(4);
							if (rs_tDBInput_3.wasNull()) {
								row4.employee_cost_center_id = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 5) {
							row4.employee_id = null;
						} else {

							row4.employee_id = rs_tDBInput_3.getInt(5);
							if (rs_tDBInput_3.wasNull()) {
								row4.employee_id = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 6) {
							row4.ar_payer_id = null;
						} else {

							row4.ar_payer_id = rs_tDBInput_3.getInt(6);
							if (rs_tDBInput_3.wasNull()) {
								row4.ar_payer_id = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 7) {
							row4.department_id = null;
						} else {

							row4.department_id = rs_tDBInput_3.getInt(7);
							if (rs_tDBInput_3.wasNull()) {
								row4.department_id = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 8) {
							row4.service_cost_center_id = null;
						} else {

							row4.service_cost_center_id = rs_tDBInput_3.getInt(8);
							if (rs_tDBInput_3.wasNull()) {
								row4.service_cost_center_id = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 9) {
							row4.site_id = null;
						} else {

							row4.site_id = rs_tDBInput_3.getInt(9);
							if (rs_tDBInput_3.wasNull()) {
								row4.site_id = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 10) {
							row4.school_district_id = null;
						} else {

							row4.school_district_id = rs_tDBInput_3.getInt(10);
							if (rs_tDBInput_3.wasNull()) {
								row4.school_district_id = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 11) {
							row4.authorization_id = null;
						} else {

							row4.authorization_id = rs_tDBInput_3.getInt(11);
							if (rs_tDBInput_3.wasNull()) {
								row4.authorization_id = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 12) {
							row4.authorized_id = null;
						} else {

							row4.authorized_id = rs_tDBInput_3.getInt(12);
							if (rs_tDBInput_3.wasNull()) {
								row4.authorized_id = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 13) {
							row4.service_authorization_approval = null;
						} else {

							row4.service_authorization_approval = routines.system.JDBCUtil.getString(rs_tDBInput_3, 13,
									false);
						}
						if (colQtyInRs_tDBInput_3 < 14) {
							row4.service_authorization_date_id = null;
						} else {

							row4.service_authorization_date_id = routines.system.JDBCUtil.getString(rs_tDBInput_3, 14,
									false);
						}
						if (colQtyInRs_tDBInput_3 < 15) {
							row4.Service_Authorization_Expired = null;
						} else {

							row4.Service_Authorization_Expired = routines.system.JDBCUtil.getString(rs_tDBInput_3, 15,
									false);
						}
						if (colQtyInRs_tDBInput_3 < 16) {
							row4.service_authorization_description = null;
						} else {

							row4.service_authorization_description = routines.system.JDBCUtil.getString(rs_tDBInput_3,
									16, false);
						}
						if (colQtyInRs_tDBInput_3 < 17) {
							row4.company_name = null;
						} else {

							row4.company_name = routines.system.JDBCUtil.getString(rs_tDBInput_3, 17, false);
						}
						if (colQtyInRs_tDBInput_3 < 18) {
							row4.service_abbreviation = null;
						} else {

							row4.service_abbreviation = routines.system.JDBCUtil.getString(rs_tDBInput_3, 18, false);
						}
						if (colQtyInRs_tDBInput_3 < 19) {
							row4.service_code = null;
						} else {

							row4.service_code = routines.system.JDBCUtil.getString(rs_tDBInput_3, 19, false);
						}
						if (colQtyInRs_tDBInput_3 < 20) {
							row4.authorized_start_date_id = null;
						} else {

							row4.authorized_start_date_id = routines.system.JDBCUtil.getString(rs_tDBInput_3, 20,
									false);
						}
						if (colQtyInRs_tDBInput_3 < 21) {
							row4.authorized_end_date_id = null;
						} else {

							row4.authorized_end_date_id = routines.system.JDBCUtil.getString(rs_tDBInput_3, 21, false);
						}
						if (colQtyInRs_tDBInput_3 < 22) {
							row4.authorization_start_date_id = null;
						} else {

							row4.authorization_start_date_id = routines.system.JDBCUtil.getString(rs_tDBInput_3, 22,
									false);
						}
						if (colQtyInRs_tDBInput_3 < 23) {
							row4.authorization_end_date_id = null;
						} else {

							row4.authorization_end_date_id = routines.system.JDBCUtil.getString(rs_tDBInput_3, 23,
									false);
						}
						if (colQtyInRs_tDBInput_3 < 24) {
							row4.service_program = null;
						} else {

							row4.service_program = routines.system.JDBCUtil.getString(rs_tDBInput_3, 24, false);
						}
						if (colQtyInRs_tDBInput_3 < 25) {
							row4.service_place = null;
						} else {

							row4.service_place = routines.system.JDBCUtil.getString(rs_tDBInput_3, 25, false);
						}
						if (colQtyInRs_tDBInput_3 < 26) {
							row4.service_is_sum_and_round = null;
						} else {

							row4.service_is_sum_and_round = rs_tDBInput_3.getInt(26);
							if (rs_tDBInput_3.wasNull()) {
								row4.service_is_sum_and_round = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 27) {
							row4.validate_to_schedules = null;
						} else {

							row4.validate_to_schedules = rs_tDBInput_3.getInt(27);
							if (rs_tDBInput_3.wasNull()) {
								row4.validate_to_schedules = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 28) {
							row4.service_minimum_minutes = null;
						} else {

							row4.service_minimum_minutes = rs_tDBInput_3.getInt(28);
							if (rs_tDBInput_3.wasNull()) {
								row4.service_minimum_minutes = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 29) {
							row4.service_units_per_hour = null;
						} else {

							row4.service_units_per_hour = rs_tDBInput_3.getInt(29);
							if (rs_tDBInput_3.wasNull()) {
								row4.service_units_per_hour = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 30) {
							row4.service_max_units_total = null;
						} else {

							row4.service_max_units_total = rs_tDBInput_3.getInt(30);
							if (rs_tDBInput_3.wasNull()) {
								row4.service_max_units_total = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 31) {
							row4.service_auth_max_units_total = null;
						} else {

							row4.service_auth_max_units_total = rs_tDBInput_3.getInt(31);
							if (rs_tDBInput_3.wasNull()) {
								row4.service_auth_max_units_total = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 32) {
							row4.auth_level_validation = null;
						} else {

							row4.auth_level_validation = rs_tDBInput_3.getBoolean(32);
							if (rs_tDBInput_3.wasNull()) {
								row4.auth_level_validation = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 33) {
							row4.total_units_authorized = null;
						} else {

							row4.total_units_authorized = rs_tDBInput_3.getInt(33);
							if (rs_tDBInput_3.wasNull()) {
								row4.total_units_authorized = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 34) {
							row4.current_rate = null;
						} else {

							row4.current_rate = rs_tDBInput_3.getFloat(34);
							if (rs_tDBInput_3.wasNull()) {
								row4.current_rate = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 35) {
							row4.caregiver_id = null;
						} else {

							row4.caregiver_id = rs_tDBInput_3.getInt(35);
							if (rs_tDBInput_3.wasNull()) {
								row4.caregiver_id = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 36) {
							row4.inv_stg_service_date_id = null;
						} else {

							row4.inv_stg_service_date_id = rs_tDBInput_3.getInt(36);
							if (rs_tDBInput_3.wasNull()) {
								row4.inv_stg_service_date_id = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 37) {
							row4.in_schedule_note_service_date_id = null;
						} else {

							row4.in_schedule_note_service_date_id = rs_tDBInput_3.getInt(37);
							if (rs_tDBInput_3.wasNull()) {
								row4.in_schedule_note_service_date_id = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 38) {
							row4.note_date_of_service_id = null;
						} else {

							row4.note_date_of_service_id = rs_tDBInput_3.getInt(38);
							if (rs_tDBInput_3.wasNull()) {
								row4.note_date_of_service_id = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 39) {
							row4.in_actual_note_service_date_id = null;
						} else {

							row4.in_actual_note_service_date_id = rs_tDBInput_3.getInt(39);
							if (rs_tDBInput_3.wasNull()) {
								row4.in_actual_note_service_date_id = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 40) {
							row4.schedule_duration = null;
						} else {

							row4.schedule_duration = routines.system.JDBCUtil.getDate(rs_tDBInput_3, 40);
						}
						if (colQtyInRs_tDBInput_3 < 41) {
							row4.schedule_start_date_id = null;
						} else {

							row4.schedule_start_date_id = rs_tDBInput_3.getInt(41);
							if (rs_tDBInput_3.wasNull()) {
								row4.schedule_start_date_id = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 42) {
							row4.schedule_end_date_id = null;
						} else {

							row4.schedule_end_date_id = rs_tDBInput_3.getInt(42);
							if (rs_tDBInput_3.wasNull()) {
								row4.schedule_end_date_id = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 43) {
							row4.schedule_start_time = null;
						} else {

							row4.schedule_start_time = routines.system.JDBCUtil.getDate(rs_tDBInput_3, 43);
						}
						if (colQtyInRs_tDBInput_3 < 44) {
							row4.schedule_end_time = null;
						} else {

							row4.schedule_end_time = routines.system.JDBCUtil.getDate(rs_tDBInput_3, 44);
						}
						if (colQtyInRs_tDBInput_3 < 45) {
							row4.schedule_units = null;
						} else {

							row4.schedule_units = rs_tDBInput_3.getInt(45);
							if (rs_tDBInput_3.wasNull()) {
								row4.schedule_units = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 46) {
							row4.schedule_status = null;
						} else {

							row4.schedule_status = routines.system.JDBCUtil.getString(rs_tDBInput_3, 46, false);
						}
						if (colQtyInRs_tDBInput_3 < 47) {
							row4.actual_start_date_id = null;
						} else {

							row4.actual_start_date_id = rs_tDBInput_3.getInt(47);
							if (rs_tDBInput_3.wasNull()) {
								row4.actual_start_date_id = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 48) {
							row4.actual_end_date_id = null;
						} else {

							row4.actual_end_date_id = rs_tDBInput_3.getInt(48);
							if (rs_tDBInput_3.wasNull()) {
								row4.actual_end_date_id = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 49) {
							row4.billing_attending_NPI = null;
						} else {

							row4.billing_attending_NPI = routines.system.JDBCUtil.getString(rs_tDBInput_3, 49, false);
						}
						if (colQtyInRs_tDBInput_3 < 50) {
							row4.actual_imported = null;
						} else {

							row4.actual_imported = rs_tDBInput_3.getBoolean(50);
							if (rs_tDBInput_3.wasNull()) {
								row4.actual_imported = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 51) {
							row4.actual_hold_pay = null;
						} else {

							row4.actual_hold_pay = rs_tDBInput_3.getBoolean(51);
							if (rs_tDBInput_3.wasNull()) {
								row4.actual_hold_pay = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 52) {
							row4.actual_hold_bill = null;
						} else {

							row4.actual_hold_bill = rs_tDBInput_3.getBoolean(52);
							if (rs_tDBInput_3.wasNull()) {
								row4.actual_hold_bill = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 53) {
							row4.actual_time_sheet_approved = null;
						} else {

							row4.actual_time_sheet_approved = rs_tDBInput_3.getBoolean(53);
							if (rs_tDBInput_3.wasNull()) {
								row4.actual_time_sheet_approved = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 54) {
							row4.actual_note_approved_bl = null;
						} else {

							row4.actual_note_approved_bl = rs_tDBInput_3.getBoolean(54);
							if (rs_tDBInput_3.wasNull()) {
								row4.actual_note_approved_bl = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 55) {
							row4.actual_note_approved_pr = null;
						} else {

							row4.actual_note_approved_pr = rs_tDBInput_3.getBoolean(55);
							if (rs_tDBInput_3.wasNull()) {
								row4.actual_note_approved_pr = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 56) {
							row4.actual_status_BL = null;
						} else {

							row4.actual_status_BL = routines.system.JDBCUtil.getString(rs_tDBInput_3, 56, false);
						}
						if (colQtyInRs_tDBInput_3 < 57) {
							row4.actual_emp_pay_type = null;
						} else {

							row4.actual_emp_pay_type = routines.system.JDBCUtil.getString(rs_tDBInput_3, 57, false);
						}
						if (colQtyInRs_tDBInput_3 < 58) {
							row4.ineligible_for_billing = null;
						} else {

							row4.ineligible_for_billing = rs_tDBInput_3.getBoolean(58);
							if (rs_tDBInput_3.wasNull()) {
								row4.ineligible_for_billing = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 59) {
							row4.actual_adjustment = null;
						} else {

							row4.actual_adjustment = rs_tDBInput_3.getBoolean(59);
							if (rs_tDBInput_3.wasNull()) {
								row4.actual_adjustment = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 60) {
							row4.actual_check_date_id = null;
						} else {

							row4.actual_check_date_id = rs_tDBInput_3.getInt(60);
							if (rs_tDBInput_3.wasNull()) {
								row4.actual_check_date_id = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 61) {
							row4.actual_last_check_date_id = null;
						} else {

							row4.actual_last_check_date_id = rs_tDBInput_3.getInt(61);
							if (rs_tDBInput_3.wasNull()) {
								row4.actual_last_check_date_id = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 62) {
							row4.actual_paid = null;
						} else {

							row4.actual_paid = rs_tDBInput_3.getBoolean(62);
							if (rs_tDBInput_3.wasNull()) {
								row4.actual_paid = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 63) {
							row4.ineligible_for_payroll = null;
						} else {

							row4.ineligible_for_payroll = rs_tDBInput_3.getBoolean(63);
							if (rs_tDBInput_3.wasNull()) {
								row4.ineligible_for_payroll = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 64) {
							row4.actual_invoice_number = null;
						} else {

							row4.actual_invoice_number = rs_tDBInput_3.getInt(64);
							if (rs_tDBInput_3.wasNull()) {
								row4.actual_invoice_number = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 65) {
							row4.actual_billed = null;
						} else {

							row4.actual_billed = rs_tDBInput_3.getBoolean(65);
							if (rs_tDBInput_3.wasNull()) {
								row4.actual_billed = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 66) {
							row4.actual_start_time = null;
						} else {

							row4.actual_start_time = routines.system.JDBCUtil.getDate(rs_tDBInput_3, 66);
						}
						if (colQtyInRs_tDBInput_3 < 67) {
							row4.actual_end_time = null;
						} else {

							row4.actual_end_time = routines.system.JDBCUtil.getDate(rs_tDBInput_3, 67);
						}
						if (colQtyInRs_tDBInput_3 < 68) {
							row4.actual_units = null;
						} else {

							row4.actual_units = rs_tDBInput_3.getInt(68);
							if (rs_tDBInput_3.wasNull()) {
								row4.actual_units = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 69) {
							row4.actual_duration = null;
						} else {

							row4.actual_duration = routines.system.JDBCUtil.getDate(rs_tDBInput_3, 69);
						}
						if (colQtyInRs_tDBInput_3 < 70) {
							row4.service_billed_date_id = null;
						} else {

							row4.service_billed_date_id = rs_tDBInput_3.getInt(70);
							if (rs_tDBInput_3.wasNull()) {
								row4.service_billed_date_id = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 71) {
							row4.in_process_units_batched = null;
						} else {

							row4.in_process_units_batched = rs_tDBInput_3.getInt(71);
							if (rs_tDBInput_3.wasNull()) {
								row4.in_process_units_batched = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 72) {
							row4.note_duration = null;
						} else {

							row4.note_duration = routines.system.JDBCUtil.getDate(rs_tDBInput_3, 72);
						}
						if (colQtyInRs_tDBInput_3 < 73) {
							row4.note_end_time = null;
						} else {

							row4.note_end_time = routines.system.JDBCUtil.getDate(rs_tDBInput_3, 73);
						}
						if (colQtyInRs_tDBInput_3 < 74) {
							row4.note_start_time = null;
						} else {

							row4.note_start_time = routines.system.JDBCUtil.getDate(rs_tDBInput_3, 74);
						}
						if (colQtyInRs_tDBInput_3 < 75) {
							row4.rate_type = null;
						} else {

							row4.rate_type = routines.system.JDBCUtil.getString(rs_tDBInput_3, 75, false);
						}
						if (colQtyInRs_tDBInput_3 < 76) {
							row4.first_encounter = null;
						} else {

							row4.first_encounter = rs_tDBInput_3.getBoolean(76);
							if (rs_tDBInput_3.wasNull()) {
								row4.first_encounter = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 77) {
							row4.units_calculated = null;
						} else {

							row4.units_calculated = rs_tDBInput_3.getInt(77);
							if (rs_tDBInput_3.wasNull()) {
								row4.units_calculated = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 78) {
							row4.clqnote_has_child = null;
						} else {

							row4.clqnote_has_child = rs_tDBInput_3.getBoolean(78);
							if (rs_tDBInput_3.wasNull()) {
								row4.clqnote_has_child = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 79) {
							row4.missed_shift_id = null;
						} else {

							row4.missed_shift_id = rs_tDBInput_3.getInt(79);
							if (rs_tDBInput_3.wasNull()) {
								row4.missed_shift_id = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 80) {
							row4.missed_shift_units = null;
						} else {

							row4.missed_shift_units = rs_tDBInput_3.getInt(80);
							if (rs_tDBInput_3.wasNull()) {
								row4.missed_shift_units = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 81) {
							row4.billed_units = null;
						} else {

							row4.billed_units = rs_tDBInput_3.getInt(81);
							if (rs_tDBInput_3.wasNull()) {
								row4.billed_units = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 82) {
							row4.transaction_type = null;
						} else {

							row4.transaction_type = routines.system.JDBCUtil.getString(rs_tDBInput_3, 82, false);
						}
						if (colQtyInRs_tDBInput_3 < 83) {
							row4.transaction_date_id = null;
						} else {

							row4.transaction_date_id = rs_tDBInput_3.getInt(83);
							if (rs_tDBInput_3.wasNull()) {
								row4.transaction_date_id = null;
							}
						}

						/**
						 * [tDBInput_3 begin ] stop
						 */

						/**
						 * [tDBInput_3 main ] start
						 */

						currentComponent = "tDBInput_3";

						tos_count_tDBInput_3++;

						/**
						 * [tDBInput_3 main ] stop
						 */

						/**
						 * [tDBInput_3 process_data_begin ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_begin ] stop
						 */

						/**
						 * [tBigQueryOutput_3_tBQOB main ] start
						 */

						currentVirtualComponent = "tBigQueryOutput_3";

						currentComponent = "tBigQueryOutput_3_tBQOB";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row4"

							);
						}

						String[] row_tBigQueryOutput_3_tBQOB = new String[83];
						java.util.Arrays.fill(row_tBigQueryOutput_3_tBQOB, "\\N");

						int curColumnIndex_tBigQueryOutput_3_tBQOB = 0;

						curColumnIndex_tBigQueryOutput_3_tBQOB = 0;

						if (row4.client_id != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = String
									.valueOf(row4.client_id);

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 1;

						if (row4.supervisor_id != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = String
									.valueOf(row4.supervisor_id);

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 2;

						if (row4.client_cost_center_id != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = String
									.valueOf(row4.client_cost_center_id);

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 3;

						if (row4.employee_cost_center_id != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = String
									.valueOf(row4.employee_cost_center_id);

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 4;

						if (row4.employee_id != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = String
									.valueOf(row4.employee_id);

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 5;

						if (row4.ar_payer_id != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = String
									.valueOf(row4.ar_payer_id);

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 6;

						if (row4.department_id != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = String
									.valueOf(row4.department_id);

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 7;

						if (row4.service_cost_center_id != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = String
									.valueOf(row4.service_cost_center_id);

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 8;

						if (row4.site_id != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = String
									.valueOf(row4.site_id);

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 9;

						if (row4.school_district_id != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = String
									.valueOf(row4.school_district_id);

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 10;

						if (row4.authorization_id != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = String
									.valueOf(row4.authorization_id);

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 11;

						if (row4.authorized_id != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = String
									.valueOf(row4.authorized_id);

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 12;

						if (row4.service_authorization_approval != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = row4.service_authorization_approval;

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 13;

						if (row4.service_authorization_date_id != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = row4.service_authorization_date_id;

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 14;

						if (row4.Service_Authorization_Expired != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = row4.Service_Authorization_Expired;

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 15;

						if (row4.service_authorization_description != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = row4.service_authorization_description;

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 16;

						if (row4.company_name != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = row4.company_name;

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 17;

						if (row4.service_abbreviation != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = row4.service_abbreviation;

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 18;

						if (row4.service_code != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = row4.service_code;

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 19;

						if (row4.authorized_start_date_id != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = row4.authorized_start_date_id;

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 20;

						if (row4.authorized_end_date_id != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = row4.authorized_end_date_id;

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 21;

						if (row4.authorization_start_date_id != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = row4.authorization_start_date_id;

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 22;

						if (row4.authorization_end_date_id != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = row4.authorization_end_date_id;

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 23;

						if (row4.service_program != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = row4.service_program;

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 24;

						if (row4.service_place != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = row4.service_place;

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 25;

						if (row4.service_is_sum_and_round != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = String
									.valueOf(row4.service_is_sum_and_round);

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 26;

						if (row4.validate_to_schedules != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = String
									.valueOf(row4.validate_to_schedules);

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 27;

						if (row4.service_minimum_minutes != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = String
									.valueOf(row4.service_minimum_minutes);

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 28;

						if (row4.service_units_per_hour != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = String
									.valueOf(row4.service_units_per_hour);

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 29;

						if (row4.service_max_units_total != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = String
									.valueOf(row4.service_max_units_total);

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 30;

						if (row4.service_auth_max_units_total != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = String
									.valueOf(row4.service_auth_max_units_total);

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 31;

						if (row4.auth_level_validation != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = String
									.valueOf(true == row4.auth_level_validation ? "1" : "0");

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 32;

						if (row4.total_units_authorized != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = String
									.valueOf(row4.total_units_authorized);

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 33;

						if (row4.current_rate != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = String
									.valueOf(row4.current_rate);

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 34;

						if (row4.caregiver_id != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = String
									.valueOf(row4.caregiver_id);

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 35;

						if (row4.inv_stg_service_date_id != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = String
									.valueOf(row4.inv_stg_service_date_id);

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 36;

						if (row4.in_schedule_note_service_date_id != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = String
									.valueOf(row4.in_schedule_note_service_date_id);

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 37;

						if (row4.note_date_of_service_id != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = String
									.valueOf(row4.note_date_of_service_id);

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 38;

						if (row4.in_actual_note_service_date_id != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = String
									.valueOf(row4.in_actual_note_service_date_id);

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 39;

						if (row4.schedule_duration != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = FormatterUtils
									.format_Date(row4.schedule_duration, "yyyy-MM-dd HH:mm:ss");

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 40;

						if (row4.schedule_start_date_id != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = String
									.valueOf(row4.schedule_start_date_id);

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 41;

						if (row4.schedule_end_date_id != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = String
									.valueOf(row4.schedule_end_date_id);

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 42;

						if (row4.schedule_start_time != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = FormatterUtils
									.format_Date(row4.schedule_start_time, "yyyy-MM-dd HH:mm:ss");

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 43;

						if (row4.schedule_end_time != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = FormatterUtils
									.format_Date(row4.schedule_end_time, "yyyy-MM-dd HH:mm:ss");

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 44;

						if (row4.schedule_units != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = String
									.valueOf(row4.schedule_units);

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 45;

						if (row4.schedule_status != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = row4.schedule_status;

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 46;

						if (row4.actual_start_date_id != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = String
									.valueOf(row4.actual_start_date_id);

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 47;

						if (row4.actual_end_date_id != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = String
									.valueOf(row4.actual_end_date_id);

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 48;

						if (row4.billing_attending_NPI != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = row4.billing_attending_NPI;

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 49;

						if (row4.actual_imported != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = String
									.valueOf(true == row4.actual_imported ? "1" : "0");

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 50;

						if (row4.actual_hold_pay != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = String
									.valueOf(true == row4.actual_hold_pay ? "1" : "0");

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 51;

						if (row4.actual_hold_bill != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = String
									.valueOf(true == row4.actual_hold_bill ? "1" : "0");

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 52;

						if (row4.actual_time_sheet_approved != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = String
									.valueOf(true == row4.actual_time_sheet_approved ? "1" : "0");

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 53;

						if (row4.actual_note_approved_bl != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = String
									.valueOf(true == row4.actual_note_approved_bl ? "1" : "0");

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 54;

						if (row4.actual_note_approved_pr != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = String
									.valueOf(true == row4.actual_note_approved_pr ? "1" : "0");

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 55;

						if (row4.actual_status_BL != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = row4.actual_status_BL;

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 56;

						if (row4.actual_emp_pay_type != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = row4.actual_emp_pay_type;

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 57;

						if (row4.ineligible_for_billing != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = String
									.valueOf(true == row4.ineligible_for_billing ? "1" : "0");

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 58;

						if (row4.actual_adjustment != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = String
									.valueOf(true == row4.actual_adjustment ? "1" : "0");

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 59;

						if (row4.actual_check_date_id != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = String
									.valueOf(row4.actual_check_date_id);

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 60;

						if (row4.actual_last_check_date_id != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = String
									.valueOf(row4.actual_last_check_date_id);

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 61;

						if (row4.actual_paid != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = String
									.valueOf(true == row4.actual_paid ? "1" : "0");

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 62;

						if (row4.ineligible_for_payroll != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = String
									.valueOf(true == row4.ineligible_for_payroll ? "1" : "0");

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 63;

						if (row4.actual_invoice_number != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = String
									.valueOf(row4.actual_invoice_number);

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 64;

						if (row4.actual_billed != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = String
									.valueOf(true == row4.actual_billed ? "1" : "0");

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 65;

						if (row4.actual_start_time != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = FormatterUtils
									.format_Date(row4.actual_start_time, "yyyy-MM-dd HH:mm:ss");

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 66;

						if (row4.actual_end_time != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = FormatterUtils
									.format_Date(row4.actual_end_time, "yyyy-MM-dd HH:mm:ss");

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 67;

						if (row4.actual_units != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = String
									.valueOf(row4.actual_units);

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 68;

						if (row4.actual_duration != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = FormatterUtils
									.format_Date(row4.actual_duration, "yyyy-MM-dd HH:mm:ss");

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 69;

						if (row4.service_billed_date_id != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = String
									.valueOf(row4.service_billed_date_id);

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 70;

						if (row4.in_process_units_batched != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = String
									.valueOf(row4.in_process_units_batched);

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 71;

						if (row4.note_duration != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = FormatterUtils
									.format_Date(row4.note_duration, "yyyy-MM-dd HH:mm:ss");

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 72;

						if (row4.note_end_time != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = FormatterUtils
									.format_Date(row4.note_end_time, "yyyy-MM-dd HH:mm:ss");

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 73;

						if (row4.note_start_time != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = FormatterUtils
									.format_Date(row4.note_start_time, "yyyy-MM-dd HH:mm:ss");

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 74;

						if (row4.rate_type != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = row4.rate_type;

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 75;

						if (row4.first_encounter != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = String
									.valueOf(true == row4.first_encounter ? "1" : "0");

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 76;

						if (row4.units_calculated != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = String
									.valueOf(row4.units_calculated);

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 77;

						if (row4.clqnote_has_child != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = String
									.valueOf(true == row4.clqnote_has_child ? "1" : "0");

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 78;

						if (row4.missed_shift_id != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = String
									.valueOf(row4.missed_shift_id);

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 79;

						if (row4.missed_shift_units != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = String
									.valueOf(row4.missed_shift_units);

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 80;

						if (row4.billed_units != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = String
									.valueOf(row4.billed_units);

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 81;

						if (row4.transaction_type != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = row4.transaction_type;

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 82;

						if (row4.transaction_date_id != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = String
									.valueOf(row4.transaction_date_id);

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						csvWriter_tBigQueryOutput_3_tBQOB.writeNextEnhance(row_tBigQueryOutput_3_tBQOB, "");
						nb_line_tBigQueryOutput_3_tBQOB++;

						tos_count_tBigQueryOutput_3_tBQOB++;

						/**
						 * [tBigQueryOutput_3_tBQOB main ] stop
						 */

						/**
						 * [tBigQueryOutput_3_tBQOB process_data_begin ] start
						 */

						currentVirtualComponent = "tBigQueryOutput_3";

						currentComponent = "tBigQueryOutput_3_tBQOB";

						/**
						 * [tBigQueryOutput_3_tBQOB process_data_begin ] stop
						 */

						/**
						 * [tBigQueryOutput_3_tBQOB process_data_end ] start
						 */

						currentVirtualComponent = "tBigQueryOutput_3";

						currentComponent = "tBigQueryOutput_3_tBQOB";

						/**
						 * [tBigQueryOutput_3_tBQOB process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 process_data_end ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 end ] start
						 */

						currentComponent = "tDBInput_3";

					}
				} finally {
					if (rs_tDBInput_3 != null) {
						rs_tDBInput_3.close();
					}
					if (stmt_tDBInput_3 != null) {
						stmt_tDBInput_3.close();
					}
					if (conn_tDBInput_3 != null && !conn_tDBInput_3.isClosed()) {

						conn_tDBInput_3.commit();

						conn_tDBInput_3.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}
				globalMap.put("tDBInput_3_NB_LINE", nb_line_tDBInput_3);

				ok_Hash.put("tDBInput_3", true);
				end_Hash.put("tDBInput_3", System.currentTimeMillis());

				/**
				 * [tDBInput_3 end ] stop
				 */

				/**
				 * [tBigQueryOutput_3_tBQOB end ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_3";

				currentComponent = "tBigQueryOutput_3_tBQOB";

				if (csvWriter_tBigQueryOutput_3_tBQOB != null) {
					csvWriter_tBigQueryOutput_3_tBQOB.close();
				}
				resourceMap.put("finish_tBigQueryOutput_3_tBQOB", true);
				globalMap.put("tBigQueryOutput_3_tBQOB_NB_LINE", nb_line_tBigQueryOutput_3_tBQOB);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row4");
				}

				ok_Hash.put("tBigQueryOutput_3_tBQOB", true);
				end_Hash.put("tBigQueryOutput_3_tBQOB", System.currentTimeMillis());

				/**
				 * [tBigQueryOutput_3_tBQOB end ] stop
				 */

				/**
				 * [tBigQueryOutput_3_tBQBE begin ] start
				 */

				ok_Hash.put("tBigQueryOutput_3_tBQBE", false);
				start_Hash.put("tBigQueryOutput_3_tBQBE", System.currentTimeMillis());

				currentVirtualComponent = "tBigQueryOutput_3";

				currentComponent = "tBigQueryOutput_3_tBQBE";

				int tos_count_tBigQueryOutput_3_tBQBE = 0;

				/* ----START-CREATING-CLIENT (Cloud API)---- */

				com.google.auth.oauth2.GoogleCredentials credentials_tBigQueryOutput_3;
				java.io.File credentialsFile_tBigQueryOutput_3 = new java.io.File(
						"/Users/jsun/Documents/WCIWork/OnTarget/code/otmirror-060322-9471bb896012.json");
				try (java.io.FileInputStream credentialsStream_tBigQueryOutput_3 = new java.io.FileInputStream(
						credentialsFile_tBigQueryOutput_3)) {
					credentials_tBigQueryOutput_3 = com.google.auth.oauth2.ServiceAccountCredentials
							.fromStream(credentialsStream_tBigQueryOutput_3);
				}

				com.google.cloud.bigquery.BigQuery bigquery_tBigQueryOutput_3 = com.google.cloud.bigquery.BigQueryOptions
						.newBuilder().setCredentials(credentials_tBigQueryOutput_3).setProjectId("otmirror-060322")
						.build().getService();

				/* ----END-CREATING-CLIENT (Cloud API)---- */

				long nb_line_tBigQueryOutput_3 = 0;

				com.google.auth.Credentials credential_tBigQueryOutput_3 = null;
				try {
					credential_tBigQueryOutput_3 = com.google.auth.oauth2.GoogleCredentials
							.fromStream(new java.io.FileInputStream(
									"/Users/jsun/Documents/WCIWork/OnTarget/code/otmirror-060322-9471bb896012.json"));
				} catch (IOException e_tBigQueryOutput_3) {
					globalMap.put("tBigQueryOutput_3_ERROR_MESSAGE", e_tBigQueryOutput_3.getMessage());
				}
				com.google.cloud.storage.Storage storage_tBigQueryOutput_3 = com.google.cloud.storage.StorageOptions
						.newBuilder().setCredentials(credential_tBigQueryOutput_3).build().getService();

				java.io.File file_tBigQueryOutput_3 = new java.io.File(
						"/Applications/TOSDI-8.0.1/studio/workspace/note_data.avro");

				com.google.cloud.storage.BlobInfo blobInfo_tBigQueryOutput_3 = com.google.cloud.storage.BlobInfo
						.newBuilder("dw-tmp", file_tBigQueryOutput_3.getName()).build();
				storage_tBigQueryOutput_3.create(blobInfo_tBigQueryOutput_3,
						java.nio.file.Files.readAllBytes(file_tBigQueryOutput_3.toPath()));

				/* ----END-UPLOADING-FILE---- */

				/* ----START-CREATING-JOB (Cloud API)---- */
				com.google.cloud.bigquery.TableId tableId_tBigQueryOutput_3 = com.google.cloud.bigquery.TableId
						.of("otmirror-060322", "DW", "fact_transactions");
				com.google.cloud.bigquery.LoadJobConfiguration.Builder loadJobBuilder_tBigQueryOutput_3 = com.google.cloud.bigquery.LoadJobConfiguration
						.newBuilder(tableId_tBigQueryOutput_3, "gs://dw-tmp/note_data.avro");

				boolean dropTable_tBigQueryOutput_3 = false;

				if (dropTable_tBigQueryOutput_3
						&& bigquery_tBigQueryOutput_3.getTable(tableId_tBigQueryOutput_3) != null) {
					boolean deleted = bigquery_tBigQueryOutput_3.delete(tableId_tBigQueryOutput_3);
					if (deleted) {

					} else {
						throw new RuntimeException("Unable to delete table " + tableId_tBigQueryOutput_3);
					}
				}

				if (bigquery_tBigQueryOutput_3.getTable(tableId_tBigQueryOutput_3) == null) {
					java.util.List<com.google.cloud.bigquery.Field> fields_tBigQueryOutput_3 = new java.util.ArrayList<>();

					com.google.cloud.bigquery.Field field_0 = com.google.cloud.bigquery.Field
							.newBuilder("client_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_0);

					com.google.cloud.bigquery.Field field_1 = com.google.cloud.bigquery.Field
							.newBuilder("supervisor_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_1);

					com.google.cloud.bigquery.Field field_2 = com.google.cloud.bigquery.Field
							.newBuilder("client_cost_center_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_2);

					com.google.cloud.bigquery.Field field_3 = com.google.cloud.bigquery.Field
							.newBuilder("employee_cost_center_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_3);

					com.google.cloud.bigquery.Field field_4 = com.google.cloud.bigquery.Field
							.newBuilder("employee_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_4);

					com.google.cloud.bigquery.Field field_5 = com.google.cloud.bigquery.Field
							.newBuilder("ar_payer_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_5);

					com.google.cloud.bigquery.Field field_6 = com.google.cloud.bigquery.Field
							.newBuilder("department_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_6);

					com.google.cloud.bigquery.Field field_7 = com.google.cloud.bigquery.Field
							.newBuilder("service_cost_center_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_7);

					com.google.cloud.bigquery.Field field_8 = com.google.cloud.bigquery.Field
							.newBuilder("site_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_8);

					com.google.cloud.bigquery.Field field_9 = com.google.cloud.bigquery.Field
							.newBuilder("school_district_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_9);

					com.google.cloud.bigquery.Field field_10 = com.google.cloud.bigquery.Field
							.newBuilder("authorization_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_10);

					com.google.cloud.bigquery.Field field_11 = com.google.cloud.bigquery.Field
							.newBuilder("authorized_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_11);

					com.google.cloud.bigquery.Field field_12 = com.google.cloud.bigquery.Field
							.newBuilder("service_authorization_approval",
									com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_12);

					com.google.cloud.bigquery.Field field_13 = com.google.cloud.bigquery.Field
							.newBuilder("service_authorization_date_id",
									com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_13);

					com.google.cloud.bigquery.Field field_14 = com.google.cloud.bigquery.Field
							.newBuilder("Service_Authorization_Expired",
									com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_14);

					com.google.cloud.bigquery.Field field_15 = com.google.cloud.bigquery.Field
							.newBuilder("service_authorization_description",
									com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_15);

					com.google.cloud.bigquery.Field field_16 = com.google.cloud.bigquery.Field
							.newBuilder("company_name", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_16);

					com.google.cloud.bigquery.Field field_17 = com.google.cloud.bigquery.Field
							.newBuilder("service_abbreviation", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_17);

					com.google.cloud.bigquery.Field field_18 = com.google.cloud.bigquery.Field
							.newBuilder("service_code", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_18);

					com.google.cloud.bigquery.Field field_19 = com.google.cloud.bigquery.Field
							.newBuilder("authorized_start_date_id", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_19);

					com.google.cloud.bigquery.Field field_20 = com.google.cloud.bigquery.Field
							.newBuilder("authorized_end_date_id", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_20);

					com.google.cloud.bigquery.Field field_21 = com.google.cloud.bigquery.Field
							.newBuilder("authorization_start_date_id",
									com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_21);

					com.google.cloud.bigquery.Field field_22 = com.google.cloud.bigquery.Field
							.newBuilder("authorization_end_date_id", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_22);

					com.google.cloud.bigquery.Field field_23 = com.google.cloud.bigquery.Field
							.newBuilder("service_program", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_23);

					com.google.cloud.bigquery.Field field_24 = com.google.cloud.bigquery.Field
							.newBuilder("service_place", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_24);

					com.google.cloud.bigquery.Field field_25 = com.google.cloud.bigquery.Field
							.newBuilder("service_is_sum_and_round", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_25);

					com.google.cloud.bigquery.Field field_26 = com.google.cloud.bigquery.Field
							.newBuilder("validate_to_schedules", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_26);

					com.google.cloud.bigquery.Field field_27 = com.google.cloud.bigquery.Field
							.newBuilder("service_minimum_minutes", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_27);

					com.google.cloud.bigquery.Field field_28 = com.google.cloud.bigquery.Field
							.newBuilder("service_units_per_hour", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_28);

					com.google.cloud.bigquery.Field field_29 = com.google.cloud.bigquery.Field
							.newBuilder("service_max_units_total", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_29);

					com.google.cloud.bigquery.Field field_30 = com.google.cloud.bigquery.Field
							.newBuilder("service_auth_max_units_total",
									com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_30);

					com.google.cloud.bigquery.Field field_31 = com.google.cloud.bigquery.Field
							.newBuilder("auth_level_validation", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_31);

					com.google.cloud.bigquery.Field field_32 = com.google.cloud.bigquery.Field
							.newBuilder("total_units_authorized", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_32);

					com.google.cloud.bigquery.Field field_33 = com.google.cloud.bigquery.Field
							.newBuilder("current_rate", com.google.cloud.bigquery.LegacySQLTypeName.FLOAT)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_33);

					com.google.cloud.bigquery.Field field_34 = com.google.cloud.bigquery.Field
							.newBuilder("caregiver_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_34);

					com.google.cloud.bigquery.Field field_35 = com.google.cloud.bigquery.Field
							.newBuilder("inv_stg_service_date_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_35);

					com.google.cloud.bigquery.Field field_36 = com.google.cloud.bigquery.Field
							.newBuilder("in_schedule_note_service_date_id",
									com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_36);

					com.google.cloud.bigquery.Field field_37 = com.google.cloud.bigquery.Field
							.newBuilder("note_date_of_service_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_37);

					com.google.cloud.bigquery.Field field_38 = com.google.cloud.bigquery.Field
							.newBuilder("in_actual_note_service_date_id",
									com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_38);

					com.google.cloud.bigquery.Field field_39 = com.google.cloud.bigquery.Field
							.newBuilder("schedule_duration", com.google.cloud.bigquery.LegacySQLTypeName.TIMESTAMP)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_39);

					com.google.cloud.bigquery.Field field_40 = com.google.cloud.bigquery.Field
							.newBuilder("schedule_start_date_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_40);

					com.google.cloud.bigquery.Field field_41 = com.google.cloud.bigquery.Field
							.newBuilder("schedule_end_date_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_41);

					com.google.cloud.bigquery.Field field_42 = com.google.cloud.bigquery.Field
							.newBuilder("schedule_start_time", com.google.cloud.bigquery.LegacySQLTypeName.TIMESTAMP)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_42);

					com.google.cloud.bigquery.Field field_43 = com.google.cloud.bigquery.Field
							.newBuilder("schedule_end_time", com.google.cloud.bigquery.LegacySQLTypeName.TIMESTAMP)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_43);

					com.google.cloud.bigquery.Field field_44 = com.google.cloud.bigquery.Field
							.newBuilder("schedule_units", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_44);

					com.google.cloud.bigquery.Field field_45 = com.google.cloud.bigquery.Field
							.newBuilder("schedule_status", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_45);

					com.google.cloud.bigquery.Field field_46 = com.google.cloud.bigquery.Field
							.newBuilder("actual_start_date_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_46);

					com.google.cloud.bigquery.Field field_47 = com.google.cloud.bigquery.Field
							.newBuilder("actual_end_date_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_47);

					com.google.cloud.bigquery.Field field_48 = com.google.cloud.bigquery.Field
							.newBuilder("billing_attending_NPI", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_48);

					com.google.cloud.bigquery.Field field_49 = com.google.cloud.bigquery.Field
							.newBuilder("actual_imported", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_49);

					com.google.cloud.bigquery.Field field_50 = com.google.cloud.bigquery.Field
							.newBuilder("actual_hold_pay", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_50);

					com.google.cloud.bigquery.Field field_51 = com.google.cloud.bigquery.Field
							.newBuilder("actual_hold_bill", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_51);

					com.google.cloud.bigquery.Field field_52 = com.google.cloud.bigquery.Field
							.newBuilder("actual_time_sheet_approved",
									com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_52);

					com.google.cloud.bigquery.Field field_53 = com.google.cloud.bigquery.Field
							.newBuilder("actual_note_approved_bl", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_53);

					com.google.cloud.bigquery.Field field_54 = com.google.cloud.bigquery.Field
							.newBuilder("actual_note_approved_pr", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_54);

					com.google.cloud.bigquery.Field field_55 = com.google.cloud.bigquery.Field
							.newBuilder("actual_status_BL", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_55);

					com.google.cloud.bigquery.Field field_56 = com.google.cloud.bigquery.Field
							.newBuilder("actual_emp_pay_type", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_56);

					com.google.cloud.bigquery.Field field_57 = com.google.cloud.bigquery.Field
							.newBuilder("ineligible_for_billing", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_57);

					com.google.cloud.bigquery.Field field_58 = com.google.cloud.bigquery.Field
							.newBuilder("actual_adjustment", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_58);

					com.google.cloud.bigquery.Field field_59 = com.google.cloud.bigquery.Field
							.newBuilder("actual_check_date_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_59);

					com.google.cloud.bigquery.Field field_60 = com.google.cloud.bigquery.Field
							.newBuilder("actual_last_check_date_id",
									com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_60);

					com.google.cloud.bigquery.Field field_61 = com.google.cloud.bigquery.Field
							.newBuilder("actual_paid", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_61);

					com.google.cloud.bigquery.Field field_62 = com.google.cloud.bigquery.Field
							.newBuilder("ineligible_for_payroll", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_62);

					com.google.cloud.bigquery.Field field_63 = com.google.cloud.bigquery.Field
							.newBuilder("actual_invoice_number", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_63);

					com.google.cloud.bigquery.Field field_64 = com.google.cloud.bigquery.Field
							.newBuilder("actual_billed", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_64);

					com.google.cloud.bigquery.Field field_65 = com.google.cloud.bigquery.Field
							.newBuilder("actual_start_time", com.google.cloud.bigquery.LegacySQLTypeName.TIMESTAMP)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_65);

					com.google.cloud.bigquery.Field field_66 = com.google.cloud.bigquery.Field
							.newBuilder("actual_end_time", com.google.cloud.bigquery.LegacySQLTypeName.TIMESTAMP)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_66);

					com.google.cloud.bigquery.Field field_67 = com.google.cloud.bigquery.Field
							.newBuilder("actual_units", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_67);

					com.google.cloud.bigquery.Field field_68 = com.google.cloud.bigquery.Field
							.newBuilder("actual_duration", com.google.cloud.bigquery.LegacySQLTypeName.TIMESTAMP)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_68);

					com.google.cloud.bigquery.Field field_69 = com.google.cloud.bigquery.Field
							.newBuilder("service_billed_date_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_69);

					com.google.cloud.bigquery.Field field_70 = com.google.cloud.bigquery.Field
							.newBuilder("in_process_units_batched", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_70);

					com.google.cloud.bigquery.Field field_71 = com.google.cloud.bigquery.Field
							.newBuilder("note_duration", com.google.cloud.bigquery.LegacySQLTypeName.TIMESTAMP)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_71);

					com.google.cloud.bigquery.Field field_72 = com.google.cloud.bigquery.Field
							.newBuilder("note_end_time", com.google.cloud.bigquery.LegacySQLTypeName.TIMESTAMP)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_72);

					com.google.cloud.bigquery.Field field_73 = com.google.cloud.bigquery.Field
							.newBuilder("note_start_time", com.google.cloud.bigquery.LegacySQLTypeName.TIMESTAMP)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_73);

					com.google.cloud.bigquery.Field field_74 = com.google.cloud.bigquery.Field
							.newBuilder("rate_type", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_74);

					com.google.cloud.bigquery.Field field_75 = com.google.cloud.bigquery.Field
							.newBuilder("first_encounter", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_75);

					com.google.cloud.bigquery.Field field_76 = com.google.cloud.bigquery.Field
							.newBuilder("units_calculated", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_76);

					com.google.cloud.bigquery.Field field_77 = com.google.cloud.bigquery.Field
							.newBuilder("clqnote_has_child", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_77);

					com.google.cloud.bigquery.Field field_78 = com.google.cloud.bigquery.Field
							.newBuilder("missed_shift_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_78);

					com.google.cloud.bigquery.Field field_79 = com.google.cloud.bigquery.Field
							.newBuilder("missed_shift_units", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_79);

					com.google.cloud.bigquery.Field field_80 = com.google.cloud.bigquery.Field
							.newBuilder("billed_units", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_80);

					com.google.cloud.bigquery.Field field_81 = com.google.cloud.bigquery.Field
							.newBuilder("transaction_type", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_81);

					com.google.cloud.bigquery.Field field_82 = com.google.cloud.bigquery.Field
							.newBuilder("transaction_date_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_82);

					com.google.cloud.bigquery.Schema schema_tBigQueryOutput_3 = com.google.cloud.bigquery.Schema
							.of(fields_tBigQueryOutput_3);
					com.google.cloud.bigquery.TableInfo tableInfo_tBigQueryOutput_3 = com.google.cloud.bigquery.TableInfo
							.newBuilder(tableId_tBigQueryOutput_3,
									com.google.cloud.bigquery.StandardTableDefinition.of(schema_tBigQueryOutput_3))
							.build();
					com.google.cloud.bigquery.Table table_tBigQueryOutput_3 = bigquery_tBigQueryOutput_3
							.create(tableInfo_tBigQueryOutput_3);
					loadJobBuilder_tBigQueryOutput_3.setSchema(schema_tBigQueryOutput_3);
					loadJobBuilder_tBigQueryOutput_3
							.setCreateDisposition(com.google.cloud.bigquery.JobInfo.CreateDisposition.CREATE_IF_NEEDED);

				} else {
					loadJobBuilder_tBigQueryOutput_3
							.setCreateDisposition(com.google.cloud.bigquery.JobInfo.CreateDisposition.CREATE_NEVER);
				}

				loadJobBuilder_tBigQueryOutput_3
						.setWriteDisposition(com.google.cloud.bigquery.JobInfo.WriteDisposition.WRITE_APPEND);
				loadJobBuilder_tBigQueryOutput_3.setDestinationTable(tableId_tBigQueryOutput_3);
				com.google.cloud.bigquery.CsvOptions.Builder csvOptions_tBigQueryOutput_3 = com.google.cloud.bigquery.CsvOptions
						.newBuilder();
				csvOptions_tBigQueryOutput_3.setAllowQuotedNewLines(true);
				csvOptions_tBigQueryOutput_3.setSkipLeadingRows(0);

				csvOptions_tBigQueryOutput_3.setFieldDelimiter(",");

				loadJobBuilder_tBigQueryOutput_3.setFormatOptions(csvOptions_tBigQueryOutput_3.build());
				loadJobBuilder_tBigQueryOutput_3.setNullMarker("\\N");
				com.google.cloud.bigquery.Job job_tBigQueryOutput_3 = bigquery_tBigQueryOutput_3
						.create(com.google.cloud.bigquery.JobInfo.of(loadJobBuilder_tBigQueryOutput_3.build()));
				job_tBigQueryOutput_3 = job_tBigQueryOutput_3
						.waitFor(com.google.cloud.RetryOption.initialRetryDelay(org.threeten.bp.Duration.ofSeconds(1)));
				com.google.gson.Gson gsonObject_tBigQueryOutput_3 = new com.google.gson.Gson();
				if (job_tBigQueryOutput_3 != null && job_tBigQueryOutput_3.getStatus().getError() == null) {
					globalMap.put("tBigQueryOutput_3_JOBID", job_tBigQueryOutput_3.getJobId().getJob());
					globalMap.put("tBigQueryOutput_3_STATISTICS",
							gsonObject_tBigQueryOutput_3.toJson(job_tBigQueryOutput_3.getStatistics()));

				} else {
					if (job_tBigQueryOutput_3 == null) {
						throw new RuntimeException("Job no longer exists");
					}
					globalMap.put("tBigQueryOutput_3_JOBID", job_tBigQueryOutput_3.getJobId().getJob());
					globalMap.put("tBigQueryOutput_3_STATISTICS",
							gsonObject_tBigQueryOutput_3.toJson(job_tBigQueryOutput_3.getStatistics()));
					List<com.google.cloud.bigquery.BigQueryError> errorList = job_tBigQueryOutput_3.getStatus()
							.getExecutionErrors();
					throw new RuntimeException("Job failed: " + errorList.get(errorList.size() - 1));
				}

				/* ----END-CREATING-JOB (Cloud API)---- */

				/**
				 * [tBigQueryOutput_3_tBQBE begin ] stop
				 */

				/**
				 * [tBigQueryOutput_3_tBQBE main ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_3";

				currentComponent = "tBigQueryOutput_3_tBQBE";

				tos_count_tBigQueryOutput_3_tBQBE++;

				/**
				 * [tBigQueryOutput_3_tBQBE main ] stop
				 */

				/**
				 * [tBigQueryOutput_3_tBQBE process_data_begin ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_3";

				currentComponent = "tBigQueryOutput_3_tBQBE";

				/**
				 * [tBigQueryOutput_3_tBQBE process_data_begin ] stop
				 */

				/**
				 * [tBigQueryOutput_3_tBQBE process_data_end ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_3";

				currentComponent = "tBigQueryOutput_3_tBQBE";

				/**
				 * [tBigQueryOutput_3_tBQBE process_data_end ] stop
				 */

				/**
				 * [tBigQueryOutput_3_tBQBE end ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_3";

				currentComponent = "tBigQueryOutput_3_tBQBE";

				ok_Hash.put("tBigQueryOutput_3_tBQBE", true);
				end_Hash.put("tBigQueryOutput_3_tBQBE", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tJava_6Process(globalMap);

				/**
				 * [tBigQueryOutput_3_tBQBE end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_3 finally ] start
				 */

				currentComponent = "tDBInput_3";

				/**
				 * [tDBInput_3 finally ] stop
				 */

				/**
				 * [tBigQueryOutput_3_tBQOB finally ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_3";

				currentComponent = "tBigQueryOutput_3_tBQOB";

				if (resourceMap.get("finish_tBigQueryOutput_3_tBQOB") == null) {
					if (resourceMap.get("csvWriter_tBigQueryOutput_3_tBQOB") != null) {
						((com.talend.csv.CSVWriter) resourceMap.get("csvWriter_tBigQueryOutput_3_tBQOB")).close();
					}
				}

				/**
				 * [tBigQueryOutput_3_tBQOB finally ] stop
				 */

				/**
				 * [tBigQueryOutput_3_tBQBE finally ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_3";

				currentComponent = "tBigQueryOutput_3_tBQBE";

				/**
				 * [tBigQueryOutput_3_tBQBE finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}

	public void tJava_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tJava_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tJava_6 begin ] start
				 */

				ok_Hash.put("tJava_6", false);
				start_Hash.put("tJava_6", System.currentTimeMillis());

				currentComponent = "tJava_6";

				int tos_count_tJava_6 = 0;

				Integer Lines = (Integer) globalMap.get("tDBInput_3_NB_LINE");
//System.out.println("In total processed "+Lines+" note lines to big query from service ids " + context.ServiceID);
				System.out.println("note data reload finished at " + TalendDate.getDate("YYYY-MM-dd HH:mm:ss"));
				System.out.println(
						"starting to reload actual data in BigQuery " + TalendDate.getDate("YYYY-MM-dd HH:mm:ss"));

				/**
				 * [tJava_6 begin ] stop
				 */

				/**
				 * [tJava_6 main ] start
				 */

				currentComponent = "tJava_6";

				tos_count_tJava_6++;

				/**
				 * [tJava_6 main ] stop
				 */

				/**
				 * [tJava_6 process_data_begin ] start
				 */

				currentComponent = "tJava_6";

				/**
				 * [tJava_6 process_data_begin ] stop
				 */

				/**
				 * [tJava_6 process_data_end ] start
				 */

				currentComponent = "tJava_6";

				/**
				 * [tJava_6 process_data_end ] stop
				 */

				/**
				 * [tJava_6 end ] start
				 */

				currentComponent = "tJava_6";

				ok_Hash.put("tJava_6", true);
				end_Hash.put("tJava_6", System.currentTimeMillis());

				/**
				 * [tJava_6 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tJava_6 finally ] start
				 */

				currentComponent = "tJava_6";

				/**
				 * [tJava_6 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_6_SUBPROCESS_STATE", 1);
	}

	public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_ONTARGET_load_transactions_initial = new byte[0];
		static byte[] commonByteArray_ONTARGET_load_transactions_initial = new byte[0];

		public Integer client_id;

		public Integer getClient_id() {
			return this.client_id;
		}

		public Integer supervisor_id;

		public Integer getSupervisor_id() {
			return this.supervisor_id;
		}

		public Integer client_cost_center_id;

		public Integer getClient_cost_center_id() {
			return this.client_cost_center_id;
		}

		public Integer employee_cost_center_id;

		public Integer getEmployee_cost_center_id() {
			return this.employee_cost_center_id;
		}

		public Integer employee_id;

		public Integer getEmployee_id() {
			return this.employee_id;
		}

		public Integer ar_payer_id;

		public Integer getAr_payer_id() {
			return this.ar_payer_id;
		}

		public Integer department_id;

		public Integer getDepartment_id() {
			return this.department_id;
		}

		public Integer service_cost_center_id;

		public Integer getService_cost_center_id() {
			return this.service_cost_center_id;
		}

		public Integer site_id;

		public Integer getSite_id() {
			return this.site_id;
		}

		public Integer school_district_id;

		public Integer getSchool_district_id() {
			return this.school_district_id;
		}

		public Integer authorization_id;

		public Integer getAuthorization_id() {
			return this.authorization_id;
		}

		public Integer authorized_id;

		public Integer getAuthorized_id() {
			return this.authorized_id;
		}

		public String service_authorization_approval;

		public String getService_authorization_approval() {
			return this.service_authorization_approval;
		}

		public String service_authorization_date_id;

		public String getService_authorization_date_id() {
			return this.service_authorization_date_id;
		}

		public String Service_Authorization_Expired;

		public String getService_Authorization_Expired() {
			return this.Service_Authorization_Expired;
		}

		public String service_authorization_description;

		public String getService_authorization_description() {
			return this.service_authorization_description;
		}

		public String company_name;

		public String getCompany_name() {
			return this.company_name;
		}

		public String service_abbreviation;

		public String getService_abbreviation() {
			return this.service_abbreviation;
		}

		public String service_code;

		public String getService_code() {
			return this.service_code;
		}

		public String authorized_start_date_id;

		public String getAuthorized_start_date_id() {
			return this.authorized_start_date_id;
		}

		public String authorized_end_date_id;

		public String getAuthorized_end_date_id() {
			return this.authorized_end_date_id;
		}

		public String authorization_start_date_id;

		public String getAuthorization_start_date_id() {
			return this.authorization_start_date_id;
		}

		public String authorization_end_date_id;

		public String getAuthorization_end_date_id() {
			return this.authorization_end_date_id;
		}

		public String service_program;

		public String getService_program() {
			return this.service_program;
		}

		public String service_place;

		public String getService_place() {
			return this.service_place;
		}

		public Integer service_is_sum_and_round;

		public Integer getService_is_sum_and_round() {
			return this.service_is_sum_and_round;
		}

		public Integer validate_to_schedules;

		public Integer getValidate_to_schedules() {
			return this.validate_to_schedules;
		}

		public Integer service_minimum_minutes;

		public Integer getService_minimum_minutes() {
			return this.service_minimum_minutes;
		}

		public Integer service_units_per_hour;

		public Integer getService_units_per_hour() {
			return this.service_units_per_hour;
		}

		public Integer service_max_units_total;

		public Integer getService_max_units_total() {
			return this.service_max_units_total;
		}

		public Integer service_auth_max_units_total;

		public Integer getService_auth_max_units_total() {
			return this.service_auth_max_units_total;
		}

		public Boolean auth_level_validation;

		public Boolean getAuth_level_validation() {
			return this.auth_level_validation;
		}

		public Integer total_units_authorized;

		public Integer getTotal_units_authorized() {
			return this.total_units_authorized;
		}

		public Float current_rate;

		public Float getCurrent_rate() {
			return this.current_rate;
		}

		public Integer caregiver_id;

		public Integer getCaregiver_id() {
			return this.caregiver_id;
		}

		public Integer inv_stg_service_date_id;

		public Integer getInv_stg_service_date_id() {
			return this.inv_stg_service_date_id;
		}

		public Integer in_schedule_note_service_date_id;

		public Integer getIn_schedule_note_service_date_id() {
			return this.in_schedule_note_service_date_id;
		}

		public Integer note_date_of_service_id;

		public Integer getNote_date_of_service_id() {
			return this.note_date_of_service_id;
		}

		public Integer in_actual_note_service_date_id;

		public Integer getIn_actual_note_service_date_id() {
			return this.in_actual_note_service_date_id;
		}

		public java.util.Date schedule_duration;

		public java.util.Date getSchedule_duration() {
			return this.schedule_duration;
		}

		public Integer schedule_start_date_id;

		public Integer getSchedule_start_date_id() {
			return this.schedule_start_date_id;
		}

		public Integer schedule_end_date_id;

		public Integer getSchedule_end_date_id() {
			return this.schedule_end_date_id;
		}

		public java.util.Date schedule_start_time;

		public java.util.Date getSchedule_start_time() {
			return this.schedule_start_time;
		}

		public java.util.Date schedule_end_time;

		public java.util.Date getSchedule_end_time() {
			return this.schedule_end_time;
		}

		public Integer schedule_units;

		public Integer getSchedule_units() {
			return this.schedule_units;
		}

		public String schedule_status;

		public String getSchedule_status() {
			return this.schedule_status;
		}

		public Integer actual_start_date_id;

		public Integer getActual_start_date_id() {
			return this.actual_start_date_id;
		}

		public Integer actual_end_date_id;

		public Integer getActual_end_date_id() {
			return this.actual_end_date_id;
		}

		public String billing_attending_NPI;

		public String getBilling_attending_NPI() {
			return this.billing_attending_NPI;
		}

		public Boolean actual_imported;

		public Boolean getActual_imported() {
			return this.actual_imported;
		}

		public Boolean actual_hold_pay;

		public Boolean getActual_hold_pay() {
			return this.actual_hold_pay;
		}

		public Boolean actual_hold_bill;

		public Boolean getActual_hold_bill() {
			return this.actual_hold_bill;
		}

		public Boolean actual_time_sheet_approved;

		public Boolean getActual_time_sheet_approved() {
			return this.actual_time_sheet_approved;
		}

		public Boolean actual_note_approved_bl;

		public Boolean getActual_note_approved_bl() {
			return this.actual_note_approved_bl;
		}

		public Boolean actual_note_approved_pr;

		public Boolean getActual_note_approved_pr() {
			return this.actual_note_approved_pr;
		}

		public String actual_status_BL;

		public String getActual_status_BL() {
			return this.actual_status_BL;
		}

		public String actual_emp_pay_type;

		public String getActual_emp_pay_type() {
			return this.actual_emp_pay_type;
		}

		public Boolean ineligible_for_billing;

		public Boolean getIneligible_for_billing() {
			return this.ineligible_for_billing;
		}

		public Boolean actual_adjustment;

		public Boolean getActual_adjustment() {
			return this.actual_adjustment;
		}

		public Integer actual_check_date_id;

		public Integer getActual_check_date_id() {
			return this.actual_check_date_id;
		}

		public Integer actual_last_check_date_id;

		public Integer getActual_last_check_date_id() {
			return this.actual_last_check_date_id;
		}

		public Boolean actual_paid;

		public Boolean getActual_paid() {
			return this.actual_paid;
		}

		public Boolean ineligible_for_payroll;

		public Boolean getIneligible_for_payroll() {
			return this.ineligible_for_payroll;
		}

		public Integer actual_invoice_number;

		public Integer getActual_invoice_number() {
			return this.actual_invoice_number;
		}

		public Boolean actual_billed;

		public Boolean getActual_billed() {
			return this.actual_billed;
		}

		public java.util.Date actual_start_time;

		public java.util.Date getActual_start_time() {
			return this.actual_start_time;
		}

		public java.util.Date actual_end_time;

		public java.util.Date getActual_end_time() {
			return this.actual_end_time;
		}

		public Integer actual_units;

		public Integer getActual_units() {
			return this.actual_units;
		}

		public java.util.Date actual_duration;

		public java.util.Date getActual_duration() {
			return this.actual_duration;
		}

		public Integer service_billed_date_id;

		public Integer getService_billed_date_id() {
			return this.service_billed_date_id;
		}

		public Integer in_process_units_batched;

		public Integer getIn_process_units_batched() {
			return this.in_process_units_batched;
		}

		public java.util.Date note_duration;

		public java.util.Date getNote_duration() {
			return this.note_duration;
		}

		public java.util.Date note_end_time;

		public java.util.Date getNote_end_time() {
			return this.note_end_time;
		}

		public java.util.Date note_start_time;

		public java.util.Date getNote_start_time() {
			return this.note_start_time;
		}

		public String rate_type;

		public String getRate_type() {
			return this.rate_type;
		}

		public Boolean first_encounter;

		public Boolean getFirst_encounter() {
			return this.first_encounter;
		}

		public Integer units_calculated;

		public Integer getUnits_calculated() {
			return this.units_calculated;
		}

		public Boolean clqnote_has_child;

		public Boolean getClqnote_has_child() {
			return this.clqnote_has_child;
		}

		public Integer missed_shift_id;

		public Integer getMissed_shift_id() {
			return this.missed_shift_id;
		}

		public Integer missed_shift_units;

		public Integer getMissed_shift_units() {
			return this.missed_shift_units;
		}

		public Integer billed_units;

		public Integer getBilled_units() {
			return this.billed_units;
		}

		public String transaction_type;

		public String getTransaction_type() {
			return this.transaction_type;
		}

		public Integer transaction_date_id;

		public Integer getTransaction_date_id() {
			return this.transaction_date_id;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ONTARGET_load_transactions_initial.length) {
					if (length < 1024 && commonByteArray_ONTARGET_load_transactions_initial.length == 0) {
						commonByteArray_ONTARGET_load_transactions_initial = new byte[1024];
					} else {
						commonByteArray_ONTARGET_load_transactions_initial = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ONTARGET_load_transactions_initial, 0, length);
				strReturn = new String(commonByteArray_ONTARGET_load_transactions_initial, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ONTARGET_load_transactions_initial.length) {
					if (length < 1024 && commonByteArray_ONTARGET_load_transactions_initial.length == 0) {
						commonByteArray_ONTARGET_load_transactions_initial = new byte[1024];
					} else {
						commonByteArray_ONTARGET_load_transactions_initial = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_ONTARGET_load_transactions_initial, 0, length);
				strReturn = new String(commonByteArray_ONTARGET_load_transactions_initial, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ONTARGET_load_transactions_initial) {

				try {

					int length = 0;

					this.client_id = readInteger(dis);

					this.supervisor_id = readInteger(dis);

					this.client_cost_center_id = readInteger(dis);

					this.employee_cost_center_id = readInteger(dis);

					this.employee_id = readInteger(dis);

					this.ar_payer_id = readInteger(dis);

					this.department_id = readInteger(dis);

					this.service_cost_center_id = readInteger(dis);

					this.site_id = readInteger(dis);

					this.school_district_id = readInteger(dis);

					this.authorization_id = readInteger(dis);

					this.authorized_id = readInteger(dis);

					this.service_authorization_approval = readString(dis);

					this.service_authorization_date_id = readString(dis);

					this.Service_Authorization_Expired = readString(dis);

					this.service_authorization_description = readString(dis);

					this.company_name = readString(dis);

					this.service_abbreviation = readString(dis);

					this.service_code = readString(dis);

					this.authorized_start_date_id = readString(dis);

					this.authorized_end_date_id = readString(dis);

					this.authorization_start_date_id = readString(dis);

					this.authorization_end_date_id = readString(dis);

					this.service_program = readString(dis);

					this.service_place = readString(dis);

					this.service_is_sum_and_round = readInteger(dis);

					this.validate_to_schedules = readInteger(dis);

					this.service_minimum_minutes = readInteger(dis);

					this.service_units_per_hour = readInteger(dis);

					this.service_max_units_total = readInteger(dis);

					this.service_auth_max_units_total = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.auth_level_validation = null;
					} else {
						this.auth_level_validation = dis.readBoolean();
					}

					this.total_units_authorized = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.current_rate = null;
					} else {
						this.current_rate = dis.readFloat();
					}

					this.caregiver_id = readInteger(dis);

					this.inv_stg_service_date_id = readInteger(dis);

					this.in_schedule_note_service_date_id = readInteger(dis);

					this.note_date_of_service_id = readInteger(dis);

					this.in_actual_note_service_date_id = readInteger(dis);

					this.schedule_duration = readDate(dis);

					this.schedule_start_date_id = readInteger(dis);

					this.schedule_end_date_id = readInteger(dis);

					this.schedule_start_time = readDate(dis);

					this.schedule_end_time = readDate(dis);

					this.schedule_units = readInteger(dis);

					this.schedule_status = readString(dis);

					this.actual_start_date_id = readInteger(dis);

					this.actual_end_date_id = readInteger(dis);

					this.billing_attending_NPI = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.actual_imported = null;
					} else {
						this.actual_imported = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_hold_pay = null;
					} else {
						this.actual_hold_pay = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_hold_bill = null;
					} else {
						this.actual_hold_bill = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_time_sheet_approved = null;
					} else {
						this.actual_time_sheet_approved = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_note_approved_bl = null;
					} else {
						this.actual_note_approved_bl = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_note_approved_pr = null;
					} else {
						this.actual_note_approved_pr = dis.readBoolean();
					}

					this.actual_status_BL = readString(dis);

					this.actual_emp_pay_type = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ineligible_for_billing = null;
					} else {
						this.ineligible_for_billing = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_adjustment = null;
					} else {
						this.actual_adjustment = dis.readBoolean();
					}

					this.actual_check_date_id = readInteger(dis);

					this.actual_last_check_date_id = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.actual_paid = null;
					} else {
						this.actual_paid = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.ineligible_for_payroll = null;
					} else {
						this.ineligible_for_payroll = dis.readBoolean();
					}

					this.actual_invoice_number = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.actual_billed = null;
					} else {
						this.actual_billed = dis.readBoolean();
					}

					this.actual_start_time = readDate(dis);

					this.actual_end_time = readDate(dis);

					this.actual_units = readInteger(dis);

					this.actual_duration = readDate(dis);

					this.service_billed_date_id = readInteger(dis);

					this.in_process_units_batched = readInteger(dis);

					this.note_duration = readDate(dis);

					this.note_end_time = readDate(dis);

					this.note_start_time = readDate(dis);

					this.rate_type = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.first_encounter = null;
					} else {
						this.first_encounter = dis.readBoolean();
					}

					this.units_calculated = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.clqnote_has_child = null;
					} else {
						this.clqnote_has_child = dis.readBoolean();
					}

					this.missed_shift_id = readInteger(dis);

					this.missed_shift_units = readInteger(dis);

					this.billed_units = readInteger(dis);

					this.transaction_type = readString(dis);

					this.transaction_date_id = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ONTARGET_load_transactions_initial) {

				try {

					int length = 0;

					this.client_id = readInteger(dis);

					this.supervisor_id = readInteger(dis);

					this.client_cost_center_id = readInteger(dis);

					this.employee_cost_center_id = readInteger(dis);

					this.employee_id = readInteger(dis);

					this.ar_payer_id = readInteger(dis);

					this.department_id = readInteger(dis);

					this.service_cost_center_id = readInteger(dis);

					this.site_id = readInteger(dis);

					this.school_district_id = readInteger(dis);

					this.authorization_id = readInteger(dis);

					this.authorized_id = readInteger(dis);

					this.service_authorization_approval = readString(dis);

					this.service_authorization_date_id = readString(dis);

					this.Service_Authorization_Expired = readString(dis);

					this.service_authorization_description = readString(dis);

					this.company_name = readString(dis);

					this.service_abbreviation = readString(dis);

					this.service_code = readString(dis);

					this.authorized_start_date_id = readString(dis);

					this.authorized_end_date_id = readString(dis);

					this.authorization_start_date_id = readString(dis);

					this.authorization_end_date_id = readString(dis);

					this.service_program = readString(dis);

					this.service_place = readString(dis);

					this.service_is_sum_and_round = readInteger(dis);

					this.validate_to_schedules = readInteger(dis);

					this.service_minimum_minutes = readInteger(dis);

					this.service_units_per_hour = readInteger(dis);

					this.service_max_units_total = readInteger(dis);

					this.service_auth_max_units_total = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.auth_level_validation = null;
					} else {
						this.auth_level_validation = dis.readBoolean();
					}

					this.total_units_authorized = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.current_rate = null;
					} else {
						this.current_rate = dis.readFloat();
					}

					this.caregiver_id = readInteger(dis);

					this.inv_stg_service_date_id = readInteger(dis);

					this.in_schedule_note_service_date_id = readInteger(dis);

					this.note_date_of_service_id = readInteger(dis);

					this.in_actual_note_service_date_id = readInteger(dis);

					this.schedule_duration = readDate(dis);

					this.schedule_start_date_id = readInteger(dis);

					this.schedule_end_date_id = readInteger(dis);

					this.schedule_start_time = readDate(dis);

					this.schedule_end_time = readDate(dis);

					this.schedule_units = readInteger(dis);

					this.schedule_status = readString(dis);

					this.actual_start_date_id = readInteger(dis);

					this.actual_end_date_id = readInteger(dis);

					this.billing_attending_NPI = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.actual_imported = null;
					} else {
						this.actual_imported = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_hold_pay = null;
					} else {
						this.actual_hold_pay = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_hold_bill = null;
					} else {
						this.actual_hold_bill = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_time_sheet_approved = null;
					} else {
						this.actual_time_sheet_approved = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_note_approved_bl = null;
					} else {
						this.actual_note_approved_bl = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_note_approved_pr = null;
					} else {
						this.actual_note_approved_pr = dis.readBoolean();
					}

					this.actual_status_BL = readString(dis);

					this.actual_emp_pay_type = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ineligible_for_billing = null;
					} else {
						this.ineligible_for_billing = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_adjustment = null;
					} else {
						this.actual_adjustment = dis.readBoolean();
					}

					this.actual_check_date_id = readInteger(dis);

					this.actual_last_check_date_id = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.actual_paid = null;
					} else {
						this.actual_paid = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.ineligible_for_payroll = null;
					} else {
						this.ineligible_for_payroll = dis.readBoolean();
					}

					this.actual_invoice_number = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.actual_billed = null;
					} else {
						this.actual_billed = dis.readBoolean();
					}

					this.actual_start_time = readDate(dis);

					this.actual_end_time = readDate(dis);

					this.actual_units = readInteger(dis);

					this.actual_duration = readDate(dis);

					this.service_billed_date_id = readInteger(dis);

					this.in_process_units_batched = readInteger(dis);

					this.note_duration = readDate(dis);

					this.note_end_time = readDate(dis);

					this.note_start_time = readDate(dis);

					this.rate_type = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.first_encounter = null;
					} else {
						this.first_encounter = dis.readBoolean();
					}

					this.units_calculated = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.clqnote_has_child = null;
					} else {
						this.clqnote_has_child = dis.readBoolean();
					}

					this.missed_shift_id = readInteger(dis);

					this.missed_shift_units = readInteger(dis);

					this.billed_units = readInteger(dis);

					this.transaction_type = readString(dis);

					this.transaction_date_id = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.client_id, dos);

				// Integer

				writeInteger(this.supervisor_id, dos);

				// Integer

				writeInteger(this.client_cost_center_id, dos);

				// Integer

				writeInteger(this.employee_cost_center_id, dos);

				// Integer

				writeInteger(this.employee_id, dos);

				// Integer

				writeInteger(this.ar_payer_id, dos);

				// Integer

				writeInteger(this.department_id, dos);

				// Integer

				writeInteger(this.service_cost_center_id, dos);

				// Integer

				writeInteger(this.site_id, dos);

				// Integer

				writeInteger(this.school_district_id, dos);

				// Integer

				writeInteger(this.authorization_id, dos);

				// Integer

				writeInteger(this.authorized_id, dos);

				// String

				writeString(this.service_authorization_approval, dos);

				// String

				writeString(this.service_authorization_date_id, dos);

				// String

				writeString(this.Service_Authorization_Expired, dos);

				// String

				writeString(this.service_authorization_description, dos);

				// String

				writeString(this.company_name, dos);

				// String

				writeString(this.service_abbreviation, dos);

				// String

				writeString(this.service_code, dos);

				// String

				writeString(this.authorized_start_date_id, dos);

				// String

				writeString(this.authorized_end_date_id, dos);

				// String

				writeString(this.authorization_start_date_id, dos);

				// String

				writeString(this.authorization_end_date_id, dos);

				// String

				writeString(this.service_program, dos);

				// String

				writeString(this.service_place, dos);

				// Integer

				writeInteger(this.service_is_sum_and_round, dos);

				// Integer

				writeInteger(this.validate_to_schedules, dos);

				// Integer

				writeInteger(this.service_minimum_minutes, dos);

				// Integer

				writeInteger(this.service_units_per_hour, dos);

				// Integer

				writeInteger(this.service_max_units_total, dos);

				// Integer

				writeInteger(this.service_auth_max_units_total, dos);

				// Boolean

				if (this.auth_level_validation == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.auth_level_validation);
				}

				// Integer

				writeInteger(this.total_units_authorized, dos);

				// Float

				if (this.current_rate == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.current_rate);
				}

				// Integer

				writeInteger(this.caregiver_id, dos);

				// Integer

				writeInteger(this.inv_stg_service_date_id, dos);

				// Integer

				writeInteger(this.in_schedule_note_service_date_id, dos);

				// Integer

				writeInteger(this.note_date_of_service_id, dos);

				// Integer

				writeInteger(this.in_actual_note_service_date_id, dos);

				// java.util.Date

				writeDate(this.schedule_duration, dos);

				// Integer

				writeInteger(this.schedule_start_date_id, dos);

				// Integer

				writeInteger(this.schedule_end_date_id, dos);

				// java.util.Date

				writeDate(this.schedule_start_time, dos);

				// java.util.Date

				writeDate(this.schedule_end_time, dos);

				// Integer

				writeInteger(this.schedule_units, dos);

				// String

				writeString(this.schedule_status, dos);

				// Integer

				writeInteger(this.actual_start_date_id, dos);

				// Integer

				writeInteger(this.actual_end_date_id, dos);

				// String

				writeString(this.billing_attending_NPI, dos);

				// Boolean

				if (this.actual_imported == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_imported);
				}

				// Boolean

				if (this.actual_hold_pay == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_hold_pay);
				}

				// Boolean

				if (this.actual_hold_bill == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_hold_bill);
				}

				// Boolean

				if (this.actual_time_sheet_approved == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_time_sheet_approved);
				}

				// Boolean

				if (this.actual_note_approved_bl == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_note_approved_bl);
				}

				// Boolean

				if (this.actual_note_approved_pr == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_note_approved_pr);
				}

				// String

				writeString(this.actual_status_BL, dos);

				// String

				writeString(this.actual_emp_pay_type, dos);

				// Boolean

				if (this.ineligible_for_billing == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.ineligible_for_billing);
				}

				// Boolean

				if (this.actual_adjustment == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_adjustment);
				}

				// Integer

				writeInteger(this.actual_check_date_id, dos);

				// Integer

				writeInteger(this.actual_last_check_date_id, dos);

				// Boolean

				if (this.actual_paid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_paid);
				}

				// Boolean

				if (this.ineligible_for_payroll == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.ineligible_for_payroll);
				}

				// Integer

				writeInteger(this.actual_invoice_number, dos);

				// Boolean

				if (this.actual_billed == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_billed);
				}

				// java.util.Date

				writeDate(this.actual_start_time, dos);

				// java.util.Date

				writeDate(this.actual_end_time, dos);

				// Integer

				writeInteger(this.actual_units, dos);

				// java.util.Date

				writeDate(this.actual_duration, dos);

				// Integer

				writeInteger(this.service_billed_date_id, dos);

				// Integer

				writeInteger(this.in_process_units_batched, dos);

				// java.util.Date

				writeDate(this.note_duration, dos);

				// java.util.Date

				writeDate(this.note_end_time, dos);

				// java.util.Date

				writeDate(this.note_start_time, dos);

				// String

				writeString(this.rate_type, dos);

				// Boolean

				if (this.first_encounter == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.first_encounter);
				}

				// Integer

				writeInteger(this.units_calculated, dos);

				// Boolean

				if (this.clqnote_has_child == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.clqnote_has_child);
				}

				// Integer

				writeInteger(this.missed_shift_id, dos);

				// Integer

				writeInteger(this.missed_shift_units, dos);

				// Integer

				writeInteger(this.billed_units, dos);

				// String

				writeString(this.transaction_type, dos);

				// Integer

				writeInteger(this.transaction_date_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.client_id, dos);

				// Integer

				writeInteger(this.supervisor_id, dos);

				// Integer

				writeInteger(this.client_cost_center_id, dos);

				// Integer

				writeInteger(this.employee_cost_center_id, dos);

				// Integer

				writeInteger(this.employee_id, dos);

				// Integer

				writeInteger(this.ar_payer_id, dos);

				// Integer

				writeInteger(this.department_id, dos);

				// Integer

				writeInteger(this.service_cost_center_id, dos);

				// Integer

				writeInteger(this.site_id, dos);

				// Integer

				writeInteger(this.school_district_id, dos);

				// Integer

				writeInteger(this.authorization_id, dos);

				// Integer

				writeInteger(this.authorized_id, dos);

				// String

				writeString(this.service_authorization_approval, dos);

				// String

				writeString(this.service_authorization_date_id, dos);

				// String

				writeString(this.Service_Authorization_Expired, dos);

				// String

				writeString(this.service_authorization_description, dos);

				// String

				writeString(this.company_name, dos);

				// String

				writeString(this.service_abbreviation, dos);

				// String

				writeString(this.service_code, dos);

				// String

				writeString(this.authorized_start_date_id, dos);

				// String

				writeString(this.authorized_end_date_id, dos);

				// String

				writeString(this.authorization_start_date_id, dos);

				// String

				writeString(this.authorization_end_date_id, dos);

				// String

				writeString(this.service_program, dos);

				// String

				writeString(this.service_place, dos);

				// Integer

				writeInteger(this.service_is_sum_and_round, dos);

				// Integer

				writeInteger(this.validate_to_schedules, dos);

				// Integer

				writeInteger(this.service_minimum_minutes, dos);

				// Integer

				writeInteger(this.service_units_per_hour, dos);

				// Integer

				writeInteger(this.service_max_units_total, dos);

				// Integer

				writeInteger(this.service_auth_max_units_total, dos);

				// Boolean

				if (this.auth_level_validation == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.auth_level_validation);
				}

				// Integer

				writeInteger(this.total_units_authorized, dos);

				// Float

				if (this.current_rate == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.current_rate);
				}

				// Integer

				writeInteger(this.caregiver_id, dos);

				// Integer

				writeInteger(this.inv_stg_service_date_id, dos);

				// Integer

				writeInteger(this.in_schedule_note_service_date_id, dos);

				// Integer

				writeInteger(this.note_date_of_service_id, dos);

				// Integer

				writeInteger(this.in_actual_note_service_date_id, dos);

				// java.util.Date

				writeDate(this.schedule_duration, dos);

				// Integer

				writeInteger(this.schedule_start_date_id, dos);

				// Integer

				writeInteger(this.schedule_end_date_id, dos);

				// java.util.Date

				writeDate(this.schedule_start_time, dos);

				// java.util.Date

				writeDate(this.schedule_end_time, dos);

				// Integer

				writeInteger(this.schedule_units, dos);

				// String

				writeString(this.schedule_status, dos);

				// Integer

				writeInteger(this.actual_start_date_id, dos);

				// Integer

				writeInteger(this.actual_end_date_id, dos);

				// String

				writeString(this.billing_attending_NPI, dos);

				// Boolean

				if (this.actual_imported == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_imported);
				}

				// Boolean

				if (this.actual_hold_pay == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_hold_pay);
				}

				// Boolean

				if (this.actual_hold_bill == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_hold_bill);
				}

				// Boolean

				if (this.actual_time_sheet_approved == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_time_sheet_approved);
				}

				// Boolean

				if (this.actual_note_approved_bl == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_note_approved_bl);
				}

				// Boolean

				if (this.actual_note_approved_pr == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_note_approved_pr);
				}

				// String

				writeString(this.actual_status_BL, dos);

				// String

				writeString(this.actual_emp_pay_type, dos);

				// Boolean

				if (this.ineligible_for_billing == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.ineligible_for_billing);
				}

				// Boolean

				if (this.actual_adjustment == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_adjustment);
				}

				// Integer

				writeInteger(this.actual_check_date_id, dos);

				// Integer

				writeInteger(this.actual_last_check_date_id, dos);

				// Boolean

				if (this.actual_paid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_paid);
				}

				// Boolean

				if (this.ineligible_for_payroll == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.ineligible_for_payroll);
				}

				// Integer

				writeInteger(this.actual_invoice_number, dos);

				// Boolean

				if (this.actual_billed == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_billed);
				}

				// java.util.Date

				writeDate(this.actual_start_time, dos);

				// java.util.Date

				writeDate(this.actual_end_time, dos);

				// Integer

				writeInteger(this.actual_units, dos);

				// java.util.Date

				writeDate(this.actual_duration, dos);

				// Integer

				writeInteger(this.service_billed_date_id, dos);

				// Integer

				writeInteger(this.in_process_units_batched, dos);

				// java.util.Date

				writeDate(this.note_duration, dos);

				// java.util.Date

				writeDate(this.note_end_time, dos);

				// java.util.Date

				writeDate(this.note_start_time, dos);

				// String

				writeString(this.rate_type, dos);

				// Boolean

				if (this.first_encounter == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.first_encounter);
				}

				// Integer

				writeInteger(this.units_calculated, dos);

				// Boolean

				if (this.clqnote_has_child == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.clqnote_has_child);
				}

				// Integer

				writeInteger(this.missed_shift_id, dos);

				// Integer

				writeInteger(this.missed_shift_units, dos);

				// Integer

				writeInteger(this.billed_units, dos);

				// String

				writeString(this.transaction_type, dos);

				// Integer

				writeInteger(this.transaction_date_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("client_id=" + String.valueOf(client_id));
			sb.append(",supervisor_id=" + String.valueOf(supervisor_id));
			sb.append(",client_cost_center_id=" + String.valueOf(client_cost_center_id));
			sb.append(",employee_cost_center_id=" + String.valueOf(employee_cost_center_id));
			sb.append(",employee_id=" + String.valueOf(employee_id));
			sb.append(",ar_payer_id=" + String.valueOf(ar_payer_id));
			sb.append(",department_id=" + String.valueOf(department_id));
			sb.append(",service_cost_center_id=" + String.valueOf(service_cost_center_id));
			sb.append(",site_id=" + String.valueOf(site_id));
			sb.append(",school_district_id=" + String.valueOf(school_district_id));
			sb.append(",authorization_id=" + String.valueOf(authorization_id));
			sb.append(",authorized_id=" + String.valueOf(authorized_id));
			sb.append(",service_authorization_approval=" + service_authorization_approval);
			sb.append(",service_authorization_date_id=" + service_authorization_date_id);
			sb.append(",Service_Authorization_Expired=" + Service_Authorization_Expired);
			sb.append(",service_authorization_description=" + service_authorization_description);
			sb.append(",company_name=" + company_name);
			sb.append(",service_abbreviation=" + service_abbreviation);
			sb.append(",service_code=" + service_code);
			sb.append(",authorized_start_date_id=" + authorized_start_date_id);
			sb.append(",authorized_end_date_id=" + authorized_end_date_id);
			sb.append(",authorization_start_date_id=" + authorization_start_date_id);
			sb.append(",authorization_end_date_id=" + authorization_end_date_id);
			sb.append(",service_program=" + service_program);
			sb.append(",service_place=" + service_place);
			sb.append(",service_is_sum_and_round=" + String.valueOf(service_is_sum_and_round));
			sb.append(",validate_to_schedules=" + String.valueOf(validate_to_schedules));
			sb.append(",service_minimum_minutes=" + String.valueOf(service_minimum_minutes));
			sb.append(",service_units_per_hour=" + String.valueOf(service_units_per_hour));
			sb.append(",service_max_units_total=" + String.valueOf(service_max_units_total));
			sb.append(",service_auth_max_units_total=" + String.valueOf(service_auth_max_units_total));
			sb.append(",auth_level_validation=" + String.valueOf(auth_level_validation));
			sb.append(",total_units_authorized=" + String.valueOf(total_units_authorized));
			sb.append(",current_rate=" + String.valueOf(current_rate));
			sb.append(",caregiver_id=" + String.valueOf(caregiver_id));
			sb.append(",inv_stg_service_date_id=" + String.valueOf(inv_stg_service_date_id));
			sb.append(",in_schedule_note_service_date_id=" + String.valueOf(in_schedule_note_service_date_id));
			sb.append(",note_date_of_service_id=" + String.valueOf(note_date_of_service_id));
			sb.append(",in_actual_note_service_date_id=" + String.valueOf(in_actual_note_service_date_id));
			sb.append(",schedule_duration=" + String.valueOf(schedule_duration));
			sb.append(",schedule_start_date_id=" + String.valueOf(schedule_start_date_id));
			sb.append(",schedule_end_date_id=" + String.valueOf(schedule_end_date_id));
			sb.append(",schedule_start_time=" + String.valueOf(schedule_start_time));
			sb.append(",schedule_end_time=" + String.valueOf(schedule_end_time));
			sb.append(",schedule_units=" + String.valueOf(schedule_units));
			sb.append(",schedule_status=" + schedule_status);
			sb.append(",actual_start_date_id=" + String.valueOf(actual_start_date_id));
			sb.append(",actual_end_date_id=" + String.valueOf(actual_end_date_id));
			sb.append(",billing_attending_NPI=" + billing_attending_NPI);
			sb.append(",actual_imported=" + String.valueOf(actual_imported));
			sb.append(",actual_hold_pay=" + String.valueOf(actual_hold_pay));
			sb.append(",actual_hold_bill=" + String.valueOf(actual_hold_bill));
			sb.append(",actual_time_sheet_approved=" + String.valueOf(actual_time_sheet_approved));
			sb.append(",actual_note_approved_bl=" + String.valueOf(actual_note_approved_bl));
			sb.append(",actual_note_approved_pr=" + String.valueOf(actual_note_approved_pr));
			sb.append(",actual_status_BL=" + actual_status_BL);
			sb.append(",actual_emp_pay_type=" + actual_emp_pay_type);
			sb.append(",ineligible_for_billing=" + String.valueOf(ineligible_for_billing));
			sb.append(",actual_adjustment=" + String.valueOf(actual_adjustment));
			sb.append(",actual_check_date_id=" + String.valueOf(actual_check_date_id));
			sb.append(",actual_last_check_date_id=" + String.valueOf(actual_last_check_date_id));
			sb.append(",actual_paid=" + String.valueOf(actual_paid));
			sb.append(",ineligible_for_payroll=" + String.valueOf(ineligible_for_payroll));
			sb.append(",actual_invoice_number=" + String.valueOf(actual_invoice_number));
			sb.append(",actual_billed=" + String.valueOf(actual_billed));
			sb.append(",actual_start_time=" + String.valueOf(actual_start_time));
			sb.append(",actual_end_time=" + String.valueOf(actual_end_time));
			sb.append(",actual_units=" + String.valueOf(actual_units));
			sb.append(",actual_duration=" + String.valueOf(actual_duration));
			sb.append(",service_billed_date_id=" + String.valueOf(service_billed_date_id));
			sb.append(",in_process_units_batched=" + String.valueOf(in_process_units_batched));
			sb.append(",note_duration=" + String.valueOf(note_duration));
			sb.append(",note_end_time=" + String.valueOf(note_end_time));
			sb.append(",note_start_time=" + String.valueOf(note_start_time));
			sb.append(",rate_type=" + rate_type);
			sb.append(",first_encounter=" + String.valueOf(first_encounter));
			sb.append(",units_calculated=" + String.valueOf(units_calculated));
			sb.append(",clqnote_has_child=" + String.valueOf(clqnote_has_child));
			sb.append(",missed_shift_id=" + String.valueOf(missed_shift_id));
			sb.append(",missed_shift_units=" + String.valueOf(missed_shift_units));
			sb.append(",billed_units=" + String.valueOf(billed_units));
			sb.append(",transaction_type=" + transaction_type);
			sb.append(",transaction_date_id=" + String.valueOf(transaction_date_id));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row6Struct row6 = new row6Struct();

				/**
				 * [tBigQueryOutput_5_tBQOB begin ] start
				 */

				ok_Hash.put("tBigQueryOutput_5_tBQOB", false);
				start_Hash.put("tBigQueryOutput_5_tBQOB", System.currentTimeMillis());

				currentVirtualComponent = "tBigQueryOutput_5";

				currentComponent = "tBigQueryOutput_5_tBQOB";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row6");
				}

				int tos_count_tBigQueryOutput_5_tBQOB = 0;

				int nb_line_tBigQueryOutput_5_tBQOB = 0;
				String rowSeparator_tBigQueryOutput_5_tBQOB = "\n";
				String fieldSeparator_tBigQueryOutput_5_tBQOB = ",";
				char escapeChar_tBigQueryOutput_5_tBQOB = "\\".charAt(0);
				char textEnclosure_tBigQueryOutput_5_tBQOB = "\"".charAt(0);

				escapeChar_tBigQueryOutput_5_tBQOB = textEnclosure_tBigQueryOutput_5_tBQOB;

				if (escapeChar_tBigQueryOutput_5_tBQOB == '\\') {
				} else if (escapeChar_tBigQueryOutput_5_tBQOB == textEnclosure_tBigQueryOutput_5_tBQOB) {
				} else {
					throw new RuntimeException("The escape mode only support the '\\' or double text enclosure.");
				}

				java.io.File file_tBigQueryOutput_5_tBQOB = new java.io.File(
						"/Applications/TOSDI-8.0.1/studio/workspace/actual_data.avro");

				file_tBigQueryOutput_5_tBQOB.getParentFile().mkdirs();

				com.talend.csv.CSVWriter csvWriter_tBigQueryOutput_5_tBQOB = new com.talend.csv.CSVWriter(
						new java.io.BufferedWriter(new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(file_tBigQueryOutput_5_tBQOB, false), "ISO-8859-15")));
				resourceMap.put("csvWriter_tBigQueryOutput_5_tBQOB", csvWriter_tBigQueryOutput_5_tBQOB);
				csvWriter_tBigQueryOutput_5_tBQOB.setSeparator(fieldSeparator_tBigQueryOutput_5_tBQOB.charAt(0));

				csvWriter_tBigQueryOutput_5_tBQOB.setLineEnd(rowSeparator_tBigQueryOutput_5_tBQOB);
				csvWriter_tBigQueryOutput_5_tBQOB.setEscapeChar(escapeChar_tBigQueryOutput_5_tBQOB);
				csvWriter_tBigQueryOutput_5_tBQOB.setQuoteChar(textEnclosure_tBigQueryOutput_5_tBQOB);
				csvWriter_tBigQueryOutput_5_tBQOB.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.AUTO);

				/**
				 * [tBigQueryOutput_5_tBQOB begin ] stop
				 */

				/**
				 * [tDBInput_5 begin ] start
				 */

				ok_Hash.put("tDBInput_5", false);
				start_Hash.put("tDBInput_5", System.currentTimeMillis());

				currentComponent = "tDBInput_5";

				int tos_count_tDBInput_5 = 0;

				int nb_line_tDBInput_5 = 0;
				java.sql.Connection conn_tDBInput_5 = null;
				String driverClass_tDBInput_5 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBInput_5 = java.lang.Class.forName(driverClass_tDBInput_5);
				String dbUser_tDBInput_5 = "datafusion";

				final String decryptedPassword_tDBInput_5 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:D/gZ/P1zCqAmWSQLRPadMGYVgImHzWnHP0c5Bomkg7X4nf0onXs=");

				String dbPwd_tDBInput_5 = decryptedPassword_tDBInput_5;

				String url_tDBInput_5 = "jdbc:postgresql://" + "localhost" + ":" + "5431" + "/" + "OnTarget" + "?"
						+ "currentSchema=smallmiracle";

				conn_tDBInput_5 = java.sql.DriverManager.getConnection(url_tDBInput_5, dbUser_tDBInput_5,
						dbPwd_tDBInput_5);

				conn_tDBInput_5.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5.createStatement();

				String dbquery_tDBInput_5 = "WITH schoolstatus AS (\nSELECT schoolyear.schooldistrictid AS schooldistrict,n.date\nFROM smallmiracle.schoolyear\nJOIN sm"
						+ "allmiracle.nonschoolday n ON schoolyear.id = n.schoolyearid\nGROUP BY schoolyear.schooldistrictid, n.date\n), base as(\nsel"
						+ "ect auth.id as Authorization_ID,authd.id as Authorized_ID,\nauth.ClientID as Client_ID,e.id as Employee_ID,dept.id as Dep"
						+ "artment_ID,cc.Id as Client_Cost_Center_ID,empCostCenter.id as Emp_Cost_Center_ID,\ncc_service.ID as Service_Cost_Center_I"
						+ "D,facility.ID as site_id,\ncase when auth.approved then 'a' else 'u' end as Service_Authorization_Approval,\nto_char(date("
						+ "auth.enddate),'YYYYMMDD') as Service_Authorization_Date_ID,\ncase when auth.EndDate<current_date then 'e' else 'u' end as"
						+ " Service_Authorization_Expired,\nauth.description as Service_Authorization_Description,\n'Abound Health, LLC' as company_n"
						+ "ame,\nBLServiceMaster.ServiceAbbreviation AS svcabbreviation,\nBLServiceMaster.ServiceCode AS svccode,\nto_char(date(authd."
						+ "startdate),'YYYYMMDD') as Authorized_Start_Date_ID,\nto_char(date(authd.enddate),'YYYYMMDD') as Authorized_End_Date_ID,\nt"
						+ "o_char(date(auth.startdate),'YYYYMMDD') as Authorization_Start_Date_ID,\nto_char(date(auth.startdate),'YYYYMMDD') as Auth"
						+ "orization_End_Date_ID,\ncoalesce(GLProgramCode.Description,'') AS Service_Program,\np.id as AR_Payer_ID,\np.OverrideNU AS P"
						+ "ayer_Override,\nBLServiceState.Eligible4Billing,\nBLServiceState.Eligible4Payroll,\nBLServiceMaster.RateType,\nauthd.BLServi"
						+ "cePayerID,\nBLServiceLocation.Code AS Service_Place,\nfn_isservicesumandround(authd.id)::int as Service_Is_Sum_And_Round,\n"
						+ "BLServiceState.validatetoschedules::int as Validate_To_Schedules,\ncoalesce(BLServiceMaster.MinimumMinutes,0) as Service_"
						+ "Minimum_Minutes,\nBLServiceMaster.UnitsPerHour as Service_Units_Per_Hour,\ncoalesce(authd.maxunitstotal,0) as Service_Max_"
						+ "Units_Total,\ncoalesce(auth.maxunitstotal,0) as Service_Auth_Max_Units_Total,\nauth.AuthLevelValidation as Auth_Level_Vali"
						+ "dation,\nCASE WHEN auth.AuthLevelValidation THEN COALESCE(auth.MaxUnitsTotal, 0) ELSE COALESCE(authd.MaxUnitsTotal, 0) en"
						+ "d as Total_Units_Authorized,\nc.schooldistrictid as school_district_id\nfrom BLServiceAuthorization auth \ninner join BLSer"
						+ "viceAuthorized authd on auth.ID=authd.blserviceauthorizationid \nINNER JOIN BLServicePayer ON authd.BLServicePayerID = BL"
						+ "ServicePayer.ID\nINNER JOIN BLServiceState ON BLServicePayer.BLStateServiceID = BLServiceState.ID\nLEFT JOIN GLProgramCode"
						+ " ON BLServiceState.GLProgramCodeID = GLProgramCode.ID\nINNER JOIN BLServiceMaster ON BLServiceState.BLServiceMasterID = B"
						+ "LServiceMaster.ID\ninner join clclient c on c.id=auth.clientid\nLEFT JOIN PREmployee e ON c.PREmployeeID = e.ID\nLEFT JOIN "
						+ "prempdemo PRD ON PRD.PREmployeeID = e.ID\nLEFT JOIN prbusdepartment dept on PRD.prbusdepartmentid = dept.id\nLEFT JOIN PRB"
						+ "usCostCenter cc ON c.PRBusCostCenterID = cc.ID\nLEFT JOIN prbuscostcenter cc_service ON authd.PRBusCostCenterID = cc_serv"
						+ "ice.ID\nleft outer join PRBusCostCenter as empCostCenter on prd.PRBusCostCenterID = empCostCenter.ID\nINNER JOIN arpayer p"
						+ " ON auth.ARPayerID = p.ID\nINNER JOIN BLServiceLocation ON authd.BLServiceLocationID = BLServiceLocation.ID\nleft outer jo"
						+ "in FCFacility as facility on authd.FCFacilityID = facility.ID  \n)\nselect coalesce(cast(base.client_id as int),-1) as cli"
						+ "ent_id,\ncoalesce(cast(base.employee_id as int),-1) as Supervisor_id,\ncoalesce(cast(base.client_cost_center_id as int),-1"
						+ ") as client_cost_center_id,\ncoalesce(cast(base.Emp_Cost_Center_ID as int),-1) as Employee_Cost_Center_ID,\ncoalesce(cast("
						+ "base.employee_id as int),-1) as employee_id,\ncoalesce(cast(base.AR_Payer_ID as int),-1) as ar_payer_id,\ncoalesce(cast(ba"
						+ "se.department_id as int),-1) as department_id,coalesce(cast(base.service_cost_center_id as int),-1) as service_cost_cent"
						+ "er_id,\ncoalesce(cast(base.site_id as int),-1) as site_id,coalesce(cast(schoolstatus.schooldistrict as int),-1) as school"
						+ "_district_id,\nbase.Authorization_ID,base.authorized_id,\nbase.Service_Authorization_Approval,base.Service_Authorization_D"
						+ "ate_ID,base.Service_Authorization_Expired,base.Service_Authorization_Description,\nbase.company_name,base.svcabbreviation"
						+ " as service_abbreviation,base.svccode as service_code,base.Authorized_Start_Date_ID,base.Authorized_End_Date_ID,\nbase.Au"
						+ "thorization_Start_Date_ID,base.Authorization_End_Date_ID,base.Service_Program,base.Service_Place,base.Service_Is_Sum_And"
						+ "_Round,base.Validate_To_Schedules,\nbase.Service_Minimum_Minutes,base.Service_Units_Per_Hour,base.Service_Max_Units_Total"
						+ ",base.Service_Auth_Max_Units_Total,\nbase.Auth_Level_Validation,base.total_units_authorized,coalesce(fn_getcurrate(base.a"
						+ "uthorized_id),0) as current_rate,\ncoalesce(cast(actual.premployeeid as int),-1) as caregiver_id,\ncoalesce(cast(to_char(d"
						+ "ate(stg.servicedate),'YYYYMMDD') as int),-1) as inv_stg_service_date_id,\ncoalesce(cast(to_char(date(clqnote_actual.dateo"
						+ "fservice),'YYYYMMDD') as int),-1) as in_schedule_note_service_date_id,\ncoalesce(cast(to_char(date(clqnote_actual.dateofs"
						+ "ervice),'YYYYMMDD') as int),-1) as note_date_of_service_id,\ncoalesce(cast(to_char(date(clqnote_actual.dateofservice),'YY"
						+ "YYMMDD') as int),-1) as in_actual_note_service_date_id,\ncoalesce(schedule.duration,TO_TIMESTAMP('1900-01-01 00:00:00','Y"
						+ "YYY-MM-DD HH24:MI:SS')) as schedule_duration,\ncoalesce(cast(to_char(date(schedule.startdate),'YYYYMMDD') as int),-1) as "
						+ "schedule_start_date_id,\ncoalesce(cast(to_char(date(schedule.enddate),'YYYYMMDD') as int),-1) as schedule_end_date_id,\nco"
						+ "alesce(schedule.starttime,TO_TIMESTAMP('1900-01-01 00:00:00','YYYY-MM-DD HH24:MI:SS')) as schedule_start_time, \ncoalesce"
						+ "(schedule.endtime,TO_TIMESTAMP('1900-01-01 00:00:00','YYYY-MM-DD HH24:MI:SS')) as schedule_end_time,coalesce(schedule.un"
						+ "its,0) as schedule_units,\nCOALESCE(status.description, '') AS schedule_status,\ncoalesce(cast(to_char(date(actual.startda"
						+ "te),'YYYYMMDD') as int),-1) as actual_start_date_id,\ncoalesce(cast(to_char(date(actual.enddate),'YYYYMMDD') as int),-1) "
						+ "as actual_end_date_id, \nformat('%s / %s', p_op_billingnpi, p_op_attendingnpi) as billing_attending_NPI,\nactual.CLQNoteID"
						+ " is not null or actual.BLTimeScheduleID is not null as actual_imported,coalesce(actual.holdpay,false) as actual_hold_pay"
						+ ",coalesce(actual.holdbill,false) as actual_hold_bill,\ntimesheet.ApprovedDate is not null as actual_time_sheet_Approved,\n"
						+ "clqnote_actual.ApprovedDate is not null as actual_note_approved_bl,clqnote_actual.ApprovedDatePR is not null as actual_n"
						+ "ote_approved_pr,\nCASE \n	when NOT invoice.Voided AND invoice.ClaimReferenceNumber IS NULL AND actual.IsCurrent\n		AND actu"
						+ "al.BLInvoiceLineID IS NULL AND NOT actual.Billed AND NOT base.payer_override AND base.Eligible4Billing AND base.RateType"
						+ " = 'P' then 'BLOCKED'\n	when (actual.CLQNoteID is not null and (clqnote_actual.ApprovedDate is null OR clqnote_actual.App"
						+ "rovedDate > actual.DateEdited)) and (actual.BLInvoiceLineID is not null and invoice.BatchConfirmedDate is not null\n    	"
						+ "and (invoice.ClaimReferenceNumber is null OR (invoice.ClaimReferenceNumber is not null and invoice.BLInvoiceIdReplaced I"
						+ "S NOT NULL AND NOT EXISTS (SELECT 1 FROM ARPayment arpaymentinner WHERE arpaymentinner.blinvoicelineid = invline.id AND "
						+ "arpaymentinner.referenceNumber IS NOT NULL))))\n        and (actual.units <> clqnote_actual.unitsCalculated or actual.BLS"
						+ "erviceAuthorizedID <> clqnote_actual.BLServiceAuthorizedID) then 'BLOCKED'\n    when (actual.CLQNoteID is not null and (c"
						+ "lqnote_actual.ApprovedDate is null OR clqnote_actual.ApprovedDate > actual.DateEdited)) then 'REVISION'\n    else 'OK'\nEN"
						+ "D as actual_status_BL,coalesce(busPayType.description,'') as actual_emp_pay_type,\nNOT (actual.BLServiceAuthorizedID is n"
						+ "ull or base.BLServicePayerID is null or (base.Eligible4Billing is null or base.Eligible4Billing)) as ineligible_For_Bill"
						+ "ing,\nIsAdjustment as actual_adjustment,coalesce(cast(to_char(date(prCheck.CheckDate),'YYYYMMDD') as int),-1) as actual_c"
						+ "heck_Date_ID,\ncoalesce(cast(to_char(date(LastCheckDate),'YYYYMMDD') as int),-1) as actual_last_Check_Date_id,coalesce(ac"
						+ "tual.paid,false) as actual_paid,\nNOT (actual.BLServiceAuthorizedID is null or base.BLServicePayerID is null or (base.Eli"
						+ "gible4Billing is null or base.Eligible4Payroll)) as ineligible_For_Payroll,\ncoalesce(invoice.InvoiceNumber,-1) as actual"
						+ "_invoice_Number,coalesce(actual.Billed,false) as actual_billed,coalesce(actual.starttime,TO_TIMESTAMP('1900-01-01 00:00:"
						+ "00','YYYY-MM-DD HH24:MI:SS')) as actual_start_time, \ncoalesce(actual.endtime,TO_TIMESTAMP('1900-01-01 00:00:00','YYYY-MM"
						+ "-DD HH24:MI:SS')) as actual_end_time,\ncoalesce(actual.Units, 0) as actual_units,\ncoalesce(actual.duration,TO_TIMESTAMP('"
						+ "1900-01-01 00:00:00','YYYY-MM-DD HH24:MI:SS')) as actual_duration,\ncoalesce(cast(to_char(date(invline.servicedate),'YYYY"
						+ "MMDD') as int),-1) as service_billed_date_id,\ncoalesce(stg.quantity,0) as in_process_units_batched,\ncoalesce(clqnote_act"
						+ "ual.duration,TO_TIMESTAMP('1900-01-01 00:00:00','YYYY-MM-DD HH24:MI:SS')) as note_duration,\ncoalesce(clqnote_actual.endt"
						+ "ime,TO_TIMESTAMP('1900-01-01 00:00:00','YYYY-MM-DD HH24:MI:SS')) as note_end_time,\ncoalesce(clqnote_actual.starttime,TO_"
						+ "TIMESTAMP('1900-01-01 00:00:00','YYYY-MM-DD HH24:MI:SS')) as note_start_time,\nbase.ratetype as rate_type,\ncoalesce(clqno"
						+ "te_actual.firstencounter,false) as first_encounter,\ncoalesce(clqnote_actual.unitscalculated,0) as units_calculated,\nclqn"
						+ "ote_child.id is not null as clqnote_has_child,\n-1 as missed_shift_ID,\n0 as missed_shift_units,\n0 as billed_units,\ncast('"
						+ "A' as varchar(1)) as Transaction_Type,\ncoalesce(cast(to_char(date(actual.startdate),'YYYYMMDD') as int),-1) as transacti"
						+ "on_date_id\nfrom base\nLEFT JOIN BLTimeActual actual ON actual.blserviceauthorizedid = base.authorized_id\nleft join bltime"
						+ "schedule schedule on actual.bltimescheduleid=schedule.id \nleft join clqnote as clqnote_actual on actual.clqnoteid=clqnot"
						+ "e_actual.id\nleft join clqnote as clqnote_child on clqnote_actual.id=clqnote_child.clqnoteidparent \nLEFT JOIN bltimesched"
						+ "ulestatus status ON schedule.bltimeschedulestatusid = status.id\nleft join schoolstatus on base.school_district_id = scho"
						+ "olstatus.schooldistrict AND schoolstatus.date = schedule.startdate \nleft join blinvoicelinestaged stg on actual.id=stg.b"
						+ "ltimeactualid \nleft join blinvoiceline invline on invline.id=actual.blinvoicelineid \nleft outer join BLInvoice as invoic"
						+ "e on invline.BLInvoiceID = invoice.ID \nleft outer join PRTimesheet as timesheet on actual.PRTimesheetID = timesheet.ID \n"
						+ "left outer join PREmpPayType as empPayType on actual.PREmpPayTypeID = empPayType.ID \nleft outer join PRBusPayType as bus"
						+ "PayType on empPayType.PRBusPayTypeID = busPayType.ID \nleft outer join PREmpPayTran as empPayTran on actual.PREmpPayTranI"
						+ "D = empPayTran.ID \nleft outer join PRCheck as prCheck on empPayTran.PRCheckID = prCheck.ID \ncross join up_findlastcheckd"
						+ "tandadjstflag(actual.id) \ncross join fn_getbillingattendingnpisselect(null, actual.id) \nwhere base.Authorized_id in "
						+ context.ServiceID;

				globalMap.put("tDBInput_5_QUERY", dbquery_tDBInput_5);
				java.sql.ResultSet rs_tDBInput_5 = null;

				try {
					rs_tDBInput_5 = stmt_tDBInput_5.executeQuery(dbquery_tDBInput_5);
					java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5.getMetaData();
					int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5.getColumnCount();

					String tmpContent_tDBInput_5 = null;

					while (rs_tDBInput_5.next()) {
						nb_line_tDBInput_5++;

						if (colQtyInRs_tDBInput_5 < 1) {
							row6.client_id = null;
						} else {

							row6.client_id = rs_tDBInput_5.getInt(1);
							if (rs_tDBInput_5.wasNull()) {
								row6.client_id = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 2) {
							row6.supervisor_id = null;
						} else {

							row6.supervisor_id = rs_tDBInput_5.getInt(2);
							if (rs_tDBInput_5.wasNull()) {
								row6.supervisor_id = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 3) {
							row6.client_cost_center_id = null;
						} else {

							row6.client_cost_center_id = rs_tDBInput_5.getInt(3);
							if (rs_tDBInput_5.wasNull()) {
								row6.client_cost_center_id = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 4) {
							row6.employee_cost_center_id = null;
						} else {

							row6.employee_cost_center_id = rs_tDBInput_5.getInt(4);
							if (rs_tDBInput_5.wasNull()) {
								row6.employee_cost_center_id = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 5) {
							row6.employee_id = null;
						} else {

							row6.employee_id = rs_tDBInput_5.getInt(5);
							if (rs_tDBInput_5.wasNull()) {
								row6.employee_id = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 6) {
							row6.ar_payer_id = null;
						} else {

							row6.ar_payer_id = rs_tDBInput_5.getInt(6);
							if (rs_tDBInput_5.wasNull()) {
								row6.ar_payer_id = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 7) {
							row6.department_id = null;
						} else {

							row6.department_id = rs_tDBInput_5.getInt(7);
							if (rs_tDBInput_5.wasNull()) {
								row6.department_id = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 8) {
							row6.service_cost_center_id = null;
						} else {

							row6.service_cost_center_id = rs_tDBInput_5.getInt(8);
							if (rs_tDBInput_5.wasNull()) {
								row6.service_cost_center_id = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 9) {
							row6.site_id = null;
						} else {

							row6.site_id = rs_tDBInput_5.getInt(9);
							if (rs_tDBInput_5.wasNull()) {
								row6.site_id = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 10) {
							row6.school_district_id = null;
						} else {

							row6.school_district_id = rs_tDBInput_5.getInt(10);
							if (rs_tDBInput_5.wasNull()) {
								row6.school_district_id = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 11) {
							row6.authorization_id = null;
						} else {

							row6.authorization_id = rs_tDBInput_5.getInt(11);
							if (rs_tDBInput_5.wasNull()) {
								row6.authorization_id = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 12) {
							row6.authorized_id = null;
						} else {

							row6.authorized_id = rs_tDBInput_5.getInt(12);
							if (rs_tDBInput_5.wasNull()) {
								row6.authorized_id = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 13) {
							row6.service_authorization_approval = null;
						} else {

							row6.service_authorization_approval = routines.system.JDBCUtil.getString(rs_tDBInput_5, 13,
									false);
						}
						if (colQtyInRs_tDBInput_5 < 14) {
							row6.service_authorization_date_id = null;
						} else {

							row6.service_authorization_date_id = routines.system.JDBCUtil.getString(rs_tDBInput_5, 14,
									false);
						}
						if (colQtyInRs_tDBInput_5 < 15) {
							row6.Service_Authorization_Expired = null;
						} else {

							row6.Service_Authorization_Expired = routines.system.JDBCUtil.getString(rs_tDBInput_5, 15,
									false);
						}
						if (colQtyInRs_tDBInput_5 < 16) {
							row6.service_authorization_description = null;
						} else {

							row6.service_authorization_description = routines.system.JDBCUtil.getString(rs_tDBInput_5,
									16, false);
						}
						if (colQtyInRs_tDBInput_5 < 17) {
							row6.company_name = null;
						} else {

							row6.company_name = routines.system.JDBCUtil.getString(rs_tDBInput_5, 17, false);
						}
						if (colQtyInRs_tDBInput_5 < 18) {
							row6.service_abbreviation = null;
						} else {

							row6.service_abbreviation = routines.system.JDBCUtil.getString(rs_tDBInput_5, 18, false);
						}
						if (colQtyInRs_tDBInput_5 < 19) {
							row6.service_code = null;
						} else {

							row6.service_code = routines.system.JDBCUtil.getString(rs_tDBInput_5, 19, false);
						}
						if (colQtyInRs_tDBInput_5 < 20) {
							row6.authorized_start_date_id = null;
						} else {

							row6.authorized_start_date_id = routines.system.JDBCUtil.getString(rs_tDBInput_5, 20,
									false);
						}
						if (colQtyInRs_tDBInput_5 < 21) {
							row6.authorized_end_date_id = null;
						} else {

							row6.authorized_end_date_id = routines.system.JDBCUtil.getString(rs_tDBInput_5, 21, false);
						}
						if (colQtyInRs_tDBInput_5 < 22) {
							row6.authorization_start_date_id = null;
						} else {

							row6.authorization_start_date_id = routines.system.JDBCUtil.getString(rs_tDBInput_5, 22,
									false);
						}
						if (colQtyInRs_tDBInput_5 < 23) {
							row6.authorization_end_date_id = null;
						} else {

							row6.authorization_end_date_id = routines.system.JDBCUtil.getString(rs_tDBInput_5, 23,
									false);
						}
						if (colQtyInRs_tDBInput_5 < 24) {
							row6.service_program = null;
						} else {

							row6.service_program = routines.system.JDBCUtil.getString(rs_tDBInput_5, 24, false);
						}
						if (colQtyInRs_tDBInput_5 < 25) {
							row6.service_place = null;
						} else {

							row6.service_place = routines.system.JDBCUtil.getString(rs_tDBInput_5, 25, false);
						}
						if (colQtyInRs_tDBInput_5 < 26) {
							row6.service_is_sum_and_round = null;
						} else {

							row6.service_is_sum_and_round = rs_tDBInput_5.getInt(26);
							if (rs_tDBInput_5.wasNull()) {
								row6.service_is_sum_and_round = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 27) {
							row6.validate_to_schedules = null;
						} else {

							row6.validate_to_schedules = rs_tDBInput_5.getInt(27);
							if (rs_tDBInput_5.wasNull()) {
								row6.validate_to_schedules = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 28) {
							row6.service_minimum_minutes = null;
						} else {

							row6.service_minimum_minutes = rs_tDBInput_5.getInt(28);
							if (rs_tDBInput_5.wasNull()) {
								row6.service_minimum_minutes = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 29) {
							row6.service_units_per_hour = null;
						} else {

							row6.service_units_per_hour = rs_tDBInput_5.getInt(29);
							if (rs_tDBInput_5.wasNull()) {
								row6.service_units_per_hour = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 30) {
							row6.service_max_units_total = null;
						} else {

							row6.service_max_units_total = rs_tDBInput_5.getInt(30);
							if (rs_tDBInput_5.wasNull()) {
								row6.service_max_units_total = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 31) {
							row6.service_auth_max_units_total = null;
						} else {

							row6.service_auth_max_units_total = rs_tDBInput_5.getInt(31);
							if (rs_tDBInput_5.wasNull()) {
								row6.service_auth_max_units_total = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 32) {
							row6.auth_level_validation = null;
						} else {

							row6.auth_level_validation = rs_tDBInput_5.getBoolean(32);
							if (rs_tDBInput_5.wasNull()) {
								row6.auth_level_validation = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 33) {
							row6.total_units_authorized = null;
						} else {

							row6.total_units_authorized = rs_tDBInput_5.getInt(33);
							if (rs_tDBInput_5.wasNull()) {
								row6.total_units_authorized = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 34) {
							row6.current_rate = null;
						} else {

							row6.current_rate = rs_tDBInput_5.getFloat(34);
							if (rs_tDBInput_5.wasNull()) {
								row6.current_rate = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 35) {
							row6.caregiver_id = null;
						} else {

							row6.caregiver_id = rs_tDBInput_5.getInt(35);
							if (rs_tDBInput_5.wasNull()) {
								row6.caregiver_id = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 36) {
							row6.inv_stg_service_date_id = null;
						} else {

							row6.inv_stg_service_date_id = rs_tDBInput_5.getInt(36);
							if (rs_tDBInput_5.wasNull()) {
								row6.inv_stg_service_date_id = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 37) {
							row6.in_schedule_note_service_date_id = null;
						} else {

							row6.in_schedule_note_service_date_id = rs_tDBInput_5.getInt(37);
							if (rs_tDBInput_5.wasNull()) {
								row6.in_schedule_note_service_date_id = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 38) {
							row6.note_date_of_service_id = null;
						} else {

							row6.note_date_of_service_id = rs_tDBInput_5.getInt(38);
							if (rs_tDBInput_5.wasNull()) {
								row6.note_date_of_service_id = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 39) {
							row6.in_actual_note_service_date_id = null;
						} else {

							row6.in_actual_note_service_date_id = rs_tDBInput_5.getInt(39);
							if (rs_tDBInput_5.wasNull()) {
								row6.in_actual_note_service_date_id = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 40) {
							row6.schedule_duration = null;
						} else {

							row6.schedule_duration = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 40);
						}
						if (colQtyInRs_tDBInput_5 < 41) {
							row6.schedule_start_date_id = null;
						} else {

							row6.schedule_start_date_id = rs_tDBInput_5.getInt(41);
							if (rs_tDBInput_5.wasNull()) {
								row6.schedule_start_date_id = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 42) {
							row6.schedule_end_date_id = null;
						} else {

							row6.schedule_end_date_id = rs_tDBInput_5.getInt(42);
							if (rs_tDBInput_5.wasNull()) {
								row6.schedule_end_date_id = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 43) {
							row6.schedule_start_time = null;
						} else {

							row6.schedule_start_time = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 43);
						}
						if (colQtyInRs_tDBInput_5 < 44) {
							row6.schedule_end_time = null;
						} else {

							row6.schedule_end_time = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 44);
						}
						if (colQtyInRs_tDBInput_5 < 45) {
							row6.schedule_units = null;
						} else {

							row6.schedule_units = rs_tDBInput_5.getInt(45);
							if (rs_tDBInput_5.wasNull()) {
								row6.schedule_units = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 46) {
							row6.schedule_status = null;
						} else {

							row6.schedule_status = routines.system.JDBCUtil.getString(rs_tDBInput_5, 46, false);
						}
						if (colQtyInRs_tDBInput_5 < 47) {
							row6.actual_start_date_id = null;
						} else {

							row6.actual_start_date_id = rs_tDBInput_5.getInt(47);
							if (rs_tDBInput_5.wasNull()) {
								row6.actual_start_date_id = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 48) {
							row6.actual_end_date_id = null;
						} else {

							row6.actual_end_date_id = rs_tDBInput_5.getInt(48);
							if (rs_tDBInput_5.wasNull()) {
								row6.actual_end_date_id = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 49) {
							row6.billing_attending_NPI = null;
						} else {

							row6.billing_attending_NPI = routines.system.JDBCUtil.getString(rs_tDBInput_5, 49, false);
						}
						if (colQtyInRs_tDBInput_5 < 50) {
							row6.actual_imported = null;
						} else {

							row6.actual_imported = rs_tDBInput_5.getBoolean(50);
							if (rs_tDBInput_5.wasNull()) {
								row6.actual_imported = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 51) {
							row6.actual_hold_pay = null;
						} else {

							row6.actual_hold_pay = rs_tDBInput_5.getBoolean(51);
							if (rs_tDBInput_5.wasNull()) {
								row6.actual_hold_pay = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 52) {
							row6.actual_hold_bill = null;
						} else {

							row6.actual_hold_bill = rs_tDBInput_5.getBoolean(52);
							if (rs_tDBInput_5.wasNull()) {
								row6.actual_hold_bill = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 53) {
							row6.actual_time_sheet_approved = null;
						} else {

							row6.actual_time_sheet_approved = rs_tDBInput_5.getBoolean(53);
							if (rs_tDBInput_5.wasNull()) {
								row6.actual_time_sheet_approved = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 54) {
							row6.actual_note_approved_bl = null;
						} else {

							row6.actual_note_approved_bl = rs_tDBInput_5.getBoolean(54);
							if (rs_tDBInput_5.wasNull()) {
								row6.actual_note_approved_bl = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 55) {
							row6.actual_note_approved_pr = null;
						} else {

							row6.actual_note_approved_pr = rs_tDBInput_5.getBoolean(55);
							if (rs_tDBInput_5.wasNull()) {
								row6.actual_note_approved_pr = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 56) {
							row6.actual_status_BL = null;
						} else {

							row6.actual_status_BL = routines.system.JDBCUtil.getString(rs_tDBInput_5, 56, false);
						}
						if (colQtyInRs_tDBInput_5 < 57) {
							row6.actual_emp_pay_type = null;
						} else {

							row6.actual_emp_pay_type = routines.system.JDBCUtil.getString(rs_tDBInput_5, 57, false);
						}
						if (colQtyInRs_tDBInput_5 < 58) {
							row6.ineligible_for_billing = null;
						} else {

							row6.ineligible_for_billing = rs_tDBInput_5.getBoolean(58);
							if (rs_tDBInput_5.wasNull()) {
								row6.ineligible_for_billing = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 59) {
							row6.actual_adjustment = null;
						} else {

							row6.actual_adjustment = rs_tDBInput_5.getBoolean(59);
							if (rs_tDBInput_5.wasNull()) {
								row6.actual_adjustment = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 60) {
							row6.actual_check_date_id = null;
						} else {

							row6.actual_check_date_id = rs_tDBInput_5.getInt(60);
							if (rs_tDBInput_5.wasNull()) {
								row6.actual_check_date_id = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 61) {
							row6.actual_last_check_date_id = null;
						} else {

							row6.actual_last_check_date_id = rs_tDBInput_5.getInt(61);
							if (rs_tDBInput_5.wasNull()) {
								row6.actual_last_check_date_id = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 62) {
							row6.actual_paid = null;
						} else {

							row6.actual_paid = rs_tDBInput_5.getBoolean(62);
							if (rs_tDBInput_5.wasNull()) {
								row6.actual_paid = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 63) {
							row6.ineligible_for_payroll = null;
						} else {

							row6.ineligible_for_payroll = rs_tDBInput_5.getBoolean(63);
							if (rs_tDBInput_5.wasNull()) {
								row6.ineligible_for_payroll = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 64) {
							row6.actual_invoice_number = null;
						} else {

							row6.actual_invoice_number = rs_tDBInput_5.getInt(64);
							if (rs_tDBInput_5.wasNull()) {
								row6.actual_invoice_number = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 65) {
							row6.actual_billed = null;
						} else {

							row6.actual_billed = rs_tDBInput_5.getBoolean(65);
							if (rs_tDBInput_5.wasNull()) {
								row6.actual_billed = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 66) {
							row6.actual_start_time = null;
						} else {

							row6.actual_start_time = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 66);
						}
						if (colQtyInRs_tDBInput_5 < 67) {
							row6.actual_end_time = null;
						} else {

							row6.actual_end_time = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 67);
						}
						if (colQtyInRs_tDBInput_5 < 68) {
							row6.actual_units = null;
						} else {

							row6.actual_units = rs_tDBInput_5.getInt(68);
							if (rs_tDBInput_5.wasNull()) {
								row6.actual_units = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 69) {
							row6.actual_duration = null;
						} else {

							row6.actual_duration = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 69);
						}
						if (colQtyInRs_tDBInput_5 < 70) {
							row6.service_billed_date_id = null;
						} else {

							row6.service_billed_date_id = rs_tDBInput_5.getInt(70);
							if (rs_tDBInput_5.wasNull()) {
								row6.service_billed_date_id = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 71) {
							row6.in_process_units_batched = null;
						} else {

							row6.in_process_units_batched = rs_tDBInput_5.getInt(71);
							if (rs_tDBInput_5.wasNull()) {
								row6.in_process_units_batched = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 72) {
							row6.note_duration = null;
						} else {

							row6.note_duration = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 72);
						}
						if (colQtyInRs_tDBInput_5 < 73) {
							row6.note_end_time = null;
						} else {

							row6.note_end_time = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 73);
						}
						if (colQtyInRs_tDBInput_5 < 74) {
							row6.note_start_time = null;
						} else {

							row6.note_start_time = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 74);
						}
						if (colQtyInRs_tDBInput_5 < 75) {
							row6.rate_type = null;
						} else {

							row6.rate_type = routines.system.JDBCUtil.getString(rs_tDBInput_5, 75, false);
						}
						if (colQtyInRs_tDBInput_5 < 76) {
							row6.first_encounter = null;
						} else {

							row6.first_encounter = rs_tDBInput_5.getBoolean(76);
							if (rs_tDBInput_5.wasNull()) {
								row6.first_encounter = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 77) {
							row6.units_calculated = null;
						} else {

							row6.units_calculated = rs_tDBInput_5.getInt(77);
							if (rs_tDBInput_5.wasNull()) {
								row6.units_calculated = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 78) {
							row6.clqnote_has_child = null;
						} else {

							row6.clqnote_has_child = rs_tDBInput_5.getBoolean(78);
							if (rs_tDBInput_5.wasNull()) {
								row6.clqnote_has_child = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 79) {
							row6.missed_shift_id = null;
						} else {

							row6.missed_shift_id = rs_tDBInput_5.getInt(79);
							if (rs_tDBInput_5.wasNull()) {
								row6.missed_shift_id = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 80) {
							row6.missed_shift_units = null;
						} else {

							row6.missed_shift_units = rs_tDBInput_5.getInt(80);
							if (rs_tDBInput_5.wasNull()) {
								row6.missed_shift_units = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 81) {
							row6.billed_units = null;
						} else {

							row6.billed_units = rs_tDBInput_5.getInt(81);
							if (rs_tDBInput_5.wasNull()) {
								row6.billed_units = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 82) {
							row6.transaction_type = null;
						} else {

							row6.transaction_type = routines.system.JDBCUtil.getString(rs_tDBInput_5, 82, false);
						}
						if (colQtyInRs_tDBInput_5 < 83) {
							row6.transaction_date_id = null;
						} else {

							row6.transaction_date_id = rs_tDBInput_5.getInt(83);
							if (rs_tDBInput_5.wasNull()) {
								row6.transaction_date_id = null;
							}
						}

						/**
						 * [tDBInput_5 begin ] stop
						 */

						/**
						 * [tDBInput_5 main ] start
						 */

						currentComponent = "tDBInput_5";

						tos_count_tDBInput_5++;

						/**
						 * [tDBInput_5 main ] stop
						 */

						/**
						 * [tDBInput_5 process_data_begin ] start
						 */

						currentComponent = "tDBInput_5";

						/**
						 * [tDBInput_5 process_data_begin ] stop
						 */

						/**
						 * [tBigQueryOutput_5_tBQOB main ] start
						 */

						currentVirtualComponent = "tBigQueryOutput_5";

						currentComponent = "tBigQueryOutput_5_tBQOB";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row6"

							);
						}

						String[] row_tBigQueryOutput_5_tBQOB = new String[83];
						java.util.Arrays.fill(row_tBigQueryOutput_5_tBQOB, "\\N");

						int curColumnIndex_tBigQueryOutput_5_tBQOB = 0;

						curColumnIndex_tBigQueryOutput_5_tBQOB = 0;

						if (row6.client_id != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = String
									.valueOf(row6.client_id);

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 1;

						if (row6.supervisor_id != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = String
									.valueOf(row6.supervisor_id);

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 2;

						if (row6.client_cost_center_id != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = String
									.valueOf(row6.client_cost_center_id);

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 3;

						if (row6.employee_cost_center_id != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = String
									.valueOf(row6.employee_cost_center_id);

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 4;

						if (row6.employee_id != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = String
									.valueOf(row6.employee_id);

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 5;

						if (row6.ar_payer_id != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = String
									.valueOf(row6.ar_payer_id);

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 6;

						if (row6.department_id != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = String
									.valueOf(row6.department_id);

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 7;

						if (row6.service_cost_center_id != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = String
									.valueOf(row6.service_cost_center_id);

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 8;

						if (row6.site_id != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = String
									.valueOf(row6.site_id);

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 9;

						if (row6.school_district_id != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = String
									.valueOf(row6.school_district_id);

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 10;

						if (row6.authorization_id != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = String
									.valueOf(row6.authorization_id);

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 11;

						if (row6.authorized_id != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = String
									.valueOf(row6.authorized_id);

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 12;

						if (row6.service_authorization_approval != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = row6.service_authorization_approval;

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 13;

						if (row6.service_authorization_date_id != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = row6.service_authorization_date_id;

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 14;

						if (row6.Service_Authorization_Expired != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = row6.Service_Authorization_Expired;

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 15;

						if (row6.service_authorization_description != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = row6.service_authorization_description;

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 16;

						if (row6.company_name != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = row6.company_name;

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 17;

						if (row6.service_abbreviation != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = row6.service_abbreviation;

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 18;

						if (row6.service_code != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = row6.service_code;

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 19;

						if (row6.authorized_start_date_id != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = row6.authorized_start_date_id;

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 20;

						if (row6.authorized_end_date_id != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = row6.authorized_end_date_id;

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 21;

						if (row6.authorization_start_date_id != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = row6.authorization_start_date_id;

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 22;

						if (row6.authorization_end_date_id != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = row6.authorization_end_date_id;

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 23;

						if (row6.service_program != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = row6.service_program;

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 24;

						if (row6.service_place != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = row6.service_place;

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 25;

						if (row6.service_is_sum_and_round != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = String
									.valueOf(row6.service_is_sum_and_round);

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 26;

						if (row6.validate_to_schedules != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = String
									.valueOf(row6.validate_to_schedules);

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 27;

						if (row6.service_minimum_minutes != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = String
									.valueOf(row6.service_minimum_minutes);

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 28;

						if (row6.service_units_per_hour != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = String
									.valueOf(row6.service_units_per_hour);

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 29;

						if (row6.service_max_units_total != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = String
									.valueOf(row6.service_max_units_total);

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 30;

						if (row6.service_auth_max_units_total != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = String
									.valueOf(row6.service_auth_max_units_total);

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 31;

						if (row6.auth_level_validation != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = String
									.valueOf(true == row6.auth_level_validation ? "1" : "0");

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 32;

						if (row6.total_units_authorized != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = String
									.valueOf(row6.total_units_authorized);

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 33;

						if (row6.current_rate != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = String
									.valueOf(row6.current_rate);

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 34;

						if (row6.caregiver_id != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = String
									.valueOf(row6.caregiver_id);

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 35;

						if (row6.inv_stg_service_date_id != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = String
									.valueOf(row6.inv_stg_service_date_id);

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 36;

						if (row6.in_schedule_note_service_date_id != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = String
									.valueOf(row6.in_schedule_note_service_date_id);

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 37;

						if (row6.note_date_of_service_id != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = String
									.valueOf(row6.note_date_of_service_id);

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 38;

						if (row6.in_actual_note_service_date_id != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = String
									.valueOf(row6.in_actual_note_service_date_id);

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 39;

						if (row6.schedule_duration != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = FormatterUtils
									.format_Date(row6.schedule_duration, "yyyy-MM-dd HH:mm:ss");

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 40;

						if (row6.schedule_start_date_id != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = String
									.valueOf(row6.schedule_start_date_id);

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 41;

						if (row6.schedule_end_date_id != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = String
									.valueOf(row6.schedule_end_date_id);

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 42;

						if (row6.schedule_start_time != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = FormatterUtils
									.format_Date(row6.schedule_start_time, "yyyy-MM-dd HH:mm:ss");

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 43;

						if (row6.schedule_end_time != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = FormatterUtils
									.format_Date(row6.schedule_end_time, "yyyy-MM-dd HH:mm:ss");

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 44;

						if (row6.schedule_units != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = String
									.valueOf(row6.schedule_units);

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 45;

						if (row6.schedule_status != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = row6.schedule_status;

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 46;

						if (row6.actual_start_date_id != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = String
									.valueOf(row6.actual_start_date_id);

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 47;

						if (row6.actual_end_date_id != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = String
									.valueOf(row6.actual_end_date_id);

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 48;

						if (row6.billing_attending_NPI != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = row6.billing_attending_NPI;

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 49;

						if (row6.actual_imported != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = String
									.valueOf(true == row6.actual_imported ? "1" : "0");

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 50;

						if (row6.actual_hold_pay != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = String
									.valueOf(true == row6.actual_hold_pay ? "1" : "0");

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 51;

						if (row6.actual_hold_bill != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = String
									.valueOf(true == row6.actual_hold_bill ? "1" : "0");

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 52;

						if (row6.actual_time_sheet_approved != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = String
									.valueOf(true == row6.actual_time_sheet_approved ? "1" : "0");

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 53;

						if (row6.actual_note_approved_bl != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = String
									.valueOf(true == row6.actual_note_approved_bl ? "1" : "0");

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 54;

						if (row6.actual_note_approved_pr != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = String
									.valueOf(true == row6.actual_note_approved_pr ? "1" : "0");

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 55;

						if (row6.actual_status_BL != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = row6.actual_status_BL;

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 56;

						if (row6.actual_emp_pay_type != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = row6.actual_emp_pay_type;

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 57;

						if (row6.ineligible_for_billing != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = String
									.valueOf(true == row6.ineligible_for_billing ? "1" : "0");

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 58;

						if (row6.actual_adjustment != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = String
									.valueOf(true == row6.actual_adjustment ? "1" : "0");

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 59;

						if (row6.actual_check_date_id != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = String
									.valueOf(row6.actual_check_date_id);

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 60;

						if (row6.actual_last_check_date_id != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = String
									.valueOf(row6.actual_last_check_date_id);

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 61;

						if (row6.actual_paid != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = String
									.valueOf(true == row6.actual_paid ? "1" : "0");

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 62;

						if (row6.ineligible_for_payroll != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = String
									.valueOf(true == row6.ineligible_for_payroll ? "1" : "0");

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 63;

						if (row6.actual_invoice_number != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = String
									.valueOf(row6.actual_invoice_number);

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 64;

						if (row6.actual_billed != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = String
									.valueOf(true == row6.actual_billed ? "1" : "0");

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 65;

						if (row6.actual_start_time != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = FormatterUtils
									.format_Date(row6.actual_start_time, "yyyy-MM-dd HH:mm:ss");

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 66;

						if (row6.actual_end_time != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = FormatterUtils
									.format_Date(row6.actual_end_time, "yyyy-MM-dd HH:mm:ss");

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 67;

						if (row6.actual_units != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = String
									.valueOf(row6.actual_units);

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 68;

						if (row6.actual_duration != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = FormatterUtils
									.format_Date(row6.actual_duration, "yyyy-MM-dd HH:mm:ss");

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 69;

						if (row6.service_billed_date_id != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = String
									.valueOf(row6.service_billed_date_id);

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 70;

						if (row6.in_process_units_batched != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = String
									.valueOf(row6.in_process_units_batched);

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 71;

						if (row6.note_duration != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = FormatterUtils
									.format_Date(row6.note_duration, "yyyy-MM-dd HH:mm:ss");

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 72;

						if (row6.note_end_time != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = FormatterUtils
									.format_Date(row6.note_end_time, "yyyy-MM-dd HH:mm:ss");

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 73;

						if (row6.note_start_time != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = FormatterUtils
									.format_Date(row6.note_start_time, "yyyy-MM-dd HH:mm:ss");

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 74;

						if (row6.rate_type != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = row6.rate_type;

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 75;

						if (row6.first_encounter != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = String
									.valueOf(true == row6.first_encounter ? "1" : "0");

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 76;

						if (row6.units_calculated != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = String
									.valueOf(row6.units_calculated);

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 77;

						if (row6.clqnote_has_child != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = String
									.valueOf(true == row6.clqnote_has_child ? "1" : "0");

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 78;

						if (row6.missed_shift_id != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = String
									.valueOf(row6.missed_shift_id);

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 79;

						if (row6.missed_shift_units != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = String
									.valueOf(row6.missed_shift_units);

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 80;

						if (row6.billed_units != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = String
									.valueOf(row6.billed_units);

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 81;

						if (row6.transaction_type != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = row6.transaction_type;

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 82;

						if (row6.transaction_date_id != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = String
									.valueOf(row6.transaction_date_id);

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						csvWriter_tBigQueryOutput_5_tBQOB.writeNextEnhance(row_tBigQueryOutput_5_tBQOB, "");
						nb_line_tBigQueryOutput_5_tBQOB++;

						tos_count_tBigQueryOutput_5_tBQOB++;

						/**
						 * [tBigQueryOutput_5_tBQOB main ] stop
						 */

						/**
						 * [tBigQueryOutput_5_tBQOB process_data_begin ] start
						 */

						currentVirtualComponent = "tBigQueryOutput_5";

						currentComponent = "tBigQueryOutput_5_tBQOB";

						/**
						 * [tBigQueryOutput_5_tBQOB process_data_begin ] stop
						 */

						/**
						 * [tBigQueryOutput_5_tBQOB process_data_end ] start
						 */

						currentVirtualComponent = "tBigQueryOutput_5";

						currentComponent = "tBigQueryOutput_5_tBQOB";

						/**
						 * [tBigQueryOutput_5_tBQOB process_data_end ] stop
						 */

						/**
						 * [tDBInput_5 process_data_end ] start
						 */

						currentComponent = "tDBInput_5";

						/**
						 * [tDBInput_5 process_data_end ] stop
						 */

						/**
						 * [tDBInput_5 end ] start
						 */

						currentComponent = "tDBInput_5";

					}
				} finally {
					if (rs_tDBInput_5 != null) {
						rs_tDBInput_5.close();
					}
					if (stmt_tDBInput_5 != null) {
						stmt_tDBInput_5.close();
					}
					if (conn_tDBInput_5 != null && !conn_tDBInput_5.isClosed()) {

						conn_tDBInput_5.commit();

						conn_tDBInput_5.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}
				globalMap.put("tDBInput_5_NB_LINE", nb_line_tDBInput_5);

				ok_Hash.put("tDBInput_5", true);
				end_Hash.put("tDBInput_5", System.currentTimeMillis());

				/**
				 * [tDBInput_5 end ] stop
				 */

				/**
				 * [tBigQueryOutput_5_tBQOB end ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_5";

				currentComponent = "tBigQueryOutput_5_tBQOB";

				if (csvWriter_tBigQueryOutput_5_tBQOB != null) {
					csvWriter_tBigQueryOutput_5_tBQOB.close();
				}
				resourceMap.put("finish_tBigQueryOutput_5_tBQOB", true);
				globalMap.put("tBigQueryOutput_5_tBQOB_NB_LINE", nb_line_tBigQueryOutput_5_tBQOB);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row6");
				}

				ok_Hash.put("tBigQueryOutput_5_tBQOB", true);
				end_Hash.put("tBigQueryOutput_5_tBQOB", System.currentTimeMillis());

				/**
				 * [tBigQueryOutput_5_tBQOB end ] stop
				 */

				/**
				 * [tBigQueryOutput_5_tBQBE begin ] start
				 */

				ok_Hash.put("tBigQueryOutput_5_tBQBE", false);
				start_Hash.put("tBigQueryOutput_5_tBQBE", System.currentTimeMillis());

				currentVirtualComponent = "tBigQueryOutput_5";

				currentComponent = "tBigQueryOutput_5_tBQBE";

				int tos_count_tBigQueryOutput_5_tBQBE = 0;

				/* ----START-CREATING-CLIENT (Cloud API)---- */

				com.google.auth.oauth2.GoogleCredentials credentials_tBigQueryOutput_5;
				java.io.File credentialsFile_tBigQueryOutput_5 = new java.io.File(
						"/Users/jsun/Documents/WCIWork/OnTarget/code/otmirror-060322-9471bb896012.json");
				try (java.io.FileInputStream credentialsStream_tBigQueryOutput_5 = new java.io.FileInputStream(
						credentialsFile_tBigQueryOutput_5)) {
					credentials_tBigQueryOutput_5 = com.google.auth.oauth2.ServiceAccountCredentials
							.fromStream(credentialsStream_tBigQueryOutput_5);
				}

				com.google.cloud.bigquery.BigQuery bigquery_tBigQueryOutput_5 = com.google.cloud.bigquery.BigQueryOptions
						.newBuilder().setCredentials(credentials_tBigQueryOutput_5).setProjectId("otmirror-060322")
						.build().getService();

				/* ----END-CREATING-CLIENT (Cloud API)---- */

				long nb_line_tBigQueryOutput_5 = 0;

				com.google.auth.Credentials credential_tBigQueryOutput_5 = null;
				try {
					credential_tBigQueryOutput_5 = com.google.auth.oauth2.GoogleCredentials
							.fromStream(new java.io.FileInputStream(
									"/Users/jsun/Documents/WCIWork/OnTarget/code/otmirror-060322-9471bb896012.json"));
				} catch (IOException e_tBigQueryOutput_5) {
					globalMap.put("tBigQueryOutput_5_ERROR_MESSAGE", e_tBigQueryOutput_5.getMessage());
				}
				com.google.cloud.storage.Storage storage_tBigQueryOutput_5 = com.google.cloud.storage.StorageOptions
						.newBuilder().setCredentials(credential_tBigQueryOutput_5).build().getService();

				java.io.File file_tBigQueryOutput_5 = new java.io.File(
						"/Applications/TOSDI-8.0.1/studio/workspace/actual_data.avro");

				com.google.cloud.storage.BlobInfo blobInfo_tBigQueryOutput_5 = com.google.cloud.storage.BlobInfo
						.newBuilder("dw-tmp", file_tBigQueryOutput_5.getName()).build();
				storage_tBigQueryOutput_5.create(blobInfo_tBigQueryOutput_5,
						java.nio.file.Files.readAllBytes(file_tBigQueryOutput_5.toPath()));

				/* ----END-UPLOADING-FILE---- */

				/* ----START-CREATING-JOB (Cloud API)---- */
				com.google.cloud.bigquery.TableId tableId_tBigQueryOutput_5 = com.google.cloud.bigquery.TableId
						.of("otmirror-060322", "DW", "fact_transactions");
				com.google.cloud.bigquery.LoadJobConfiguration.Builder loadJobBuilder_tBigQueryOutput_5 = com.google.cloud.bigquery.LoadJobConfiguration
						.newBuilder(tableId_tBigQueryOutput_5, "gs://dw-tmp/actual_data.avro");

				boolean dropTable_tBigQueryOutput_5 = false;

				if (dropTable_tBigQueryOutput_5
						&& bigquery_tBigQueryOutput_5.getTable(tableId_tBigQueryOutput_5) != null) {
					boolean deleted = bigquery_tBigQueryOutput_5.delete(tableId_tBigQueryOutput_5);
					if (deleted) {

					} else {
						throw new RuntimeException("Unable to delete table " + tableId_tBigQueryOutput_5);
					}
				}

				if (bigquery_tBigQueryOutput_5.getTable(tableId_tBigQueryOutput_5) == null) {
					java.util.List<com.google.cloud.bigquery.Field> fields_tBigQueryOutput_5 = new java.util.ArrayList<>();

					com.google.cloud.bigquery.Field field_0 = com.google.cloud.bigquery.Field
							.newBuilder("client_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_0);

					com.google.cloud.bigquery.Field field_1 = com.google.cloud.bigquery.Field
							.newBuilder("supervisor_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_1);

					com.google.cloud.bigquery.Field field_2 = com.google.cloud.bigquery.Field
							.newBuilder("client_cost_center_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_2);

					com.google.cloud.bigquery.Field field_3 = com.google.cloud.bigquery.Field
							.newBuilder("employee_cost_center_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_3);

					com.google.cloud.bigquery.Field field_4 = com.google.cloud.bigquery.Field
							.newBuilder("employee_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_4);

					com.google.cloud.bigquery.Field field_5 = com.google.cloud.bigquery.Field
							.newBuilder("ar_payer_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_5);

					com.google.cloud.bigquery.Field field_6 = com.google.cloud.bigquery.Field
							.newBuilder("department_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_6);

					com.google.cloud.bigquery.Field field_7 = com.google.cloud.bigquery.Field
							.newBuilder("service_cost_center_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_7);

					com.google.cloud.bigquery.Field field_8 = com.google.cloud.bigquery.Field
							.newBuilder("site_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_8);

					com.google.cloud.bigquery.Field field_9 = com.google.cloud.bigquery.Field
							.newBuilder("school_district_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_9);

					com.google.cloud.bigquery.Field field_10 = com.google.cloud.bigquery.Field
							.newBuilder("authorization_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_10);

					com.google.cloud.bigquery.Field field_11 = com.google.cloud.bigquery.Field
							.newBuilder("authorized_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_11);

					com.google.cloud.bigquery.Field field_12 = com.google.cloud.bigquery.Field
							.newBuilder("service_authorization_approval",
									com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_12);

					com.google.cloud.bigquery.Field field_13 = com.google.cloud.bigquery.Field
							.newBuilder("service_authorization_date_id",
									com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_13);

					com.google.cloud.bigquery.Field field_14 = com.google.cloud.bigquery.Field
							.newBuilder("Service_Authorization_Expired",
									com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_14);

					com.google.cloud.bigquery.Field field_15 = com.google.cloud.bigquery.Field
							.newBuilder("service_authorization_description",
									com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_15);

					com.google.cloud.bigquery.Field field_16 = com.google.cloud.bigquery.Field
							.newBuilder("company_name", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_16);

					com.google.cloud.bigquery.Field field_17 = com.google.cloud.bigquery.Field
							.newBuilder("service_abbreviation", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_17);

					com.google.cloud.bigquery.Field field_18 = com.google.cloud.bigquery.Field
							.newBuilder("service_code", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_18);

					com.google.cloud.bigquery.Field field_19 = com.google.cloud.bigquery.Field
							.newBuilder("authorized_start_date_id", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_19);

					com.google.cloud.bigquery.Field field_20 = com.google.cloud.bigquery.Field
							.newBuilder("authorized_end_date_id", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_20);

					com.google.cloud.bigquery.Field field_21 = com.google.cloud.bigquery.Field
							.newBuilder("authorization_start_date_id",
									com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_21);

					com.google.cloud.bigquery.Field field_22 = com.google.cloud.bigquery.Field
							.newBuilder("authorization_end_date_id", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_22);

					com.google.cloud.bigquery.Field field_23 = com.google.cloud.bigquery.Field
							.newBuilder("service_program", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_23);

					com.google.cloud.bigquery.Field field_24 = com.google.cloud.bigquery.Field
							.newBuilder("service_place", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_24);

					com.google.cloud.bigquery.Field field_25 = com.google.cloud.bigquery.Field
							.newBuilder("service_is_sum_and_round", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_25);

					com.google.cloud.bigquery.Field field_26 = com.google.cloud.bigquery.Field
							.newBuilder("validate_to_schedules", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_26);

					com.google.cloud.bigquery.Field field_27 = com.google.cloud.bigquery.Field
							.newBuilder("service_minimum_minutes", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_27);

					com.google.cloud.bigquery.Field field_28 = com.google.cloud.bigquery.Field
							.newBuilder("service_units_per_hour", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_28);

					com.google.cloud.bigquery.Field field_29 = com.google.cloud.bigquery.Field
							.newBuilder("service_max_units_total", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_29);

					com.google.cloud.bigquery.Field field_30 = com.google.cloud.bigquery.Field
							.newBuilder("service_auth_max_units_total",
									com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_30);

					com.google.cloud.bigquery.Field field_31 = com.google.cloud.bigquery.Field
							.newBuilder("auth_level_validation", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_31);

					com.google.cloud.bigquery.Field field_32 = com.google.cloud.bigquery.Field
							.newBuilder("total_units_authorized", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_32);

					com.google.cloud.bigquery.Field field_33 = com.google.cloud.bigquery.Field
							.newBuilder("current_rate", com.google.cloud.bigquery.LegacySQLTypeName.FLOAT)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_33);

					com.google.cloud.bigquery.Field field_34 = com.google.cloud.bigquery.Field
							.newBuilder("caregiver_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_34);

					com.google.cloud.bigquery.Field field_35 = com.google.cloud.bigquery.Field
							.newBuilder("inv_stg_service_date_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_35);

					com.google.cloud.bigquery.Field field_36 = com.google.cloud.bigquery.Field
							.newBuilder("in_schedule_note_service_date_id",
									com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_36);

					com.google.cloud.bigquery.Field field_37 = com.google.cloud.bigquery.Field
							.newBuilder("note_date_of_service_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_37);

					com.google.cloud.bigquery.Field field_38 = com.google.cloud.bigquery.Field
							.newBuilder("in_actual_note_service_date_id",
									com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_38);

					com.google.cloud.bigquery.Field field_39 = com.google.cloud.bigquery.Field
							.newBuilder("schedule_duration", com.google.cloud.bigquery.LegacySQLTypeName.TIMESTAMP)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_39);

					com.google.cloud.bigquery.Field field_40 = com.google.cloud.bigquery.Field
							.newBuilder("schedule_start_date_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_40);

					com.google.cloud.bigquery.Field field_41 = com.google.cloud.bigquery.Field
							.newBuilder("schedule_end_date_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_41);

					com.google.cloud.bigquery.Field field_42 = com.google.cloud.bigquery.Field
							.newBuilder("schedule_start_time", com.google.cloud.bigquery.LegacySQLTypeName.TIMESTAMP)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_42);

					com.google.cloud.bigquery.Field field_43 = com.google.cloud.bigquery.Field
							.newBuilder("schedule_end_time", com.google.cloud.bigquery.LegacySQLTypeName.TIMESTAMP)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_43);

					com.google.cloud.bigquery.Field field_44 = com.google.cloud.bigquery.Field
							.newBuilder("schedule_units", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_44);

					com.google.cloud.bigquery.Field field_45 = com.google.cloud.bigquery.Field
							.newBuilder("schedule_status", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_45);

					com.google.cloud.bigquery.Field field_46 = com.google.cloud.bigquery.Field
							.newBuilder("actual_start_date_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_46);

					com.google.cloud.bigquery.Field field_47 = com.google.cloud.bigquery.Field
							.newBuilder("actual_end_date_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_47);

					com.google.cloud.bigquery.Field field_48 = com.google.cloud.bigquery.Field
							.newBuilder("billing_attending_NPI", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_48);

					com.google.cloud.bigquery.Field field_49 = com.google.cloud.bigquery.Field
							.newBuilder("actual_imported", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_49);

					com.google.cloud.bigquery.Field field_50 = com.google.cloud.bigquery.Field
							.newBuilder("actual_hold_pay", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_50);

					com.google.cloud.bigquery.Field field_51 = com.google.cloud.bigquery.Field
							.newBuilder("actual_hold_bill", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_51);

					com.google.cloud.bigquery.Field field_52 = com.google.cloud.bigquery.Field
							.newBuilder("actual_time_sheet_approved",
									com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_52);

					com.google.cloud.bigquery.Field field_53 = com.google.cloud.bigquery.Field
							.newBuilder("actual_note_approved_bl", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_53);

					com.google.cloud.bigquery.Field field_54 = com.google.cloud.bigquery.Field
							.newBuilder("actual_note_approved_pr", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_54);

					com.google.cloud.bigquery.Field field_55 = com.google.cloud.bigquery.Field
							.newBuilder("actual_status_BL", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_55);

					com.google.cloud.bigquery.Field field_56 = com.google.cloud.bigquery.Field
							.newBuilder("actual_emp_pay_type", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_56);

					com.google.cloud.bigquery.Field field_57 = com.google.cloud.bigquery.Field
							.newBuilder("ineligible_for_billing", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_57);

					com.google.cloud.bigquery.Field field_58 = com.google.cloud.bigquery.Field
							.newBuilder("actual_adjustment", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_58);

					com.google.cloud.bigquery.Field field_59 = com.google.cloud.bigquery.Field
							.newBuilder("actual_check_date_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_59);

					com.google.cloud.bigquery.Field field_60 = com.google.cloud.bigquery.Field
							.newBuilder("actual_last_check_date_id",
									com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_60);

					com.google.cloud.bigquery.Field field_61 = com.google.cloud.bigquery.Field
							.newBuilder("actual_paid", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_61);

					com.google.cloud.bigquery.Field field_62 = com.google.cloud.bigquery.Field
							.newBuilder("ineligible_for_payroll", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_62);

					com.google.cloud.bigquery.Field field_63 = com.google.cloud.bigquery.Field
							.newBuilder("actual_invoice_number", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_63);

					com.google.cloud.bigquery.Field field_64 = com.google.cloud.bigquery.Field
							.newBuilder("actual_billed", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_64);

					com.google.cloud.bigquery.Field field_65 = com.google.cloud.bigquery.Field
							.newBuilder("actual_start_time", com.google.cloud.bigquery.LegacySQLTypeName.TIMESTAMP)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_65);

					com.google.cloud.bigquery.Field field_66 = com.google.cloud.bigquery.Field
							.newBuilder("actual_end_time", com.google.cloud.bigquery.LegacySQLTypeName.TIMESTAMP)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_66);

					com.google.cloud.bigquery.Field field_67 = com.google.cloud.bigquery.Field
							.newBuilder("actual_units", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_67);

					com.google.cloud.bigquery.Field field_68 = com.google.cloud.bigquery.Field
							.newBuilder("actual_duration", com.google.cloud.bigquery.LegacySQLTypeName.TIMESTAMP)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_68);

					com.google.cloud.bigquery.Field field_69 = com.google.cloud.bigquery.Field
							.newBuilder("service_billed_date_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_69);

					com.google.cloud.bigquery.Field field_70 = com.google.cloud.bigquery.Field
							.newBuilder("in_process_units_batched", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_70);

					com.google.cloud.bigquery.Field field_71 = com.google.cloud.bigquery.Field
							.newBuilder("note_duration", com.google.cloud.bigquery.LegacySQLTypeName.TIMESTAMP)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_71);

					com.google.cloud.bigquery.Field field_72 = com.google.cloud.bigquery.Field
							.newBuilder("note_end_time", com.google.cloud.bigquery.LegacySQLTypeName.TIMESTAMP)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_72);

					com.google.cloud.bigquery.Field field_73 = com.google.cloud.bigquery.Field
							.newBuilder("note_start_time", com.google.cloud.bigquery.LegacySQLTypeName.TIMESTAMP)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_73);

					com.google.cloud.bigquery.Field field_74 = com.google.cloud.bigquery.Field
							.newBuilder("rate_type", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_74);

					com.google.cloud.bigquery.Field field_75 = com.google.cloud.bigquery.Field
							.newBuilder("first_encounter", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_75);

					com.google.cloud.bigquery.Field field_76 = com.google.cloud.bigquery.Field
							.newBuilder("units_calculated", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_76);

					com.google.cloud.bigquery.Field field_77 = com.google.cloud.bigquery.Field
							.newBuilder("clqnote_has_child", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_77);

					com.google.cloud.bigquery.Field field_78 = com.google.cloud.bigquery.Field
							.newBuilder("missed_shift_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_78);

					com.google.cloud.bigquery.Field field_79 = com.google.cloud.bigquery.Field
							.newBuilder("missed_shift_units", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_79);

					com.google.cloud.bigquery.Field field_80 = com.google.cloud.bigquery.Field
							.newBuilder("billed_units", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_80);

					com.google.cloud.bigquery.Field field_81 = com.google.cloud.bigquery.Field
							.newBuilder("transaction_type", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_81);

					com.google.cloud.bigquery.Field field_82 = com.google.cloud.bigquery.Field
							.newBuilder("transaction_date_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_82);

					com.google.cloud.bigquery.Schema schema_tBigQueryOutput_5 = com.google.cloud.bigquery.Schema
							.of(fields_tBigQueryOutput_5);
					com.google.cloud.bigquery.TableInfo tableInfo_tBigQueryOutput_5 = com.google.cloud.bigquery.TableInfo
							.newBuilder(tableId_tBigQueryOutput_5,
									com.google.cloud.bigquery.StandardTableDefinition.of(schema_tBigQueryOutput_5))
							.build();
					com.google.cloud.bigquery.Table table_tBigQueryOutput_5 = bigquery_tBigQueryOutput_5
							.create(tableInfo_tBigQueryOutput_5);
					loadJobBuilder_tBigQueryOutput_5.setSchema(schema_tBigQueryOutput_5);
					loadJobBuilder_tBigQueryOutput_5
							.setCreateDisposition(com.google.cloud.bigquery.JobInfo.CreateDisposition.CREATE_IF_NEEDED);

				} else {
					loadJobBuilder_tBigQueryOutput_5
							.setCreateDisposition(com.google.cloud.bigquery.JobInfo.CreateDisposition.CREATE_NEVER);
				}

				loadJobBuilder_tBigQueryOutput_5
						.setWriteDisposition(com.google.cloud.bigquery.JobInfo.WriteDisposition.WRITE_APPEND);
				loadJobBuilder_tBigQueryOutput_5.setDestinationTable(tableId_tBigQueryOutput_5);
				com.google.cloud.bigquery.CsvOptions.Builder csvOptions_tBigQueryOutput_5 = com.google.cloud.bigquery.CsvOptions
						.newBuilder();
				csvOptions_tBigQueryOutput_5.setAllowQuotedNewLines(true);
				csvOptions_tBigQueryOutput_5.setSkipLeadingRows(0);

				csvOptions_tBigQueryOutput_5.setFieldDelimiter(",");

				loadJobBuilder_tBigQueryOutput_5.setFormatOptions(csvOptions_tBigQueryOutput_5.build());
				loadJobBuilder_tBigQueryOutput_5.setNullMarker("\\N");
				com.google.cloud.bigquery.Job job_tBigQueryOutput_5 = bigquery_tBigQueryOutput_5
						.create(com.google.cloud.bigquery.JobInfo.of(loadJobBuilder_tBigQueryOutput_5.build()));
				job_tBigQueryOutput_5 = job_tBigQueryOutput_5
						.waitFor(com.google.cloud.RetryOption.initialRetryDelay(org.threeten.bp.Duration.ofSeconds(1)));
				com.google.gson.Gson gsonObject_tBigQueryOutput_5 = new com.google.gson.Gson();
				if (job_tBigQueryOutput_5 != null && job_tBigQueryOutput_5.getStatus().getError() == null) {
					globalMap.put("tBigQueryOutput_5_JOBID", job_tBigQueryOutput_5.getJobId().getJob());
					globalMap.put("tBigQueryOutput_5_STATISTICS",
							gsonObject_tBigQueryOutput_5.toJson(job_tBigQueryOutput_5.getStatistics()));

				} else {
					if (job_tBigQueryOutput_5 == null) {
						throw new RuntimeException("Job no longer exists");
					}
					globalMap.put("tBigQueryOutput_5_JOBID", job_tBigQueryOutput_5.getJobId().getJob());
					globalMap.put("tBigQueryOutput_5_STATISTICS",
							gsonObject_tBigQueryOutput_5.toJson(job_tBigQueryOutput_5.getStatistics()));
					List<com.google.cloud.bigquery.BigQueryError> errorList = job_tBigQueryOutput_5.getStatus()
							.getExecutionErrors();
					throw new RuntimeException("Job failed: " + errorList.get(errorList.size() - 1));
				}

				/* ----END-CREATING-JOB (Cloud API)---- */

				/**
				 * [tBigQueryOutput_5_tBQBE begin ] stop
				 */

				/**
				 * [tBigQueryOutput_5_tBQBE main ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_5";

				currentComponent = "tBigQueryOutput_5_tBQBE";

				tos_count_tBigQueryOutput_5_tBQBE++;

				/**
				 * [tBigQueryOutput_5_tBQBE main ] stop
				 */

				/**
				 * [tBigQueryOutput_5_tBQBE process_data_begin ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_5";

				currentComponent = "tBigQueryOutput_5_tBQBE";

				/**
				 * [tBigQueryOutput_5_tBQBE process_data_begin ] stop
				 */

				/**
				 * [tBigQueryOutput_5_tBQBE process_data_end ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_5";

				currentComponent = "tBigQueryOutput_5_tBQBE";

				/**
				 * [tBigQueryOutput_5_tBQBE process_data_end ] stop
				 */

				/**
				 * [tBigQueryOutput_5_tBQBE end ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_5";

				currentComponent = "tBigQueryOutput_5_tBQBE";

				ok_Hash.put("tBigQueryOutput_5_tBQBE", true);
				end_Hash.put("tBigQueryOutput_5_tBQBE", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk5", 0, "ok");
				}
				tJava_8Process(globalMap);

				/**
				 * [tBigQueryOutput_5_tBQBE end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_5 finally ] start
				 */

				currentComponent = "tDBInput_5";

				/**
				 * [tDBInput_5 finally ] stop
				 */

				/**
				 * [tBigQueryOutput_5_tBQOB finally ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_5";

				currentComponent = "tBigQueryOutput_5_tBQOB";

				if (resourceMap.get("finish_tBigQueryOutput_5_tBQOB") == null) {
					if (resourceMap.get("csvWriter_tBigQueryOutput_5_tBQOB") != null) {
						((com.talend.csv.CSVWriter) resourceMap.get("csvWriter_tBigQueryOutput_5_tBQOB")).close();
					}
				}

				/**
				 * [tBigQueryOutput_5_tBQOB finally ] stop
				 */

				/**
				 * [tBigQueryOutput_5_tBQBE finally ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_5";

				currentComponent = "tBigQueryOutput_5_tBQBE";

				/**
				 * [tBigQueryOutput_5_tBQBE finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}

	public void tJava_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tJava_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tJava_8 begin ] start
				 */

				ok_Hash.put("tJava_8", false);
				start_Hash.put("tJava_8", System.currentTimeMillis());

				currentComponent = "tJava_8";

				int tos_count_tJava_8 = 0;

				Integer Lines = (Integer) globalMap.get("tDBInput_5_NB_LINE");
//System.out.println("In total processed "+Lines+" actual lines to big query from service ids " + context.ServiceID);
				System.out.println("actual data reload finished at " + TalendDate.getDate("YYYY-MM-dd HH:mm:ss"));
				System.out.println(
						"starting to reload Batched data in BigQuery " + TalendDate.getDate("YYYY-MM-dd HH:mm:ss"));

				/**
				 * [tJava_8 begin ] stop
				 */

				/**
				 * [tJava_8 main ] start
				 */

				currentComponent = "tJava_8";

				tos_count_tJava_8++;

				/**
				 * [tJava_8 main ] stop
				 */

				/**
				 * [tJava_8 process_data_begin ] start
				 */

				currentComponent = "tJava_8";

				/**
				 * [tJava_8 process_data_begin ] stop
				 */

				/**
				 * [tJava_8 process_data_end ] start
				 */

				currentComponent = "tJava_8";

				/**
				 * [tJava_8 process_data_end ] stop
				 */

				/**
				 * [tJava_8 end ] start
				 */

				currentComponent = "tJava_8";

				ok_Hash.put("tJava_8", true);
				end_Hash.put("tJava_8", System.currentTimeMillis());

				/**
				 * [tJava_8 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tJava_8 finally ] start
				 */

				currentComponent = "tJava_8";

				/**
				 * [tJava_8 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_8_SUBPROCESS_STATE", 1);
	}

	public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_ONTARGET_load_transactions_initial = new byte[0];
		static byte[] commonByteArray_ONTARGET_load_transactions_initial = new byte[0];

		public Integer client_id;

		public Integer getClient_id() {
			return this.client_id;
		}

		public Integer supervisor_id;

		public Integer getSupervisor_id() {
			return this.supervisor_id;
		}

		public Integer client_cost_center_id;

		public Integer getClient_cost_center_id() {
			return this.client_cost_center_id;
		}

		public Integer employee_cost_center_id;

		public Integer getEmployee_cost_center_id() {
			return this.employee_cost_center_id;
		}

		public Integer employee_id;

		public Integer getEmployee_id() {
			return this.employee_id;
		}

		public Integer ar_payer_id;

		public Integer getAr_payer_id() {
			return this.ar_payer_id;
		}

		public Integer department_id;

		public Integer getDepartment_id() {
			return this.department_id;
		}

		public Integer service_cost_center_id;

		public Integer getService_cost_center_id() {
			return this.service_cost_center_id;
		}

		public Integer site_id;

		public Integer getSite_id() {
			return this.site_id;
		}

		public Integer school_district_id;

		public Integer getSchool_district_id() {
			return this.school_district_id;
		}

		public Integer authorization_id;

		public Integer getAuthorization_id() {
			return this.authorization_id;
		}

		public Integer authorized_id;

		public Integer getAuthorized_id() {
			return this.authorized_id;
		}

		public String service_authorization_approval;

		public String getService_authorization_approval() {
			return this.service_authorization_approval;
		}

		public String service_authorization_date_id;

		public String getService_authorization_date_id() {
			return this.service_authorization_date_id;
		}

		public String Service_Authorization_Expired;

		public String getService_Authorization_Expired() {
			return this.Service_Authorization_Expired;
		}

		public String service_authorization_description;

		public String getService_authorization_description() {
			return this.service_authorization_description;
		}

		public String company_name;

		public String getCompany_name() {
			return this.company_name;
		}

		public String service_abbreviation;

		public String getService_abbreviation() {
			return this.service_abbreviation;
		}

		public String service_code;

		public String getService_code() {
			return this.service_code;
		}

		public String authorized_start_date_id;

		public String getAuthorized_start_date_id() {
			return this.authorized_start_date_id;
		}

		public String authorized_end_date_id;

		public String getAuthorized_end_date_id() {
			return this.authorized_end_date_id;
		}

		public String authorization_start_date_id;

		public String getAuthorization_start_date_id() {
			return this.authorization_start_date_id;
		}

		public String authorization_end_date_id;

		public String getAuthorization_end_date_id() {
			return this.authorization_end_date_id;
		}

		public String service_program;

		public String getService_program() {
			return this.service_program;
		}

		public String service_place;

		public String getService_place() {
			return this.service_place;
		}

		public Integer service_is_sum_and_round;

		public Integer getService_is_sum_and_round() {
			return this.service_is_sum_and_round;
		}

		public Integer validate_to_schedules;

		public Integer getValidate_to_schedules() {
			return this.validate_to_schedules;
		}

		public Integer service_minimum_minutes;

		public Integer getService_minimum_minutes() {
			return this.service_minimum_minutes;
		}

		public Integer service_units_per_hour;

		public Integer getService_units_per_hour() {
			return this.service_units_per_hour;
		}

		public Integer service_max_units_total;

		public Integer getService_max_units_total() {
			return this.service_max_units_total;
		}

		public Integer service_auth_max_units_total;

		public Integer getService_auth_max_units_total() {
			return this.service_auth_max_units_total;
		}

		public Boolean auth_level_validation;

		public Boolean getAuth_level_validation() {
			return this.auth_level_validation;
		}

		public Integer total_units_authorized;

		public Integer getTotal_units_authorized() {
			return this.total_units_authorized;
		}

		public Float current_rate;

		public Float getCurrent_rate() {
			return this.current_rate;
		}

		public Integer caregiver_id;

		public Integer getCaregiver_id() {
			return this.caregiver_id;
		}

		public Integer inv_stg_service_date_id;

		public Integer getInv_stg_service_date_id() {
			return this.inv_stg_service_date_id;
		}

		public Integer in_schedule_note_service_date_id;

		public Integer getIn_schedule_note_service_date_id() {
			return this.in_schedule_note_service_date_id;
		}

		public Integer note_date_of_service_id;

		public Integer getNote_date_of_service_id() {
			return this.note_date_of_service_id;
		}

		public Integer in_actual_note_service_date_id;

		public Integer getIn_actual_note_service_date_id() {
			return this.in_actual_note_service_date_id;
		}

		public java.util.Date schedule_duration;

		public java.util.Date getSchedule_duration() {
			return this.schedule_duration;
		}

		public Integer schedule_start_date_id;

		public Integer getSchedule_start_date_id() {
			return this.schedule_start_date_id;
		}

		public Integer schedule_end_date_id;

		public Integer getSchedule_end_date_id() {
			return this.schedule_end_date_id;
		}

		public java.util.Date schedule_start_time;

		public java.util.Date getSchedule_start_time() {
			return this.schedule_start_time;
		}

		public java.util.Date schedule_end_time;

		public java.util.Date getSchedule_end_time() {
			return this.schedule_end_time;
		}

		public Integer schedule_units;

		public Integer getSchedule_units() {
			return this.schedule_units;
		}

		public String schedule_status;

		public String getSchedule_status() {
			return this.schedule_status;
		}

		public Integer actual_start_date_id;

		public Integer getActual_start_date_id() {
			return this.actual_start_date_id;
		}

		public Integer actual_end_date_id;

		public Integer getActual_end_date_id() {
			return this.actual_end_date_id;
		}

		public String billing_attending_NPI;

		public String getBilling_attending_NPI() {
			return this.billing_attending_NPI;
		}

		public Boolean actual_imported;

		public Boolean getActual_imported() {
			return this.actual_imported;
		}

		public Boolean actual_hold_pay;

		public Boolean getActual_hold_pay() {
			return this.actual_hold_pay;
		}

		public Boolean actual_hold_bill;

		public Boolean getActual_hold_bill() {
			return this.actual_hold_bill;
		}

		public Boolean actual_time_sheet_approved;

		public Boolean getActual_time_sheet_approved() {
			return this.actual_time_sheet_approved;
		}

		public Boolean actual_note_approved_bl;

		public Boolean getActual_note_approved_bl() {
			return this.actual_note_approved_bl;
		}

		public Boolean actual_note_approved_pr;

		public Boolean getActual_note_approved_pr() {
			return this.actual_note_approved_pr;
		}

		public String actual_status_BL;

		public String getActual_status_BL() {
			return this.actual_status_BL;
		}

		public String actual_emp_pay_type;

		public String getActual_emp_pay_type() {
			return this.actual_emp_pay_type;
		}

		public Boolean ineligible_for_billing;

		public Boolean getIneligible_for_billing() {
			return this.ineligible_for_billing;
		}

		public Boolean actual_adjustment;

		public Boolean getActual_adjustment() {
			return this.actual_adjustment;
		}

		public Integer actual_check_date_id;

		public Integer getActual_check_date_id() {
			return this.actual_check_date_id;
		}

		public Integer actual_last_check_date_id;

		public Integer getActual_last_check_date_id() {
			return this.actual_last_check_date_id;
		}

		public Boolean actual_paid;

		public Boolean getActual_paid() {
			return this.actual_paid;
		}

		public Boolean ineligible_for_payroll;

		public Boolean getIneligible_for_payroll() {
			return this.ineligible_for_payroll;
		}

		public Integer actual_invoice_number;

		public Integer getActual_invoice_number() {
			return this.actual_invoice_number;
		}

		public Boolean actual_billed;

		public Boolean getActual_billed() {
			return this.actual_billed;
		}

		public java.util.Date actual_start_time;

		public java.util.Date getActual_start_time() {
			return this.actual_start_time;
		}

		public java.util.Date actual_end_time;

		public java.util.Date getActual_end_time() {
			return this.actual_end_time;
		}

		public Integer actual_units;

		public Integer getActual_units() {
			return this.actual_units;
		}

		public java.util.Date actual_duration;

		public java.util.Date getActual_duration() {
			return this.actual_duration;
		}

		public Integer service_billed_date_id;

		public Integer getService_billed_date_id() {
			return this.service_billed_date_id;
		}

		public Integer in_process_units_batched;

		public Integer getIn_process_units_batched() {
			return this.in_process_units_batched;
		}

		public java.util.Date note_duration;

		public java.util.Date getNote_duration() {
			return this.note_duration;
		}

		public java.util.Date note_end_time;

		public java.util.Date getNote_end_time() {
			return this.note_end_time;
		}

		public java.util.Date note_start_time;

		public java.util.Date getNote_start_time() {
			return this.note_start_time;
		}

		public String rate_type;

		public String getRate_type() {
			return this.rate_type;
		}

		public Boolean first_encounter;

		public Boolean getFirst_encounter() {
			return this.first_encounter;
		}

		public Integer units_calculated;

		public Integer getUnits_calculated() {
			return this.units_calculated;
		}

		public Boolean clqnote_has_child;

		public Boolean getClqnote_has_child() {
			return this.clqnote_has_child;
		}

		public Integer missed_shift_id;

		public Integer getMissed_shift_id() {
			return this.missed_shift_id;
		}

		public Integer missed_shift_units;

		public Integer getMissed_shift_units() {
			return this.missed_shift_units;
		}

		public Integer billed_units;

		public Integer getBilled_units() {
			return this.billed_units;
		}

		public String transaction_type;

		public String getTransaction_type() {
			return this.transaction_type;
		}

		public Integer transaction_date_id;

		public Integer getTransaction_date_id() {
			return this.transaction_date_id;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ONTARGET_load_transactions_initial.length) {
					if (length < 1024 && commonByteArray_ONTARGET_load_transactions_initial.length == 0) {
						commonByteArray_ONTARGET_load_transactions_initial = new byte[1024];
					} else {
						commonByteArray_ONTARGET_load_transactions_initial = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ONTARGET_load_transactions_initial, 0, length);
				strReturn = new String(commonByteArray_ONTARGET_load_transactions_initial, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ONTARGET_load_transactions_initial.length) {
					if (length < 1024 && commonByteArray_ONTARGET_load_transactions_initial.length == 0) {
						commonByteArray_ONTARGET_load_transactions_initial = new byte[1024];
					} else {
						commonByteArray_ONTARGET_load_transactions_initial = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_ONTARGET_load_transactions_initial, 0, length);
				strReturn = new String(commonByteArray_ONTARGET_load_transactions_initial, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ONTARGET_load_transactions_initial) {

				try {

					int length = 0;

					this.client_id = readInteger(dis);

					this.supervisor_id = readInteger(dis);

					this.client_cost_center_id = readInteger(dis);

					this.employee_cost_center_id = readInteger(dis);

					this.employee_id = readInteger(dis);

					this.ar_payer_id = readInteger(dis);

					this.department_id = readInteger(dis);

					this.service_cost_center_id = readInteger(dis);

					this.site_id = readInteger(dis);

					this.school_district_id = readInteger(dis);

					this.authorization_id = readInteger(dis);

					this.authorized_id = readInteger(dis);

					this.service_authorization_approval = readString(dis);

					this.service_authorization_date_id = readString(dis);

					this.Service_Authorization_Expired = readString(dis);

					this.service_authorization_description = readString(dis);

					this.company_name = readString(dis);

					this.service_abbreviation = readString(dis);

					this.service_code = readString(dis);

					this.authorized_start_date_id = readString(dis);

					this.authorized_end_date_id = readString(dis);

					this.authorization_start_date_id = readString(dis);

					this.authorization_end_date_id = readString(dis);

					this.service_program = readString(dis);

					this.service_place = readString(dis);

					this.service_is_sum_and_round = readInteger(dis);

					this.validate_to_schedules = readInteger(dis);

					this.service_minimum_minutes = readInteger(dis);

					this.service_units_per_hour = readInteger(dis);

					this.service_max_units_total = readInteger(dis);

					this.service_auth_max_units_total = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.auth_level_validation = null;
					} else {
						this.auth_level_validation = dis.readBoolean();
					}

					this.total_units_authorized = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.current_rate = null;
					} else {
						this.current_rate = dis.readFloat();
					}

					this.caregiver_id = readInteger(dis);

					this.inv_stg_service_date_id = readInteger(dis);

					this.in_schedule_note_service_date_id = readInteger(dis);

					this.note_date_of_service_id = readInteger(dis);

					this.in_actual_note_service_date_id = readInteger(dis);

					this.schedule_duration = readDate(dis);

					this.schedule_start_date_id = readInteger(dis);

					this.schedule_end_date_id = readInteger(dis);

					this.schedule_start_time = readDate(dis);

					this.schedule_end_time = readDate(dis);

					this.schedule_units = readInteger(dis);

					this.schedule_status = readString(dis);

					this.actual_start_date_id = readInteger(dis);

					this.actual_end_date_id = readInteger(dis);

					this.billing_attending_NPI = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.actual_imported = null;
					} else {
						this.actual_imported = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_hold_pay = null;
					} else {
						this.actual_hold_pay = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_hold_bill = null;
					} else {
						this.actual_hold_bill = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_time_sheet_approved = null;
					} else {
						this.actual_time_sheet_approved = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_note_approved_bl = null;
					} else {
						this.actual_note_approved_bl = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_note_approved_pr = null;
					} else {
						this.actual_note_approved_pr = dis.readBoolean();
					}

					this.actual_status_BL = readString(dis);

					this.actual_emp_pay_type = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ineligible_for_billing = null;
					} else {
						this.ineligible_for_billing = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_adjustment = null;
					} else {
						this.actual_adjustment = dis.readBoolean();
					}

					this.actual_check_date_id = readInteger(dis);

					this.actual_last_check_date_id = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.actual_paid = null;
					} else {
						this.actual_paid = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.ineligible_for_payroll = null;
					} else {
						this.ineligible_for_payroll = dis.readBoolean();
					}

					this.actual_invoice_number = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.actual_billed = null;
					} else {
						this.actual_billed = dis.readBoolean();
					}

					this.actual_start_time = readDate(dis);

					this.actual_end_time = readDate(dis);

					this.actual_units = readInteger(dis);

					this.actual_duration = readDate(dis);

					this.service_billed_date_id = readInteger(dis);

					this.in_process_units_batched = readInteger(dis);

					this.note_duration = readDate(dis);

					this.note_end_time = readDate(dis);

					this.note_start_time = readDate(dis);

					this.rate_type = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.first_encounter = null;
					} else {
						this.first_encounter = dis.readBoolean();
					}

					this.units_calculated = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.clqnote_has_child = null;
					} else {
						this.clqnote_has_child = dis.readBoolean();
					}

					this.missed_shift_id = readInteger(dis);

					this.missed_shift_units = readInteger(dis);

					this.billed_units = readInteger(dis);

					this.transaction_type = readString(dis);

					this.transaction_date_id = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ONTARGET_load_transactions_initial) {

				try {

					int length = 0;

					this.client_id = readInteger(dis);

					this.supervisor_id = readInteger(dis);

					this.client_cost_center_id = readInteger(dis);

					this.employee_cost_center_id = readInteger(dis);

					this.employee_id = readInteger(dis);

					this.ar_payer_id = readInteger(dis);

					this.department_id = readInteger(dis);

					this.service_cost_center_id = readInteger(dis);

					this.site_id = readInteger(dis);

					this.school_district_id = readInteger(dis);

					this.authorization_id = readInteger(dis);

					this.authorized_id = readInteger(dis);

					this.service_authorization_approval = readString(dis);

					this.service_authorization_date_id = readString(dis);

					this.Service_Authorization_Expired = readString(dis);

					this.service_authorization_description = readString(dis);

					this.company_name = readString(dis);

					this.service_abbreviation = readString(dis);

					this.service_code = readString(dis);

					this.authorized_start_date_id = readString(dis);

					this.authorized_end_date_id = readString(dis);

					this.authorization_start_date_id = readString(dis);

					this.authorization_end_date_id = readString(dis);

					this.service_program = readString(dis);

					this.service_place = readString(dis);

					this.service_is_sum_and_round = readInteger(dis);

					this.validate_to_schedules = readInteger(dis);

					this.service_minimum_minutes = readInteger(dis);

					this.service_units_per_hour = readInteger(dis);

					this.service_max_units_total = readInteger(dis);

					this.service_auth_max_units_total = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.auth_level_validation = null;
					} else {
						this.auth_level_validation = dis.readBoolean();
					}

					this.total_units_authorized = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.current_rate = null;
					} else {
						this.current_rate = dis.readFloat();
					}

					this.caregiver_id = readInteger(dis);

					this.inv_stg_service_date_id = readInteger(dis);

					this.in_schedule_note_service_date_id = readInteger(dis);

					this.note_date_of_service_id = readInteger(dis);

					this.in_actual_note_service_date_id = readInteger(dis);

					this.schedule_duration = readDate(dis);

					this.schedule_start_date_id = readInteger(dis);

					this.schedule_end_date_id = readInteger(dis);

					this.schedule_start_time = readDate(dis);

					this.schedule_end_time = readDate(dis);

					this.schedule_units = readInteger(dis);

					this.schedule_status = readString(dis);

					this.actual_start_date_id = readInteger(dis);

					this.actual_end_date_id = readInteger(dis);

					this.billing_attending_NPI = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.actual_imported = null;
					} else {
						this.actual_imported = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_hold_pay = null;
					} else {
						this.actual_hold_pay = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_hold_bill = null;
					} else {
						this.actual_hold_bill = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_time_sheet_approved = null;
					} else {
						this.actual_time_sheet_approved = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_note_approved_bl = null;
					} else {
						this.actual_note_approved_bl = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_note_approved_pr = null;
					} else {
						this.actual_note_approved_pr = dis.readBoolean();
					}

					this.actual_status_BL = readString(dis);

					this.actual_emp_pay_type = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ineligible_for_billing = null;
					} else {
						this.ineligible_for_billing = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_adjustment = null;
					} else {
						this.actual_adjustment = dis.readBoolean();
					}

					this.actual_check_date_id = readInteger(dis);

					this.actual_last_check_date_id = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.actual_paid = null;
					} else {
						this.actual_paid = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.ineligible_for_payroll = null;
					} else {
						this.ineligible_for_payroll = dis.readBoolean();
					}

					this.actual_invoice_number = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.actual_billed = null;
					} else {
						this.actual_billed = dis.readBoolean();
					}

					this.actual_start_time = readDate(dis);

					this.actual_end_time = readDate(dis);

					this.actual_units = readInteger(dis);

					this.actual_duration = readDate(dis);

					this.service_billed_date_id = readInteger(dis);

					this.in_process_units_batched = readInteger(dis);

					this.note_duration = readDate(dis);

					this.note_end_time = readDate(dis);

					this.note_start_time = readDate(dis);

					this.rate_type = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.first_encounter = null;
					} else {
						this.first_encounter = dis.readBoolean();
					}

					this.units_calculated = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.clqnote_has_child = null;
					} else {
						this.clqnote_has_child = dis.readBoolean();
					}

					this.missed_shift_id = readInteger(dis);

					this.missed_shift_units = readInteger(dis);

					this.billed_units = readInteger(dis);

					this.transaction_type = readString(dis);

					this.transaction_date_id = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.client_id, dos);

				// Integer

				writeInteger(this.supervisor_id, dos);

				// Integer

				writeInteger(this.client_cost_center_id, dos);

				// Integer

				writeInteger(this.employee_cost_center_id, dos);

				// Integer

				writeInteger(this.employee_id, dos);

				// Integer

				writeInteger(this.ar_payer_id, dos);

				// Integer

				writeInteger(this.department_id, dos);

				// Integer

				writeInteger(this.service_cost_center_id, dos);

				// Integer

				writeInteger(this.site_id, dos);

				// Integer

				writeInteger(this.school_district_id, dos);

				// Integer

				writeInteger(this.authorization_id, dos);

				// Integer

				writeInteger(this.authorized_id, dos);

				// String

				writeString(this.service_authorization_approval, dos);

				// String

				writeString(this.service_authorization_date_id, dos);

				// String

				writeString(this.Service_Authorization_Expired, dos);

				// String

				writeString(this.service_authorization_description, dos);

				// String

				writeString(this.company_name, dos);

				// String

				writeString(this.service_abbreviation, dos);

				// String

				writeString(this.service_code, dos);

				// String

				writeString(this.authorized_start_date_id, dos);

				// String

				writeString(this.authorized_end_date_id, dos);

				// String

				writeString(this.authorization_start_date_id, dos);

				// String

				writeString(this.authorization_end_date_id, dos);

				// String

				writeString(this.service_program, dos);

				// String

				writeString(this.service_place, dos);

				// Integer

				writeInteger(this.service_is_sum_and_round, dos);

				// Integer

				writeInteger(this.validate_to_schedules, dos);

				// Integer

				writeInteger(this.service_minimum_minutes, dos);

				// Integer

				writeInteger(this.service_units_per_hour, dos);

				// Integer

				writeInteger(this.service_max_units_total, dos);

				// Integer

				writeInteger(this.service_auth_max_units_total, dos);

				// Boolean

				if (this.auth_level_validation == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.auth_level_validation);
				}

				// Integer

				writeInteger(this.total_units_authorized, dos);

				// Float

				if (this.current_rate == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.current_rate);
				}

				// Integer

				writeInteger(this.caregiver_id, dos);

				// Integer

				writeInteger(this.inv_stg_service_date_id, dos);

				// Integer

				writeInteger(this.in_schedule_note_service_date_id, dos);

				// Integer

				writeInteger(this.note_date_of_service_id, dos);

				// Integer

				writeInteger(this.in_actual_note_service_date_id, dos);

				// java.util.Date

				writeDate(this.schedule_duration, dos);

				// Integer

				writeInteger(this.schedule_start_date_id, dos);

				// Integer

				writeInteger(this.schedule_end_date_id, dos);

				// java.util.Date

				writeDate(this.schedule_start_time, dos);

				// java.util.Date

				writeDate(this.schedule_end_time, dos);

				// Integer

				writeInteger(this.schedule_units, dos);

				// String

				writeString(this.schedule_status, dos);

				// Integer

				writeInteger(this.actual_start_date_id, dos);

				// Integer

				writeInteger(this.actual_end_date_id, dos);

				// String

				writeString(this.billing_attending_NPI, dos);

				// Boolean

				if (this.actual_imported == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_imported);
				}

				// Boolean

				if (this.actual_hold_pay == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_hold_pay);
				}

				// Boolean

				if (this.actual_hold_bill == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_hold_bill);
				}

				// Boolean

				if (this.actual_time_sheet_approved == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_time_sheet_approved);
				}

				// Boolean

				if (this.actual_note_approved_bl == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_note_approved_bl);
				}

				// Boolean

				if (this.actual_note_approved_pr == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_note_approved_pr);
				}

				// String

				writeString(this.actual_status_BL, dos);

				// String

				writeString(this.actual_emp_pay_type, dos);

				// Boolean

				if (this.ineligible_for_billing == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.ineligible_for_billing);
				}

				// Boolean

				if (this.actual_adjustment == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_adjustment);
				}

				// Integer

				writeInteger(this.actual_check_date_id, dos);

				// Integer

				writeInteger(this.actual_last_check_date_id, dos);

				// Boolean

				if (this.actual_paid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_paid);
				}

				// Boolean

				if (this.ineligible_for_payroll == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.ineligible_for_payroll);
				}

				// Integer

				writeInteger(this.actual_invoice_number, dos);

				// Boolean

				if (this.actual_billed == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_billed);
				}

				// java.util.Date

				writeDate(this.actual_start_time, dos);

				// java.util.Date

				writeDate(this.actual_end_time, dos);

				// Integer

				writeInteger(this.actual_units, dos);

				// java.util.Date

				writeDate(this.actual_duration, dos);

				// Integer

				writeInteger(this.service_billed_date_id, dos);

				// Integer

				writeInteger(this.in_process_units_batched, dos);

				// java.util.Date

				writeDate(this.note_duration, dos);

				// java.util.Date

				writeDate(this.note_end_time, dos);

				// java.util.Date

				writeDate(this.note_start_time, dos);

				// String

				writeString(this.rate_type, dos);

				// Boolean

				if (this.first_encounter == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.first_encounter);
				}

				// Integer

				writeInteger(this.units_calculated, dos);

				// Boolean

				if (this.clqnote_has_child == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.clqnote_has_child);
				}

				// Integer

				writeInteger(this.missed_shift_id, dos);

				// Integer

				writeInteger(this.missed_shift_units, dos);

				// Integer

				writeInteger(this.billed_units, dos);

				// String

				writeString(this.transaction_type, dos);

				// Integer

				writeInteger(this.transaction_date_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.client_id, dos);

				// Integer

				writeInteger(this.supervisor_id, dos);

				// Integer

				writeInteger(this.client_cost_center_id, dos);

				// Integer

				writeInteger(this.employee_cost_center_id, dos);

				// Integer

				writeInteger(this.employee_id, dos);

				// Integer

				writeInteger(this.ar_payer_id, dos);

				// Integer

				writeInteger(this.department_id, dos);

				// Integer

				writeInteger(this.service_cost_center_id, dos);

				// Integer

				writeInteger(this.site_id, dos);

				// Integer

				writeInteger(this.school_district_id, dos);

				// Integer

				writeInteger(this.authorization_id, dos);

				// Integer

				writeInteger(this.authorized_id, dos);

				// String

				writeString(this.service_authorization_approval, dos);

				// String

				writeString(this.service_authorization_date_id, dos);

				// String

				writeString(this.Service_Authorization_Expired, dos);

				// String

				writeString(this.service_authorization_description, dos);

				// String

				writeString(this.company_name, dos);

				// String

				writeString(this.service_abbreviation, dos);

				// String

				writeString(this.service_code, dos);

				// String

				writeString(this.authorized_start_date_id, dos);

				// String

				writeString(this.authorized_end_date_id, dos);

				// String

				writeString(this.authorization_start_date_id, dos);

				// String

				writeString(this.authorization_end_date_id, dos);

				// String

				writeString(this.service_program, dos);

				// String

				writeString(this.service_place, dos);

				// Integer

				writeInteger(this.service_is_sum_and_round, dos);

				// Integer

				writeInteger(this.validate_to_schedules, dos);

				// Integer

				writeInteger(this.service_minimum_minutes, dos);

				// Integer

				writeInteger(this.service_units_per_hour, dos);

				// Integer

				writeInteger(this.service_max_units_total, dos);

				// Integer

				writeInteger(this.service_auth_max_units_total, dos);

				// Boolean

				if (this.auth_level_validation == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.auth_level_validation);
				}

				// Integer

				writeInteger(this.total_units_authorized, dos);

				// Float

				if (this.current_rate == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.current_rate);
				}

				// Integer

				writeInteger(this.caregiver_id, dos);

				// Integer

				writeInteger(this.inv_stg_service_date_id, dos);

				// Integer

				writeInteger(this.in_schedule_note_service_date_id, dos);

				// Integer

				writeInteger(this.note_date_of_service_id, dos);

				// Integer

				writeInteger(this.in_actual_note_service_date_id, dos);

				// java.util.Date

				writeDate(this.schedule_duration, dos);

				// Integer

				writeInteger(this.schedule_start_date_id, dos);

				// Integer

				writeInteger(this.schedule_end_date_id, dos);

				// java.util.Date

				writeDate(this.schedule_start_time, dos);

				// java.util.Date

				writeDate(this.schedule_end_time, dos);

				// Integer

				writeInteger(this.schedule_units, dos);

				// String

				writeString(this.schedule_status, dos);

				// Integer

				writeInteger(this.actual_start_date_id, dos);

				// Integer

				writeInteger(this.actual_end_date_id, dos);

				// String

				writeString(this.billing_attending_NPI, dos);

				// Boolean

				if (this.actual_imported == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_imported);
				}

				// Boolean

				if (this.actual_hold_pay == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_hold_pay);
				}

				// Boolean

				if (this.actual_hold_bill == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_hold_bill);
				}

				// Boolean

				if (this.actual_time_sheet_approved == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_time_sheet_approved);
				}

				// Boolean

				if (this.actual_note_approved_bl == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_note_approved_bl);
				}

				// Boolean

				if (this.actual_note_approved_pr == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_note_approved_pr);
				}

				// String

				writeString(this.actual_status_BL, dos);

				// String

				writeString(this.actual_emp_pay_type, dos);

				// Boolean

				if (this.ineligible_for_billing == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.ineligible_for_billing);
				}

				// Boolean

				if (this.actual_adjustment == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_adjustment);
				}

				// Integer

				writeInteger(this.actual_check_date_id, dos);

				// Integer

				writeInteger(this.actual_last_check_date_id, dos);

				// Boolean

				if (this.actual_paid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_paid);
				}

				// Boolean

				if (this.ineligible_for_payroll == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.ineligible_for_payroll);
				}

				// Integer

				writeInteger(this.actual_invoice_number, dos);

				// Boolean

				if (this.actual_billed == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_billed);
				}

				// java.util.Date

				writeDate(this.actual_start_time, dos);

				// java.util.Date

				writeDate(this.actual_end_time, dos);

				// Integer

				writeInteger(this.actual_units, dos);

				// java.util.Date

				writeDate(this.actual_duration, dos);

				// Integer

				writeInteger(this.service_billed_date_id, dos);

				// Integer

				writeInteger(this.in_process_units_batched, dos);

				// java.util.Date

				writeDate(this.note_duration, dos);

				// java.util.Date

				writeDate(this.note_end_time, dos);

				// java.util.Date

				writeDate(this.note_start_time, dos);

				// String

				writeString(this.rate_type, dos);

				// Boolean

				if (this.first_encounter == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.first_encounter);
				}

				// Integer

				writeInteger(this.units_calculated, dos);

				// Boolean

				if (this.clqnote_has_child == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.clqnote_has_child);
				}

				// Integer

				writeInteger(this.missed_shift_id, dos);

				// Integer

				writeInteger(this.missed_shift_units, dos);

				// Integer

				writeInteger(this.billed_units, dos);

				// String

				writeString(this.transaction_type, dos);

				// Integer

				writeInteger(this.transaction_date_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("client_id=" + String.valueOf(client_id));
			sb.append(",supervisor_id=" + String.valueOf(supervisor_id));
			sb.append(",client_cost_center_id=" + String.valueOf(client_cost_center_id));
			sb.append(",employee_cost_center_id=" + String.valueOf(employee_cost_center_id));
			sb.append(",employee_id=" + String.valueOf(employee_id));
			sb.append(",ar_payer_id=" + String.valueOf(ar_payer_id));
			sb.append(",department_id=" + String.valueOf(department_id));
			sb.append(",service_cost_center_id=" + String.valueOf(service_cost_center_id));
			sb.append(",site_id=" + String.valueOf(site_id));
			sb.append(",school_district_id=" + String.valueOf(school_district_id));
			sb.append(",authorization_id=" + String.valueOf(authorization_id));
			sb.append(",authorized_id=" + String.valueOf(authorized_id));
			sb.append(",service_authorization_approval=" + service_authorization_approval);
			sb.append(",service_authorization_date_id=" + service_authorization_date_id);
			sb.append(",Service_Authorization_Expired=" + Service_Authorization_Expired);
			sb.append(",service_authorization_description=" + service_authorization_description);
			sb.append(",company_name=" + company_name);
			sb.append(",service_abbreviation=" + service_abbreviation);
			sb.append(",service_code=" + service_code);
			sb.append(",authorized_start_date_id=" + authorized_start_date_id);
			sb.append(",authorized_end_date_id=" + authorized_end_date_id);
			sb.append(",authorization_start_date_id=" + authorization_start_date_id);
			sb.append(",authorization_end_date_id=" + authorization_end_date_id);
			sb.append(",service_program=" + service_program);
			sb.append(",service_place=" + service_place);
			sb.append(",service_is_sum_and_round=" + String.valueOf(service_is_sum_and_round));
			sb.append(",validate_to_schedules=" + String.valueOf(validate_to_schedules));
			sb.append(",service_minimum_minutes=" + String.valueOf(service_minimum_minutes));
			sb.append(",service_units_per_hour=" + String.valueOf(service_units_per_hour));
			sb.append(",service_max_units_total=" + String.valueOf(service_max_units_total));
			sb.append(",service_auth_max_units_total=" + String.valueOf(service_auth_max_units_total));
			sb.append(",auth_level_validation=" + String.valueOf(auth_level_validation));
			sb.append(",total_units_authorized=" + String.valueOf(total_units_authorized));
			sb.append(",current_rate=" + String.valueOf(current_rate));
			sb.append(",caregiver_id=" + String.valueOf(caregiver_id));
			sb.append(",inv_stg_service_date_id=" + String.valueOf(inv_stg_service_date_id));
			sb.append(",in_schedule_note_service_date_id=" + String.valueOf(in_schedule_note_service_date_id));
			sb.append(",note_date_of_service_id=" + String.valueOf(note_date_of_service_id));
			sb.append(",in_actual_note_service_date_id=" + String.valueOf(in_actual_note_service_date_id));
			sb.append(",schedule_duration=" + String.valueOf(schedule_duration));
			sb.append(",schedule_start_date_id=" + String.valueOf(schedule_start_date_id));
			sb.append(",schedule_end_date_id=" + String.valueOf(schedule_end_date_id));
			sb.append(",schedule_start_time=" + String.valueOf(schedule_start_time));
			sb.append(",schedule_end_time=" + String.valueOf(schedule_end_time));
			sb.append(",schedule_units=" + String.valueOf(schedule_units));
			sb.append(",schedule_status=" + schedule_status);
			sb.append(",actual_start_date_id=" + String.valueOf(actual_start_date_id));
			sb.append(",actual_end_date_id=" + String.valueOf(actual_end_date_id));
			sb.append(",billing_attending_NPI=" + billing_attending_NPI);
			sb.append(",actual_imported=" + String.valueOf(actual_imported));
			sb.append(",actual_hold_pay=" + String.valueOf(actual_hold_pay));
			sb.append(",actual_hold_bill=" + String.valueOf(actual_hold_bill));
			sb.append(",actual_time_sheet_approved=" + String.valueOf(actual_time_sheet_approved));
			sb.append(",actual_note_approved_bl=" + String.valueOf(actual_note_approved_bl));
			sb.append(",actual_note_approved_pr=" + String.valueOf(actual_note_approved_pr));
			sb.append(",actual_status_BL=" + actual_status_BL);
			sb.append(",actual_emp_pay_type=" + actual_emp_pay_type);
			sb.append(",ineligible_for_billing=" + String.valueOf(ineligible_for_billing));
			sb.append(",actual_adjustment=" + String.valueOf(actual_adjustment));
			sb.append(",actual_check_date_id=" + String.valueOf(actual_check_date_id));
			sb.append(",actual_last_check_date_id=" + String.valueOf(actual_last_check_date_id));
			sb.append(",actual_paid=" + String.valueOf(actual_paid));
			sb.append(",ineligible_for_payroll=" + String.valueOf(ineligible_for_payroll));
			sb.append(",actual_invoice_number=" + String.valueOf(actual_invoice_number));
			sb.append(",actual_billed=" + String.valueOf(actual_billed));
			sb.append(",actual_start_time=" + String.valueOf(actual_start_time));
			sb.append(",actual_end_time=" + String.valueOf(actual_end_time));
			sb.append(",actual_units=" + String.valueOf(actual_units));
			sb.append(",actual_duration=" + String.valueOf(actual_duration));
			sb.append(",service_billed_date_id=" + String.valueOf(service_billed_date_id));
			sb.append(",in_process_units_batched=" + String.valueOf(in_process_units_batched));
			sb.append(",note_duration=" + String.valueOf(note_duration));
			sb.append(",note_end_time=" + String.valueOf(note_end_time));
			sb.append(",note_start_time=" + String.valueOf(note_start_time));
			sb.append(",rate_type=" + rate_type);
			sb.append(",first_encounter=" + String.valueOf(first_encounter));
			sb.append(",units_calculated=" + String.valueOf(units_calculated));
			sb.append(",clqnote_has_child=" + String.valueOf(clqnote_has_child));
			sb.append(",missed_shift_id=" + String.valueOf(missed_shift_id));
			sb.append(",missed_shift_units=" + String.valueOf(missed_shift_units));
			sb.append(",billed_units=" + String.valueOf(billed_units));
			sb.append(",transaction_type=" + transaction_type);
			sb.append(",transaction_date_id=" + String.valueOf(transaction_date_id));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row7Struct row7 = new row7Struct();

				/**
				 * [tBigQueryOutput_6_tBQOB begin ] start
				 */

				ok_Hash.put("tBigQueryOutput_6_tBQOB", false);
				start_Hash.put("tBigQueryOutput_6_tBQOB", System.currentTimeMillis());

				currentVirtualComponent = "tBigQueryOutput_6";

				currentComponent = "tBigQueryOutput_6_tBQOB";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row7");
				}

				int tos_count_tBigQueryOutput_6_tBQOB = 0;

				int nb_line_tBigQueryOutput_6_tBQOB = 0;
				String rowSeparator_tBigQueryOutput_6_tBQOB = "\n";
				String fieldSeparator_tBigQueryOutput_6_tBQOB = ",";
				char escapeChar_tBigQueryOutput_6_tBQOB = "\\".charAt(0);
				char textEnclosure_tBigQueryOutput_6_tBQOB = "\"".charAt(0);

				escapeChar_tBigQueryOutput_6_tBQOB = textEnclosure_tBigQueryOutput_6_tBQOB;

				if (escapeChar_tBigQueryOutput_6_tBQOB == '\\') {
				} else if (escapeChar_tBigQueryOutput_6_tBQOB == textEnclosure_tBigQueryOutput_6_tBQOB) {
				} else {
					throw new RuntimeException("The escape mode only support the '\\' or double text enclosure.");
				}

				java.io.File file_tBigQueryOutput_6_tBQOB = new java.io.File(
						"/Applications/TOSDI-8.0.1/studio/workspace/batched_data.avro");

				file_tBigQueryOutput_6_tBQOB.getParentFile().mkdirs();

				com.talend.csv.CSVWriter csvWriter_tBigQueryOutput_6_tBQOB = new com.talend.csv.CSVWriter(
						new java.io.BufferedWriter(new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(file_tBigQueryOutput_6_tBQOB, false), "ISO-8859-15")));
				resourceMap.put("csvWriter_tBigQueryOutput_6_tBQOB", csvWriter_tBigQueryOutput_6_tBQOB);
				csvWriter_tBigQueryOutput_6_tBQOB.setSeparator(fieldSeparator_tBigQueryOutput_6_tBQOB.charAt(0));

				csvWriter_tBigQueryOutput_6_tBQOB.setLineEnd(rowSeparator_tBigQueryOutput_6_tBQOB);
				csvWriter_tBigQueryOutput_6_tBQOB.setEscapeChar(escapeChar_tBigQueryOutput_6_tBQOB);
				csvWriter_tBigQueryOutput_6_tBQOB.setQuoteChar(textEnclosure_tBigQueryOutput_6_tBQOB);
				csvWriter_tBigQueryOutput_6_tBQOB.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.AUTO);

				/**
				 * [tBigQueryOutput_6_tBQOB begin ] stop
				 */

				/**
				 * [tDBInput_6 begin ] start
				 */

				ok_Hash.put("tDBInput_6", false);
				start_Hash.put("tDBInput_6", System.currentTimeMillis());

				currentComponent = "tDBInput_6";

				int tos_count_tDBInput_6 = 0;

				int nb_line_tDBInput_6 = 0;
				java.sql.Connection conn_tDBInput_6 = null;
				String driverClass_tDBInput_6 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBInput_6 = java.lang.Class.forName(driverClass_tDBInput_6);
				String dbUser_tDBInput_6 = "datafusion";

				final String decryptedPassword_tDBInput_6 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:YA476bpOXvJWUeIWBoAarUewxckVSTVg/5KcSuMIpX/9QYprjJs=");

				String dbPwd_tDBInput_6 = decryptedPassword_tDBInput_6;

				String url_tDBInput_6 = "jdbc:postgresql://" + "localhost" + ":" + "5431" + "/" + "OnTarget" + "?"
						+ "currentSchema=smallmiracle";

				conn_tDBInput_6 = java.sql.DriverManager.getConnection(url_tDBInput_6, dbUser_tDBInput_6,
						dbPwd_tDBInput_6);

				conn_tDBInput_6.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_6 = conn_tDBInput_6.createStatement();

				String dbquery_tDBInput_6 = "WITH schoolstatus AS (\nSELECT schoolyear.schooldistrictid AS schooldistrict,n.date\nFROM smallmiracle.schoolyear\nJOIN sm"
						+ "allmiracle.nonschoolday n ON schoolyear.id = n.schoolyearid\nGROUP BY schoolyear.schooldistrictid, n.date\n), base as(\nsel"
						+ "ect auth.id as Authorization_ID,authd.id as Authorized_ID,\nauth.ClientID as Client_ID,e.id as Employee_ID,dept.id as Dep"
						+ "artment_ID,cc.Id as Client_Cost_Center_ID,empCostCenter.id as Emp_Cost_Center_ID,\ncc_service.ID as Service_Cost_Center_I"
						+ "D,facility.ID as site_id,\ncase when auth.approved then 'a' else 'u' end as Service_Authorization_Approval,\nto_char(date("
						+ "auth.enddate),'YYYYMMDD') as Service_Authorization_Date_ID,\ncase when auth.EndDate<current_date then 'e' else 'u' end as"
						+ " Service_Authorization_Expired,\nauth.description as Service_Authorization_Description,\n'Abound Health, LLC' as company_n"
						+ "ame,\nBLServiceMaster.ServiceAbbreviation AS svcabbreviation,\nBLServiceMaster.ServiceCode AS svccode,\nto_char(date(authd."
						+ "startdate),'YYYYMMDD') as Authorized_Start_Date_ID,\nto_char(date(authd.enddate),'YYYYMMDD') as Authorized_End_Date_ID,\nt"
						+ "o_char(date(auth.startdate),'YYYYMMDD') as Authorization_Start_Date_ID,\nto_char(date(auth.startdate),'YYYYMMDD') as Auth"
						+ "orization_End_Date_ID,\ncoalesce(GLProgramCode.Description,'') AS Service_Program,\np.id as AR_Payer_ID,\np.OverrideNU AS P"
						+ "ayer_Override,\nBLServiceState.Eligible4Billing,\nBLServiceState.Eligible4Payroll,\nBLServiceMaster.RateType,\nauthd.BLServi"
						+ "cePayerID,\nBLServiceLocation.Code AS Service_Place,\nfn_isservicesumandround(authd.id)::int as Service_Is_Sum_And_Round,\n"
						+ "BLServiceState.validatetoschedules::int as Validate_To_Schedules,\ncoalesce(BLServiceMaster.MinimumMinutes,0) as Service_"
						+ "Minimum_Minutes,\nBLServiceMaster.UnitsPerHour as Service_Units_Per_Hour,\ncoalesce(authd.maxunitstotal,0) as Service_Max_"
						+ "Units_Total,\ncoalesce(auth.maxunitstotal,0) as Service_Auth_Max_Units_Total,\nauth.AuthLevelValidation as Auth_Level_Vali"
						+ "dation,\nCASE WHEN auth.AuthLevelValidation THEN COALESCE(auth.MaxUnitsTotal, 0) ELSE COALESCE(authd.MaxUnitsTotal, 0) en"
						+ "d as Total_Units_Authorized,\nc.schooldistrictid as school_district_id\nfrom BLServiceAuthorization auth \ninner join BLSer"
						+ "viceAuthorized authd on auth.ID=authd.blserviceauthorizationid \nINNER JOIN BLServicePayer ON authd.BLServicePayerID = BL"
						+ "ServicePayer.ID\nINNER JOIN BLServiceState ON BLServicePayer.BLStateServiceID = BLServiceState.ID\nLEFT JOIN GLProgramCode"
						+ " ON BLServiceState.GLProgramCodeID = GLProgramCode.ID\nINNER JOIN BLServiceMaster ON BLServiceState.BLServiceMasterID = B"
						+ "LServiceMaster.ID\ninner join clclient c on c.id=auth.clientid\nLEFT JOIN PREmployee e ON c.PREmployeeID = e.ID\nLEFT JOIN "
						+ "prempdemo PRD ON PRD.PREmployeeID = e.ID\nLEFT JOIN prbusdepartment dept on PRD.prbusdepartmentid = dept.id\nLEFT JOIN PRB"
						+ "usCostCenter cc ON c.PRBusCostCenterID = cc.ID\nLEFT JOIN prbuscostcenter cc_service ON authd.PRBusCostCenterID = cc_serv"
						+ "ice.ID\nleft outer join PRBusCostCenter as empCostCenter on prd.PRBusCostCenterID = empCostCenter.ID\nINNER JOIN arpayer p"
						+ " ON auth.ARPayerID = p.ID\nINNER JOIN BLServiceLocation ON authd.BLServiceLocationID = BLServiceLocation.ID\nleft outer jo"
						+ "in FCFacility as facility on authd.FCFacilityID = facility.ID  \n)\nselect coalesce(cast(base.client_id as int),-1) as cli"
						+ "ent_id,\ncoalesce(cast(base.employee_id as int),-1) as Supervisor_id,\ncoalesce(cast(base.client_cost_center_id as int),-1"
						+ ") as client_cost_center_id,\ncoalesce(cast(base.Emp_Cost_Center_ID as int),-1) as Employee_Cost_Center_ID,\ncoalesce(cast("
						+ "base.employee_id as int),-1) as employee_id,\ncoalesce(cast(base.AR_Payer_ID as int),-1) as ar_payer_id,\ncoalesce(cast(ba"
						+ "se.department_id as int),-1) as department_id,\ncoalesce(cast(base.service_cost_center_id as int),-1) as service_cost_cen"
						+ "ter_id,\ncoalesce(cast(base.site_id as int),-1) as site_id,coalesce(cast(schoolstatus.schooldistrict as int),-1) as schoo"
						+ "l_district_id,base.Authorization_ID,base.authorized_id,\nbase.Service_Authorization_Approval,base.Service_Authorization_D"
						+ "ate_ID,base.Service_Authorization_Expired,base.Service_Authorization_Description,\nbase.company_name,base.svcabbreviation"
						+ " as service_abbreviation,base.svccode as service_code,base.Authorized_Start_Date_ID,base.Authorized_End_Date_ID,\nbase.Au"
						+ "thorization_Start_Date_ID,base.Authorization_End_Date_ID,base.Service_Program,base.Service_Place,base.Service_Is_Sum_And"
						+ "_Round,base.Validate_To_Schedules,\nbase.Service_Minimum_Minutes,base.Service_Units_Per_Hour,base.Service_Max_Units_Total"
						+ ",base.Service_Auth_Max_Units_Total,\nbase.Auth_Level_Validation,base.total_units_authorized,coalesce(fn_getcurrate(base.a"
						+ "uthorized_id),0) as current_rate,\ncoalesce(actual.premployeeid,-1) as caregiver_id,\ncoalesce(cast(to_char(date(stg.servi"
						+ "cedate),'YYYYMMDD') as int),-1) as inv_stg_service_date_id,\n-1 as in_schedule_note_service_date_id,-1 as note_date_of_se"
						+ "rvice_id,\n-1 as in_actual_note_service_date_id,\ncoalesce(schedule.duration,TO_TIMESTAMP('1900-01-01 00:00:00','YYYY-MM-D"
						+ "D HH24:MI:SS')) as schedule_duration,\ncoalesce(cast(to_char(date(schedule.startdate),'YYYYMMDD') as int),-1) as schedule"
						+ "_start_date_id,\ncoalesce(cast(to_char(date(schedule.enddate),'YYYYMMDD') as int),-1) as schedule_end_date_id,\ncoalesce(s"
						+ "chedule.starttime,TO_TIMESTAMP('1900-01-01 00:00:00','YYYY-MM-DD HH24:MI:SS')) as schedule_start_time, \ncoalesce(schedul"
						+ "e.endtime,TO_TIMESTAMP('1900-01-01 00:00:00','YYYY-MM-DD HH24:MI:SS')) as schedule_end_time,\ncoalesce(schedule.units,0) "
						+ "as schedule_units,COALESCE(status.description, '') AS schedule_status,\ncoalesce(cast(to_char(date(actual.startdate),'YYY"
						+ "YMMDD') as int),-1) as actual_start_date_id,coalesce(cast(to_char(date(actual.enddate),'YYYYMMDD') as int),-1) as actual"
						+ "_end_date_id, \nformat('%s / %s', p_op_billingnpi, p_op_attendingnpi) as billing_attending_NPI,\nactual.CLQNoteID is not n"
						+ "ull or actual.BLTimeScheduleID is not null as actual_imported,coalesce(actual.holdpay,false) as actual_hold_pay,\ncoalesc"
						+ "e(actual.holdbill,false) as actual_hold_bill,timesheet.ApprovedDate is not null as actual_time_sheet_Approved,\nclqnote_a"
						+ "ctual.ApprovedDate is not null as actual_note_approved_bl,clqnote_actual.ApprovedDatePR is not null as actual_note_appro"
						+ "ved_pr,\nCASE \n	when NOT invoice.Voided AND invoice.ClaimReferenceNumber IS NULL AND actual.IsCurrent\n		AND actual.BLInvo"
						+ "iceLineID IS NULL AND NOT actual.Billed AND NOT base.payer_override AND base.Eligible4Billing AND base.RateType = 'P' th"
						+ "en 'BLOCKED'\n	when (actual.CLQNoteID is not null and (clqnote_actual.ApprovedDate is null OR clqnote_actual.ApprovedDate"
						+ " > actual.DateEdited)) and (actual.BLInvoiceLineID is not null and invoice.BatchConfirmedDate is not null\n    	and (invo"
						+ "ice.ClaimReferenceNumber is null OR (invoice.ClaimReferenceNumber is not null and invoice.BLInvoiceIdReplaced IS NOT NUL"
						+ "L AND NOT EXISTS (SELECT 1 FROM ARPayment arpaymentinner WHERE arpaymentinner.blinvoicelineid = invline.id AND arpayment"
						+ "inner.referenceNumber IS NOT NULL))))\n        and (actual.units <> clqnote_actual.unitsCalculated or actual.BLServiceAut"
						+ "horizedID <> clqnote_actual.BLServiceAuthorizedID) then 'BLOCKED'\n    when (actual.CLQNoteID is not null and (clqnote_ac"
						+ "tual.ApprovedDate is null OR clqnote_actual.ApprovedDate > actual.DateEdited)) then 'REVISION'\n    else 'OK'\nEND as actu"
						+ "al_status_BL,coalesce(busPayType.description,'') as actual_emp_pay_type,\nNOT (actual.BLServiceAuthorizedID is null or ba"
						+ "se.BLServicePayerID is null or (base.Eligible4Billing is null or base.Eligible4Billing)) as ineligible_For_Billing,\nIsAd"
						+ "justment as actual_adjustment,coalesce(cast(to_char(date(prCheck.CheckDate),'YYYYMMDD') as int),-1) as actual_check_Date"
						+ "_ID,\ncoalesce(cast(to_char(date(LastCheckDate),'YYYYMMDD') as int),-1) as actual_last_Check_Date_id,coalesce(actual.paid"
						+ ",false) as actual_paid,\nNOT (actual.BLServiceAuthorizedID is null or base.BLServicePayerID is null or (base.Eligible4Bil"
						+ "ling is null or base.Eligible4Payroll)) as ineligible_For_Payroll,\ncoalesce(invoice.InvoiceNumber,-1) as actual_invoice_"
						+ "Number,coalesce(actual.Billed,false) as actual_billed,coalesce(actual.starttime,to_timestamp('1900-01-01 00:00:00','YYYY"
						+ "-MM-DD HH24:MI:SS')) as actual_start_time, \ncoalesce(actual.endtime,to_timestamp('1900-01-01 00:00:00','YYYY-MM-DD HH24:"
						+ "MI:SS')) as actual_end_time,coalesce(actual.Units, 0) as actual_units,\ncoalesce(actual.duration,to_timestamp('1900-01-01"
						+ " 00:00:00','YYYY-MM-DD HH24:MI:SS')) as actual_duration,\ncoalesce(cast(to_char(date(invline.servicedate),'YYYYMMDD') as "
						+ "int),-1) as service_billed_date_id,coalesce(stg.quantity,0) as in_process_units_batched,\ncoalesce(clqnote_actual.duratio"
						+ "n,to_timestamp('1900-01-01 00:00:00','YYYY-MM-DD HH24:MI:SS')) as note_duration,\ncoalesce(clqnote_actual.endtime,to_time"
						+ "stamp('1900-01-01 00:00:00','YYYY-MM-DD HH24:MI:SS')) as note_end_time,\ncoalesce(clqnote_actual.starttime,to_timestamp('"
						+ "1900-01-01 00:00:00','YYYY-MM-DD HH24:MI:SS')) as note_start_time,\nbase.ratetype as rate_type,\ncoalesce(clqnote_actual.f"
						+ "irstencounter,false) as first_encounter,\ncoalesce(clqnote_actual.unitscalculated,0) as units_calculated,\nclqnote_child.i"
						+ "d is not null as clqnote_has_child,\ncoalesce(schedule.MissedShiftID,-1) as missed_shift_ID,\ncoalesce(schedule.missedshif"
						+ "tunits,0) as missed_shift_units,\ncoalesce(invline.quantity,0) as billed_units,\ncast('B' as varchar(1)) as Transaction_ty"
						+ "pe,\ncoalesce(cast(to_char(date(stg.servicedate),'YYYYMMDD') as int),-1) as transaction_date_id\nfrom base\nleft join blinv"
						+ "oicelinestaged stg on base.authorized_id=stg.blserviceauthorizedid \nleft join bltimeactual actual on actual.id=stg.bltim"
						+ "eactualid \nleft join bltimeschedule schedule on actual.bltimescheduleid=schedule.id \nleft join clqnote as clqnote_actual"
						+ " on actual.clqnoteid=clqnote_actual.id\nleft join clqnote as clqnote_child on clqnote_actual.id=clqnote_child.clqnoteidpa"
						+ "rent \nLEFT JOIN bltimeschedulestatus status ON schedule.bltimeschedulestatusid = status.id\nleft join schoolstatus on bas"
						+ "e.school_district_id = schoolstatus.schooldistrict AND schoolstatus.date = schedule.startdate \nleft join blinvoiceline i"
						+ "nvline on invline.id=actual.blinvoicelineid \nleft outer join BLInvoice as invoice on invline.BLInvoiceID = invoice.ID \nl"
						+ "eft outer join PRTimesheet as timesheet on actual.PRTimesheetID = timesheet.ID \nleft outer join PREmpPayType as empPayTy"
						+ "pe on actual.PREmpPayTypeID = empPayType.ID \nleft outer join PRBusPayType as busPayType on empPayType.PRBusPayTypeID = b"
						+ "usPayType.ID \nleft outer join PREmpPayTran as empPayTran on actual.PREmpPayTranID = empPayTran.ID \nleft outer join PRChe"
						+ "ck as prCheck on empPayTran.PRCheckID = prCheck.ID \ncross join up_findlastcheckdtandadjstflag(actual.id) \ncross join fn_"
						+ "getbillingattendingnpisselect(null, actual.id) \nwhere base.Authorized_id in "
						+ context.ServiceID;

				globalMap.put("tDBInput_6_QUERY", dbquery_tDBInput_6);
				java.sql.ResultSet rs_tDBInput_6 = null;

				try {
					rs_tDBInput_6 = stmt_tDBInput_6.executeQuery(dbquery_tDBInput_6);
					java.sql.ResultSetMetaData rsmd_tDBInput_6 = rs_tDBInput_6.getMetaData();
					int colQtyInRs_tDBInput_6 = rsmd_tDBInput_6.getColumnCount();

					String tmpContent_tDBInput_6 = null;

					while (rs_tDBInput_6.next()) {
						nb_line_tDBInput_6++;

						if (colQtyInRs_tDBInput_6 < 1) {
							row7.client_id = null;
						} else {

							row7.client_id = rs_tDBInput_6.getInt(1);
							if (rs_tDBInput_6.wasNull()) {
								row7.client_id = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 2) {
							row7.supervisor_id = null;
						} else {

							row7.supervisor_id = rs_tDBInput_6.getInt(2);
							if (rs_tDBInput_6.wasNull()) {
								row7.supervisor_id = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 3) {
							row7.client_cost_center_id = null;
						} else {

							row7.client_cost_center_id = rs_tDBInput_6.getInt(3);
							if (rs_tDBInput_6.wasNull()) {
								row7.client_cost_center_id = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 4) {
							row7.employee_cost_center_id = null;
						} else {

							row7.employee_cost_center_id = rs_tDBInput_6.getInt(4);
							if (rs_tDBInput_6.wasNull()) {
								row7.employee_cost_center_id = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 5) {
							row7.employee_id = null;
						} else {

							row7.employee_id = rs_tDBInput_6.getInt(5);
							if (rs_tDBInput_6.wasNull()) {
								row7.employee_id = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 6) {
							row7.ar_payer_id = null;
						} else {

							row7.ar_payer_id = rs_tDBInput_6.getInt(6);
							if (rs_tDBInput_6.wasNull()) {
								row7.ar_payer_id = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 7) {
							row7.department_id = null;
						} else {

							row7.department_id = rs_tDBInput_6.getInt(7);
							if (rs_tDBInput_6.wasNull()) {
								row7.department_id = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 8) {
							row7.service_cost_center_id = null;
						} else {

							row7.service_cost_center_id = rs_tDBInput_6.getInt(8);
							if (rs_tDBInput_6.wasNull()) {
								row7.service_cost_center_id = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 9) {
							row7.site_id = null;
						} else {

							row7.site_id = rs_tDBInput_6.getInt(9);
							if (rs_tDBInput_6.wasNull()) {
								row7.site_id = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 10) {
							row7.school_district_id = null;
						} else {

							row7.school_district_id = rs_tDBInput_6.getInt(10);
							if (rs_tDBInput_6.wasNull()) {
								row7.school_district_id = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 11) {
							row7.authorization_id = null;
						} else {

							row7.authorization_id = rs_tDBInput_6.getInt(11);
							if (rs_tDBInput_6.wasNull()) {
								row7.authorization_id = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 12) {
							row7.authorized_id = null;
						} else {

							row7.authorized_id = rs_tDBInput_6.getInt(12);
							if (rs_tDBInput_6.wasNull()) {
								row7.authorized_id = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 13) {
							row7.service_authorization_approval = null;
						} else {

							row7.service_authorization_approval = routines.system.JDBCUtil.getString(rs_tDBInput_6, 13,
									false);
						}
						if (colQtyInRs_tDBInput_6 < 14) {
							row7.service_authorization_date_id = null;
						} else {

							row7.service_authorization_date_id = routines.system.JDBCUtil.getString(rs_tDBInput_6, 14,
									false);
						}
						if (colQtyInRs_tDBInput_6 < 15) {
							row7.Service_Authorization_Expired = null;
						} else {

							row7.Service_Authorization_Expired = routines.system.JDBCUtil.getString(rs_tDBInput_6, 15,
									false);
						}
						if (colQtyInRs_tDBInput_6 < 16) {
							row7.service_authorization_description = null;
						} else {

							row7.service_authorization_description = routines.system.JDBCUtil.getString(rs_tDBInput_6,
									16, false);
						}
						if (colQtyInRs_tDBInput_6 < 17) {
							row7.company_name = null;
						} else {

							row7.company_name = routines.system.JDBCUtil.getString(rs_tDBInput_6, 17, false);
						}
						if (colQtyInRs_tDBInput_6 < 18) {
							row7.service_abbreviation = null;
						} else {

							row7.service_abbreviation = routines.system.JDBCUtil.getString(rs_tDBInput_6, 18, false);
						}
						if (colQtyInRs_tDBInput_6 < 19) {
							row7.service_code = null;
						} else {

							row7.service_code = routines.system.JDBCUtil.getString(rs_tDBInput_6, 19, false);
						}
						if (colQtyInRs_tDBInput_6 < 20) {
							row7.authorized_start_date_id = null;
						} else {

							row7.authorized_start_date_id = routines.system.JDBCUtil.getString(rs_tDBInput_6, 20,
									false);
						}
						if (colQtyInRs_tDBInput_6 < 21) {
							row7.authorized_end_date_id = null;
						} else {

							row7.authorized_end_date_id = routines.system.JDBCUtil.getString(rs_tDBInput_6, 21, false);
						}
						if (colQtyInRs_tDBInput_6 < 22) {
							row7.authorization_start_date_id = null;
						} else {

							row7.authorization_start_date_id = routines.system.JDBCUtil.getString(rs_tDBInput_6, 22,
									false);
						}
						if (colQtyInRs_tDBInput_6 < 23) {
							row7.authorization_end_date_id = null;
						} else {

							row7.authorization_end_date_id = routines.system.JDBCUtil.getString(rs_tDBInput_6, 23,
									false);
						}
						if (colQtyInRs_tDBInput_6 < 24) {
							row7.service_program = null;
						} else {

							row7.service_program = routines.system.JDBCUtil.getString(rs_tDBInput_6, 24, false);
						}
						if (colQtyInRs_tDBInput_6 < 25) {
							row7.service_place = null;
						} else {

							row7.service_place = routines.system.JDBCUtil.getString(rs_tDBInput_6, 25, false);
						}
						if (colQtyInRs_tDBInput_6 < 26) {
							row7.service_is_sum_and_round = null;
						} else {

							row7.service_is_sum_and_round = rs_tDBInput_6.getInt(26);
							if (rs_tDBInput_6.wasNull()) {
								row7.service_is_sum_and_round = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 27) {
							row7.validate_to_schedules = null;
						} else {

							row7.validate_to_schedules = rs_tDBInput_6.getInt(27);
							if (rs_tDBInput_6.wasNull()) {
								row7.validate_to_schedules = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 28) {
							row7.service_minimum_minutes = null;
						} else {

							row7.service_minimum_minutes = rs_tDBInput_6.getInt(28);
							if (rs_tDBInput_6.wasNull()) {
								row7.service_minimum_minutes = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 29) {
							row7.service_units_per_hour = null;
						} else {

							row7.service_units_per_hour = rs_tDBInput_6.getInt(29);
							if (rs_tDBInput_6.wasNull()) {
								row7.service_units_per_hour = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 30) {
							row7.service_max_units_total = null;
						} else {

							row7.service_max_units_total = rs_tDBInput_6.getInt(30);
							if (rs_tDBInput_6.wasNull()) {
								row7.service_max_units_total = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 31) {
							row7.service_auth_max_units_total = null;
						} else {

							row7.service_auth_max_units_total = rs_tDBInput_6.getInt(31);
							if (rs_tDBInput_6.wasNull()) {
								row7.service_auth_max_units_total = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 32) {
							row7.auth_level_validation = null;
						} else {

							row7.auth_level_validation = rs_tDBInput_6.getBoolean(32);
							if (rs_tDBInput_6.wasNull()) {
								row7.auth_level_validation = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 33) {
							row7.total_units_authorized = null;
						} else {

							row7.total_units_authorized = rs_tDBInput_6.getInt(33);
							if (rs_tDBInput_6.wasNull()) {
								row7.total_units_authorized = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 34) {
							row7.current_rate = null;
						} else {

							row7.current_rate = rs_tDBInput_6.getFloat(34);
							if (rs_tDBInput_6.wasNull()) {
								row7.current_rate = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 35) {
							row7.caregiver_id = null;
						} else {

							row7.caregiver_id = rs_tDBInput_6.getInt(35);
							if (rs_tDBInput_6.wasNull()) {
								row7.caregiver_id = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 36) {
							row7.inv_stg_service_date_id = null;
						} else {

							row7.inv_stg_service_date_id = rs_tDBInput_6.getInt(36);
							if (rs_tDBInput_6.wasNull()) {
								row7.inv_stg_service_date_id = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 37) {
							row7.in_schedule_note_service_date_id = null;
						} else {

							row7.in_schedule_note_service_date_id = rs_tDBInput_6.getInt(37);
							if (rs_tDBInput_6.wasNull()) {
								row7.in_schedule_note_service_date_id = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 38) {
							row7.note_date_of_service_id = null;
						} else {

							row7.note_date_of_service_id = rs_tDBInput_6.getInt(38);
							if (rs_tDBInput_6.wasNull()) {
								row7.note_date_of_service_id = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 39) {
							row7.in_actual_note_service_date_id = null;
						} else {

							row7.in_actual_note_service_date_id = rs_tDBInput_6.getInt(39);
							if (rs_tDBInput_6.wasNull()) {
								row7.in_actual_note_service_date_id = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 40) {
							row7.schedule_duration = null;
						} else {

							row7.schedule_duration = routines.system.JDBCUtil.getDate(rs_tDBInput_6, 40);
						}
						if (colQtyInRs_tDBInput_6 < 41) {
							row7.schedule_start_date_id = null;
						} else {

							row7.schedule_start_date_id = rs_tDBInput_6.getInt(41);
							if (rs_tDBInput_6.wasNull()) {
								row7.schedule_start_date_id = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 42) {
							row7.schedule_end_date_id = null;
						} else {

							row7.schedule_end_date_id = rs_tDBInput_6.getInt(42);
							if (rs_tDBInput_6.wasNull()) {
								row7.schedule_end_date_id = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 43) {
							row7.schedule_start_time = null;
						} else {

							row7.schedule_start_time = routines.system.JDBCUtil.getDate(rs_tDBInput_6, 43);
						}
						if (colQtyInRs_tDBInput_6 < 44) {
							row7.schedule_end_time = null;
						} else {

							row7.schedule_end_time = routines.system.JDBCUtil.getDate(rs_tDBInput_6, 44);
						}
						if (colQtyInRs_tDBInput_6 < 45) {
							row7.schedule_units = null;
						} else {

							row7.schedule_units = rs_tDBInput_6.getInt(45);
							if (rs_tDBInput_6.wasNull()) {
								row7.schedule_units = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 46) {
							row7.schedule_status = null;
						} else {

							row7.schedule_status = routines.system.JDBCUtil.getString(rs_tDBInput_6, 46, false);
						}
						if (colQtyInRs_tDBInput_6 < 47) {
							row7.actual_start_date_id = null;
						} else {

							row7.actual_start_date_id = rs_tDBInput_6.getInt(47);
							if (rs_tDBInput_6.wasNull()) {
								row7.actual_start_date_id = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 48) {
							row7.actual_end_date_id = null;
						} else {

							row7.actual_end_date_id = rs_tDBInput_6.getInt(48);
							if (rs_tDBInput_6.wasNull()) {
								row7.actual_end_date_id = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 49) {
							row7.billing_attending_NPI = null;
						} else {

							row7.billing_attending_NPI = routines.system.JDBCUtil.getString(rs_tDBInput_6, 49, false);
						}
						if (colQtyInRs_tDBInput_6 < 50) {
							row7.actual_imported = null;
						} else {

							row7.actual_imported = rs_tDBInput_6.getBoolean(50);
							if (rs_tDBInput_6.wasNull()) {
								row7.actual_imported = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 51) {
							row7.actual_hold_pay = null;
						} else {

							row7.actual_hold_pay = rs_tDBInput_6.getBoolean(51);
							if (rs_tDBInput_6.wasNull()) {
								row7.actual_hold_pay = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 52) {
							row7.actual_hold_bill = null;
						} else {

							row7.actual_hold_bill = rs_tDBInput_6.getBoolean(52);
							if (rs_tDBInput_6.wasNull()) {
								row7.actual_hold_bill = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 53) {
							row7.actual_time_sheet_approved = null;
						} else {

							row7.actual_time_sheet_approved = rs_tDBInput_6.getBoolean(53);
							if (rs_tDBInput_6.wasNull()) {
								row7.actual_time_sheet_approved = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 54) {
							row7.actual_note_approved_bl = null;
						} else {

							row7.actual_note_approved_bl = rs_tDBInput_6.getBoolean(54);
							if (rs_tDBInput_6.wasNull()) {
								row7.actual_note_approved_bl = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 55) {
							row7.actual_note_approved_pr = null;
						} else {

							row7.actual_note_approved_pr = rs_tDBInput_6.getBoolean(55);
							if (rs_tDBInput_6.wasNull()) {
								row7.actual_note_approved_pr = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 56) {
							row7.actual_status_BL = null;
						} else {

							row7.actual_status_BL = routines.system.JDBCUtil.getString(rs_tDBInput_6, 56, false);
						}
						if (colQtyInRs_tDBInput_6 < 57) {
							row7.actual_emp_pay_type = null;
						} else {

							row7.actual_emp_pay_type = routines.system.JDBCUtil.getString(rs_tDBInput_6, 57, false);
						}
						if (colQtyInRs_tDBInput_6 < 58) {
							row7.ineligible_for_billing = null;
						} else {

							row7.ineligible_for_billing = rs_tDBInput_6.getBoolean(58);
							if (rs_tDBInput_6.wasNull()) {
								row7.ineligible_for_billing = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 59) {
							row7.actual_adjustment = null;
						} else {

							row7.actual_adjustment = rs_tDBInput_6.getBoolean(59);
							if (rs_tDBInput_6.wasNull()) {
								row7.actual_adjustment = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 60) {
							row7.actual_check_date_id = null;
						} else {

							row7.actual_check_date_id = rs_tDBInput_6.getInt(60);
							if (rs_tDBInput_6.wasNull()) {
								row7.actual_check_date_id = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 61) {
							row7.actual_last_check_date_id = null;
						} else {

							row7.actual_last_check_date_id = rs_tDBInput_6.getInt(61);
							if (rs_tDBInput_6.wasNull()) {
								row7.actual_last_check_date_id = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 62) {
							row7.actual_paid = null;
						} else {

							row7.actual_paid = rs_tDBInput_6.getBoolean(62);
							if (rs_tDBInput_6.wasNull()) {
								row7.actual_paid = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 63) {
							row7.ineligible_for_payroll = null;
						} else {

							row7.ineligible_for_payroll = rs_tDBInput_6.getBoolean(63);
							if (rs_tDBInput_6.wasNull()) {
								row7.ineligible_for_payroll = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 64) {
							row7.actual_invoice_number = null;
						} else {

							row7.actual_invoice_number = rs_tDBInput_6.getInt(64);
							if (rs_tDBInput_6.wasNull()) {
								row7.actual_invoice_number = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 65) {
							row7.actual_billed = null;
						} else {

							row7.actual_billed = rs_tDBInput_6.getBoolean(65);
							if (rs_tDBInput_6.wasNull()) {
								row7.actual_billed = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 66) {
							row7.actual_start_time = null;
						} else {

							row7.actual_start_time = routines.system.JDBCUtil.getDate(rs_tDBInput_6, 66);
						}
						if (colQtyInRs_tDBInput_6 < 67) {
							row7.actual_end_time = null;
						} else {

							row7.actual_end_time = routines.system.JDBCUtil.getDate(rs_tDBInput_6, 67);
						}
						if (colQtyInRs_tDBInput_6 < 68) {
							row7.actual_units = null;
						} else {

							row7.actual_units = rs_tDBInput_6.getInt(68);
							if (rs_tDBInput_6.wasNull()) {
								row7.actual_units = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 69) {
							row7.actual_duration = null;
						} else {

							row7.actual_duration = routines.system.JDBCUtil.getDate(rs_tDBInput_6, 69);
						}
						if (colQtyInRs_tDBInput_6 < 70) {
							row7.service_billed_date_id = null;
						} else {

							row7.service_billed_date_id = rs_tDBInput_6.getInt(70);
							if (rs_tDBInput_6.wasNull()) {
								row7.service_billed_date_id = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 71) {
							row7.in_process_units_batched = null;
						} else {

							row7.in_process_units_batched = rs_tDBInput_6.getInt(71);
							if (rs_tDBInput_6.wasNull()) {
								row7.in_process_units_batched = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 72) {
							row7.note_duration = null;
						} else {

							row7.note_duration = routines.system.JDBCUtil.getDate(rs_tDBInput_6, 72);
						}
						if (colQtyInRs_tDBInput_6 < 73) {
							row7.note_end_time = null;
						} else {

							row7.note_end_time = routines.system.JDBCUtil.getDate(rs_tDBInput_6, 73);
						}
						if (colQtyInRs_tDBInput_6 < 74) {
							row7.note_start_time = null;
						} else {

							row7.note_start_time = routines.system.JDBCUtil.getDate(rs_tDBInput_6, 74);
						}
						if (colQtyInRs_tDBInput_6 < 75) {
							row7.rate_type = null;
						} else {

							row7.rate_type = routines.system.JDBCUtil.getString(rs_tDBInput_6, 75, false);
						}
						if (colQtyInRs_tDBInput_6 < 76) {
							row7.first_encounter = null;
						} else {

							row7.first_encounter = rs_tDBInput_6.getBoolean(76);
							if (rs_tDBInput_6.wasNull()) {
								row7.first_encounter = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 77) {
							row7.units_calculated = null;
						} else {

							row7.units_calculated = rs_tDBInput_6.getInt(77);
							if (rs_tDBInput_6.wasNull()) {
								row7.units_calculated = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 78) {
							row7.clqnote_has_child = null;
						} else {

							row7.clqnote_has_child = rs_tDBInput_6.getBoolean(78);
							if (rs_tDBInput_6.wasNull()) {
								row7.clqnote_has_child = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 79) {
							row7.missed_shift_id = null;
						} else {

							row7.missed_shift_id = rs_tDBInput_6.getInt(79);
							if (rs_tDBInput_6.wasNull()) {
								row7.missed_shift_id = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 80) {
							row7.missed_shift_units = null;
						} else {

							row7.missed_shift_units = rs_tDBInput_6.getInt(80);
							if (rs_tDBInput_6.wasNull()) {
								row7.missed_shift_units = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 81) {
							row7.billed_units = null;
						} else {

							row7.billed_units = rs_tDBInput_6.getInt(81);
							if (rs_tDBInput_6.wasNull()) {
								row7.billed_units = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 82) {
							row7.transaction_type = null;
						} else {

							row7.transaction_type = routines.system.JDBCUtil.getString(rs_tDBInput_6, 82, false);
						}
						if (colQtyInRs_tDBInput_6 < 83) {
							row7.transaction_date_id = null;
						} else {

							row7.transaction_date_id = rs_tDBInput_6.getInt(83);
							if (rs_tDBInput_6.wasNull()) {
								row7.transaction_date_id = null;
							}
						}

						/**
						 * [tDBInput_6 begin ] stop
						 */

						/**
						 * [tDBInput_6 main ] start
						 */

						currentComponent = "tDBInput_6";

						tos_count_tDBInput_6++;

						/**
						 * [tDBInput_6 main ] stop
						 */

						/**
						 * [tDBInput_6 process_data_begin ] start
						 */

						currentComponent = "tDBInput_6";

						/**
						 * [tDBInput_6 process_data_begin ] stop
						 */

						/**
						 * [tBigQueryOutput_6_tBQOB main ] start
						 */

						currentVirtualComponent = "tBigQueryOutput_6";

						currentComponent = "tBigQueryOutput_6_tBQOB";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row7"

							);
						}

						String[] row_tBigQueryOutput_6_tBQOB = new String[83];
						java.util.Arrays.fill(row_tBigQueryOutput_6_tBQOB, "\\N");

						int curColumnIndex_tBigQueryOutput_6_tBQOB = 0;

						curColumnIndex_tBigQueryOutput_6_tBQOB = 0;

						if (row7.client_id != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = String
									.valueOf(row7.client_id);

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 1;

						if (row7.supervisor_id != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = String
									.valueOf(row7.supervisor_id);

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 2;

						if (row7.client_cost_center_id != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = String
									.valueOf(row7.client_cost_center_id);

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 3;

						if (row7.employee_cost_center_id != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = String
									.valueOf(row7.employee_cost_center_id);

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 4;

						if (row7.employee_id != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = String
									.valueOf(row7.employee_id);

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 5;

						if (row7.ar_payer_id != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = String
									.valueOf(row7.ar_payer_id);

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 6;

						if (row7.department_id != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = String
									.valueOf(row7.department_id);

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 7;

						if (row7.service_cost_center_id != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = String
									.valueOf(row7.service_cost_center_id);

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 8;

						if (row7.site_id != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = String
									.valueOf(row7.site_id);

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 9;

						if (row7.school_district_id != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = String
									.valueOf(row7.school_district_id);

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 10;

						if (row7.authorization_id != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = String
									.valueOf(row7.authorization_id);

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 11;

						if (row7.authorized_id != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = String
									.valueOf(row7.authorized_id);

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 12;

						if (row7.service_authorization_approval != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = row7.service_authorization_approval;

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 13;

						if (row7.service_authorization_date_id != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = row7.service_authorization_date_id;

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 14;

						if (row7.Service_Authorization_Expired != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = row7.Service_Authorization_Expired;

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 15;

						if (row7.service_authorization_description != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = row7.service_authorization_description;

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 16;

						if (row7.company_name != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = row7.company_name;

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 17;

						if (row7.service_abbreviation != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = row7.service_abbreviation;

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 18;

						if (row7.service_code != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = row7.service_code;

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 19;

						if (row7.authorized_start_date_id != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = row7.authorized_start_date_id;

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 20;

						if (row7.authorized_end_date_id != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = row7.authorized_end_date_id;

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 21;

						if (row7.authorization_start_date_id != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = row7.authorization_start_date_id;

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 22;

						if (row7.authorization_end_date_id != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = row7.authorization_end_date_id;

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 23;

						if (row7.service_program != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = row7.service_program;

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 24;

						if (row7.service_place != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = row7.service_place;

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 25;

						if (row7.service_is_sum_and_round != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = String
									.valueOf(row7.service_is_sum_and_round);

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 26;

						if (row7.validate_to_schedules != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = String
									.valueOf(row7.validate_to_schedules);

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 27;

						if (row7.service_minimum_minutes != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = String
									.valueOf(row7.service_minimum_minutes);

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 28;

						if (row7.service_units_per_hour != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = String
									.valueOf(row7.service_units_per_hour);

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 29;

						if (row7.service_max_units_total != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = String
									.valueOf(row7.service_max_units_total);

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 30;

						if (row7.service_auth_max_units_total != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = String
									.valueOf(row7.service_auth_max_units_total);

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 31;

						if (row7.auth_level_validation != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = String
									.valueOf(true == row7.auth_level_validation ? "1" : "0");

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 32;

						if (row7.total_units_authorized != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = String
									.valueOf(row7.total_units_authorized);

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 33;

						if (row7.current_rate != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = String
									.valueOf(row7.current_rate);

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 34;

						if (row7.caregiver_id != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = String
									.valueOf(row7.caregiver_id);

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 35;

						if (row7.inv_stg_service_date_id != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = String
									.valueOf(row7.inv_stg_service_date_id);

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 36;

						if (row7.in_schedule_note_service_date_id != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = String
									.valueOf(row7.in_schedule_note_service_date_id);

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 37;

						if (row7.note_date_of_service_id != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = String
									.valueOf(row7.note_date_of_service_id);

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 38;

						if (row7.in_actual_note_service_date_id != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = String
									.valueOf(row7.in_actual_note_service_date_id);

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 39;

						if (row7.schedule_duration != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = FormatterUtils
									.format_Date(row7.schedule_duration, "yyyy-MM-dd HH:mm:ss");

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 40;

						if (row7.schedule_start_date_id != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = String
									.valueOf(row7.schedule_start_date_id);

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 41;

						if (row7.schedule_end_date_id != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = String
									.valueOf(row7.schedule_end_date_id);

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 42;

						if (row7.schedule_start_time != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = FormatterUtils
									.format_Date(row7.schedule_start_time, "yyyy-MM-dd HH:mm:ss");

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 43;

						if (row7.schedule_end_time != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = FormatterUtils
									.format_Date(row7.schedule_end_time, "yyyy-MM-dd HH:mm:ss");

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 44;

						if (row7.schedule_units != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = String
									.valueOf(row7.schedule_units);

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 45;

						if (row7.schedule_status != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = row7.schedule_status;

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 46;

						if (row7.actual_start_date_id != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = String
									.valueOf(row7.actual_start_date_id);

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 47;

						if (row7.actual_end_date_id != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = String
									.valueOf(row7.actual_end_date_id);

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 48;

						if (row7.billing_attending_NPI != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = row7.billing_attending_NPI;

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 49;

						if (row7.actual_imported != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = String
									.valueOf(true == row7.actual_imported ? "1" : "0");

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 50;

						if (row7.actual_hold_pay != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = String
									.valueOf(true == row7.actual_hold_pay ? "1" : "0");

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 51;

						if (row7.actual_hold_bill != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = String
									.valueOf(true == row7.actual_hold_bill ? "1" : "0");

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 52;

						if (row7.actual_time_sheet_approved != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = String
									.valueOf(true == row7.actual_time_sheet_approved ? "1" : "0");

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 53;

						if (row7.actual_note_approved_bl != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = String
									.valueOf(true == row7.actual_note_approved_bl ? "1" : "0");

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 54;

						if (row7.actual_note_approved_pr != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = String
									.valueOf(true == row7.actual_note_approved_pr ? "1" : "0");

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 55;

						if (row7.actual_status_BL != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = row7.actual_status_BL;

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 56;

						if (row7.actual_emp_pay_type != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = row7.actual_emp_pay_type;

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 57;

						if (row7.ineligible_for_billing != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = String
									.valueOf(true == row7.ineligible_for_billing ? "1" : "0");

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 58;

						if (row7.actual_adjustment != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = String
									.valueOf(true == row7.actual_adjustment ? "1" : "0");

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 59;

						if (row7.actual_check_date_id != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = String
									.valueOf(row7.actual_check_date_id);

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 60;

						if (row7.actual_last_check_date_id != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = String
									.valueOf(row7.actual_last_check_date_id);

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 61;

						if (row7.actual_paid != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = String
									.valueOf(true == row7.actual_paid ? "1" : "0");

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 62;

						if (row7.ineligible_for_payroll != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = String
									.valueOf(true == row7.ineligible_for_payroll ? "1" : "0");

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 63;

						if (row7.actual_invoice_number != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = String
									.valueOf(row7.actual_invoice_number);

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 64;

						if (row7.actual_billed != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = String
									.valueOf(true == row7.actual_billed ? "1" : "0");

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 65;

						if (row7.actual_start_time != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = FormatterUtils
									.format_Date(row7.actual_start_time, "yyyy-MM-dd HH:mm:ss");

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 66;

						if (row7.actual_end_time != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = FormatterUtils
									.format_Date(row7.actual_end_time, "yyyy-MM-dd HH:mm:ss");

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 67;

						if (row7.actual_units != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = String
									.valueOf(row7.actual_units);

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 68;

						if (row7.actual_duration != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = FormatterUtils
									.format_Date(row7.actual_duration, "yyyy-MM-dd HH:mm:ss");

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 69;

						if (row7.service_billed_date_id != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = String
									.valueOf(row7.service_billed_date_id);

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 70;

						if (row7.in_process_units_batched != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = String
									.valueOf(row7.in_process_units_batched);

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 71;

						if (row7.note_duration != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = FormatterUtils
									.format_Date(row7.note_duration, "yyyy-MM-dd HH:mm:ss");

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 72;

						if (row7.note_end_time != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = FormatterUtils
									.format_Date(row7.note_end_time, "yyyy-MM-dd HH:mm:ss");

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 73;

						if (row7.note_start_time != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = FormatterUtils
									.format_Date(row7.note_start_time, "yyyy-MM-dd HH:mm:ss");

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 74;

						if (row7.rate_type != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = row7.rate_type;

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 75;

						if (row7.first_encounter != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = String
									.valueOf(true == row7.first_encounter ? "1" : "0");

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 76;

						if (row7.units_calculated != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = String
									.valueOf(row7.units_calculated);

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 77;

						if (row7.clqnote_has_child != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = String
									.valueOf(true == row7.clqnote_has_child ? "1" : "0");

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 78;

						if (row7.missed_shift_id != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = String
									.valueOf(row7.missed_shift_id);

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 79;

						if (row7.missed_shift_units != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = String
									.valueOf(row7.missed_shift_units);

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 80;

						if (row7.billed_units != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = String
									.valueOf(row7.billed_units);

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 81;

						if (row7.transaction_type != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = row7.transaction_type;

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 82;

						if (row7.transaction_date_id != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = String
									.valueOf(row7.transaction_date_id);

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						csvWriter_tBigQueryOutput_6_tBQOB.writeNextEnhance(row_tBigQueryOutput_6_tBQOB, "");
						nb_line_tBigQueryOutput_6_tBQOB++;

						tos_count_tBigQueryOutput_6_tBQOB++;

						/**
						 * [tBigQueryOutput_6_tBQOB main ] stop
						 */

						/**
						 * [tBigQueryOutput_6_tBQOB process_data_begin ] start
						 */

						currentVirtualComponent = "tBigQueryOutput_6";

						currentComponent = "tBigQueryOutput_6_tBQOB";

						/**
						 * [tBigQueryOutput_6_tBQOB process_data_begin ] stop
						 */

						/**
						 * [tBigQueryOutput_6_tBQOB process_data_end ] start
						 */

						currentVirtualComponent = "tBigQueryOutput_6";

						currentComponent = "tBigQueryOutput_6_tBQOB";

						/**
						 * [tBigQueryOutput_6_tBQOB process_data_end ] stop
						 */

						/**
						 * [tDBInput_6 process_data_end ] start
						 */

						currentComponent = "tDBInput_6";

						/**
						 * [tDBInput_6 process_data_end ] stop
						 */

						/**
						 * [tDBInput_6 end ] start
						 */

						currentComponent = "tDBInput_6";

					}
				} finally {
					if (rs_tDBInput_6 != null) {
						rs_tDBInput_6.close();
					}
					if (stmt_tDBInput_6 != null) {
						stmt_tDBInput_6.close();
					}
					if (conn_tDBInput_6 != null && !conn_tDBInput_6.isClosed()) {

						conn_tDBInput_6.commit();

						conn_tDBInput_6.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}
				globalMap.put("tDBInput_6_NB_LINE", nb_line_tDBInput_6);

				ok_Hash.put("tDBInput_6", true);
				end_Hash.put("tDBInput_6", System.currentTimeMillis());

				/**
				 * [tDBInput_6 end ] stop
				 */

				/**
				 * [tBigQueryOutput_6_tBQOB end ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_6";

				currentComponent = "tBigQueryOutput_6_tBQOB";

				if (csvWriter_tBigQueryOutput_6_tBQOB != null) {
					csvWriter_tBigQueryOutput_6_tBQOB.close();
				}
				resourceMap.put("finish_tBigQueryOutput_6_tBQOB", true);
				globalMap.put("tBigQueryOutput_6_tBQOB_NB_LINE", nb_line_tBigQueryOutput_6_tBQOB);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row7");
				}

				ok_Hash.put("tBigQueryOutput_6_tBQOB", true);
				end_Hash.put("tBigQueryOutput_6_tBQOB", System.currentTimeMillis());

				/**
				 * [tBigQueryOutput_6_tBQOB end ] stop
				 */

				/**
				 * [tBigQueryOutput_6_tBQBE begin ] start
				 */

				ok_Hash.put("tBigQueryOutput_6_tBQBE", false);
				start_Hash.put("tBigQueryOutput_6_tBQBE", System.currentTimeMillis());

				currentVirtualComponent = "tBigQueryOutput_6";

				currentComponent = "tBigQueryOutput_6_tBQBE";

				int tos_count_tBigQueryOutput_6_tBQBE = 0;

				/* ----START-CREATING-CLIENT (Cloud API)---- */

				com.google.auth.oauth2.GoogleCredentials credentials_tBigQueryOutput_6;
				java.io.File credentialsFile_tBigQueryOutput_6 = new java.io.File(
						"/Users/jsun/Documents/WCIWork/OnTarget/code/otmirror-060322-9471bb896012.json");
				try (java.io.FileInputStream credentialsStream_tBigQueryOutput_6 = new java.io.FileInputStream(
						credentialsFile_tBigQueryOutput_6)) {
					credentials_tBigQueryOutput_6 = com.google.auth.oauth2.ServiceAccountCredentials
							.fromStream(credentialsStream_tBigQueryOutput_6);
				}

				com.google.cloud.bigquery.BigQuery bigquery_tBigQueryOutput_6 = com.google.cloud.bigquery.BigQueryOptions
						.newBuilder().setCredentials(credentials_tBigQueryOutput_6).setProjectId("otmirror-060322")
						.build().getService();

				/* ----END-CREATING-CLIENT (Cloud API)---- */

				long nb_line_tBigQueryOutput_6 = 0;

				com.google.auth.Credentials credential_tBigQueryOutput_6 = null;
				try {
					credential_tBigQueryOutput_6 = com.google.auth.oauth2.GoogleCredentials
							.fromStream(new java.io.FileInputStream(
									"/Users/jsun/Documents/WCIWork/OnTarget/code/otmirror-060322-9471bb896012.json"));
				} catch (IOException e_tBigQueryOutput_6) {
					globalMap.put("tBigQueryOutput_6_ERROR_MESSAGE", e_tBigQueryOutput_6.getMessage());
				}
				com.google.cloud.storage.Storage storage_tBigQueryOutput_6 = com.google.cloud.storage.StorageOptions
						.newBuilder().setCredentials(credential_tBigQueryOutput_6).build().getService();

				java.io.File file_tBigQueryOutput_6 = new java.io.File(
						"/Applications/TOSDI-8.0.1/studio/workspace/batched_data.avro");

				com.google.cloud.storage.BlobInfo blobInfo_tBigQueryOutput_6 = com.google.cloud.storage.BlobInfo
						.newBuilder("dw-tmp", file_tBigQueryOutput_6.getName()).build();
				storage_tBigQueryOutput_6.create(blobInfo_tBigQueryOutput_6,
						java.nio.file.Files.readAllBytes(file_tBigQueryOutput_6.toPath()));

				/* ----END-UPLOADING-FILE---- */

				/* ----START-CREATING-JOB (Cloud API)---- */
				com.google.cloud.bigquery.TableId tableId_tBigQueryOutput_6 = com.google.cloud.bigquery.TableId
						.of("otmirror-060322", "DW", "fact_transactions");
				com.google.cloud.bigquery.LoadJobConfiguration.Builder loadJobBuilder_tBigQueryOutput_6 = com.google.cloud.bigquery.LoadJobConfiguration
						.newBuilder(tableId_tBigQueryOutput_6, "gs://dw-tmp/batched_data.avro");

				boolean dropTable_tBigQueryOutput_6 = false;

				if (dropTable_tBigQueryOutput_6
						&& bigquery_tBigQueryOutput_6.getTable(tableId_tBigQueryOutput_6) != null) {
					boolean deleted = bigquery_tBigQueryOutput_6.delete(tableId_tBigQueryOutput_6);
					if (deleted) {

					} else {
						throw new RuntimeException("Unable to delete table " + tableId_tBigQueryOutput_6);
					}
				}

				if (bigquery_tBigQueryOutput_6.getTable(tableId_tBigQueryOutput_6) == null) {
					java.util.List<com.google.cloud.bigquery.Field> fields_tBigQueryOutput_6 = new java.util.ArrayList<>();

					com.google.cloud.bigquery.Field field_0 = com.google.cloud.bigquery.Field
							.newBuilder("client_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_0);

					com.google.cloud.bigquery.Field field_1 = com.google.cloud.bigquery.Field
							.newBuilder("supervisor_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_1);

					com.google.cloud.bigquery.Field field_2 = com.google.cloud.bigquery.Field
							.newBuilder("client_cost_center_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_2);

					com.google.cloud.bigquery.Field field_3 = com.google.cloud.bigquery.Field
							.newBuilder("employee_cost_center_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_3);

					com.google.cloud.bigquery.Field field_4 = com.google.cloud.bigquery.Field
							.newBuilder("employee_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_4);

					com.google.cloud.bigquery.Field field_5 = com.google.cloud.bigquery.Field
							.newBuilder("ar_payer_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_5);

					com.google.cloud.bigquery.Field field_6 = com.google.cloud.bigquery.Field
							.newBuilder("department_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_6);

					com.google.cloud.bigquery.Field field_7 = com.google.cloud.bigquery.Field
							.newBuilder("service_cost_center_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_7);

					com.google.cloud.bigquery.Field field_8 = com.google.cloud.bigquery.Field
							.newBuilder("site_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_8);

					com.google.cloud.bigquery.Field field_9 = com.google.cloud.bigquery.Field
							.newBuilder("school_district_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_9);

					com.google.cloud.bigquery.Field field_10 = com.google.cloud.bigquery.Field
							.newBuilder("authorization_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_10);

					com.google.cloud.bigquery.Field field_11 = com.google.cloud.bigquery.Field
							.newBuilder("authorized_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_11);

					com.google.cloud.bigquery.Field field_12 = com.google.cloud.bigquery.Field
							.newBuilder("service_authorization_approval",
									com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_12);

					com.google.cloud.bigquery.Field field_13 = com.google.cloud.bigquery.Field
							.newBuilder("service_authorization_date_id",
									com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_13);

					com.google.cloud.bigquery.Field field_14 = com.google.cloud.bigquery.Field
							.newBuilder("Service_Authorization_Expired",
									com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_14);

					com.google.cloud.bigquery.Field field_15 = com.google.cloud.bigquery.Field
							.newBuilder("service_authorization_description",
									com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_15);

					com.google.cloud.bigquery.Field field_16 = com.google.cloud.bigquery.Field
							.newBuilder("company_name", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_16);

					com.google.cloud.bigquery.Field field_17 = com.google.cloud.bigquery.Field
							.newBuilder("service_abbreviation", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_17);

					com.google.cloud.bigquery.Field field_18 = com.google.cloud.bigquery.Field
							.newBuilder("service_code", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_18);

					com.google.cloud.bigquery.Field field_19 = com.google.cloud.bigquery.Field
							.newBuilder("authorized_start_date_id", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_19);

					com.google.cloud.bigquery.Field field_20 = com.google.cloud.bigquery.Field
							.newBuilder("authorized_end_date_id", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_20);

					com.google.cloud.bigquery.Field field_21 = com.google.cloud.bigquery.Field
							.newBuilder("authorization_start_date_id",
									com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_21);

					com.google.cloud.bigquery.Field field_22 = com.google.cloud.bigquery.Field
							.newBuilder("authorization_end_date_id", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_22);

					com.google.cloud.bigquery.Field field_23 = com.google.cloud.bigquery.Field
							.newBuilder("service_program", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_23);

					com.google.cloud.bigquery.Field field_24 = com.google.cloud.bigquery.Field
							.newBuilder("service_place", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_24);

					com.google.cloud.bigquery.Field field_25 = com.google.cloud.bigquery.Field
							.newBuilder("service_is_sum_and_round", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_25);

					com.google.cloud.bigquery.Field field_26 = com.google.cloud.bigquery.Field
							.newBuilder("validate_to_schedules", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_26);

					com.google.cloud.bigquery.Field field_27 = com.google.cloud.bigquery.Field
							.newBuilder("service_minimum_minutes", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_27);

					com.google.cloud.bigquery.Field field_28 = com.google.cloud.bigquery.Field
							.newBuilder("service_units_per_hour", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_28);

					com.google.cloud.bigquery.Field field_29 = com.google.cloud.bigquery.Field
							.newBuilder("service_max_units_total", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_29);

					com.google.cloud.bigquery.Field field_30 = com.google.cloud.bigquery.Field
							.newBuilder("service_auth_max_units_total",
									com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_30);

					com.google.cloud.bigquery.Field field_31 = com.google.cloud.bigquery.Field
							.newBuilder("auth_level_validation", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_31);

					com.google.cloud.bigquery.Field field_32 = com.google.cloud.bigquery.Field
							.newBuilder("total_units_authorized", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_32);

					com.google.cloud.bigquery.Field field_33 = com.google.cloud.bigquery.Field
							.newBuilder("current_rate", com.google.cloud.bigquery.LegacySQLTypeName.FLOAT)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_33);

					com.google.cloud.bigquery.Field field_34 = com.google.cloud.bigquery.Field
							.newBuilder("caregiver_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_34);

					com.google.cloud.bigquery.Field field_35 = com.google.cloud.bigquery.Field
							.newBuilder("inv_stg_service_date_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_35);

					com.google.cloud.bigquery.Field field_36 = com.google.cloud.bigquery.Field
							.newBuilder("in_schedule_note_service_date_id",
									com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_36);

					com.google.cloud.bigquery.Field field_37 = com.google.cloud.bigquery.Field
							.newBuilder("note_date_of_service_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_37);

					com.google.cloud.bigquery.Field field_38 = com.google.cloud.bigquery.Field
							.newBuilder("in_actual_note_service_date_id",
									com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_38);

					com.google.cloud.bigquery.Field field_39 = com.google.cloud.bigquery.Field
							.newBuilder("schedule_duration", com.google.cloud.bigquery.LegacySQLTypeName.TIMESTAMP)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_39);

					com.google.cloud.bigquery.Field field_40 = com.google.cloud.bigquery.Field
							.newBuilder("schedule_start_date_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_40);

					com.google.cloud.bigquery.Field field_41 = com.google.cloud.bigquery.Field
							.newBuilder("schedule_end_date_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_41);

					com.google.cloud.bigquery.Field field_42 = com.google.cloud.bigquery.Field
							.newBuilder("schedule_start_time", com.google.cloud.bigquery.LegacySQLTypeName.TIMESTAMP)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_42);

					com.google.cloud.bigquery.Field field_43 = com.google.cloud.bigquery.Field
							.newBuilder("schedule_end_time", com.google.cloud.bigquery.LegacySQLTypeName.TIMESTAMP)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_43);

					com.google.cloud.bigquery.Field field_44 = com.google.cloud.bigquery.Field
							.newBuilder("schedule_units", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_44);

					com.google.cloud.bigquery.Field field_45 = com.google.cloud.bigquery.Field
							.newBuilder("schedule_status", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_45);

					com.google.cloud.bigquery.Field field_46 = com.google.cloud.bigquery.Field
							.newBuilder("actual_start_date_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_46);

					com.google.cloud.bigquery.Field field_47 = com.google.cloud.bigquery.Field
							.newBuilder("actual_end_date_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_47);

					com.google.cloud.bigquery.Field field_48 = com.google.cloud.bigquery.Field
							.newBuilder("billing_attending_NPI", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_48);

					com.google.cloud.bigquery.Field field_49 = com.google.cloud.bigquery.Field
							.newBuilder("actual_imported", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_49);

					com.google.cloud.bigquery.Field field_50 = com.google.cloud.bigquery.Field
							.newBuilder("actual_hold_pay", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_50);

					com.google.cloud.bigquery.Field field_51 = com.google.cloud.bigquery.Field
							.newBuilder("actual_hold_bill", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_51);

					com.google.cloud.bigquery.Field field_52 = com.google.cloud.bigquery.Field
							.newBuilder("actual_time_sheet_approved",
									com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_52);

					com.google.cloud.bigquery.Field field_53 = com.google.cloud.bigquery.Field
							.newBuilder("actual_note_approved_bl", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_53);

					com.google.cloud.bigquery.Field field_54 = com.google.cloud.bigquery.Field
							.newBuilder("actual_note_approved_pr", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_54);

					com.google.cloud.bigquery.Field field_55 = com.google.cloud.bigquery.Field
							.newBuilder("actual_status_BL", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_55);

					com.google.cloud.bigquery.Field field_56 = com.google.cloud.bigquery.Field
							.newBuilder("actual_emp_pay_type", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_56);

					com.google.cloud.bigquery.Field field_57 = com.google.cloud.bigquery.Field
							.newBuilder("ineligible_for_billing", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_57);

					com.google.cloud.bigquery.Field field_58 = com.google.cloud.bigquery.Field
							.newBuilder("actual_adjustment", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_58);

					com.google.cloud.bigquery.Field field_59 = com.google.cloud.bigquery.Field
							.newBuilder("actual_check_date_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_59);

					com.google.cloud.bigquery.Field field_60 = com.google.cloud.bigquery.Field
							.newBuilder("actual_last_check_date_id",
									com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_60);

					com.google.cloud.bigquery.Field field_61 = com.google.cloud.bigquery.Field
							.newBuilder("actual_paid", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_61);

					com.google.cloud.bigquery.Field field_62 = com.google.cloud.bigquery.Field
							.newBuilder("ineligible_for_payroll", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_62);

					com.google.cloud.bigquery.Field field_63 = com.google.cloud.bigquery.Field
							.newBuilder("actual_invoice_number", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_63);

					com.google.cloud.bigquery.Field field_64 = com.google.cloud.bigquery.Field
							.newBuilder("actual_billed", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_64);

					com.google.cloud.bigquery.Field field_65 = com.google.cloud.bigquery.Field
							.newBuilder("actual_start_time", com.google.cloud.bigquery.LegacySQLTypeName.TIMESTAMP)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_65);

					com.google.cloud.bigquery.Field field_66 = com.google.cloud.bigquery.Field
							.newBuilder("actual_end_time", com.google.cloud.bigquery.LegacySQLTypeName.TIMESTAMP)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_66);

					com.google.cloud.bigquery.Field field_67 = com.google.cloud.bigquery.Field
							.newBuilder("actual_units", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_67);

					com.google.cloud.bigquery.Field field_68 = com.google.cloud.bigquery.Field
							.newBuilder("actual_duration", com.google.cloud.bigquery.LegacySQLTypeName.TIMESTAMP)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_68);

					com.google.cloud.bigquery.Field field_69 = com.google.cloud.bigquery.Field
							.newBuilder("service_billed_date_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_69);

					com.google.cloud.bigquery.Field field_70 = com.google.cloud.bigquery.Field
							.newBuilder("in_process_units_batched", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_70);

					com.google.cloud.bigquery.Field field_71 = com.google.cloud.bigquery.Field
							.newBuilder("note_duration", com.google.cloud.bigquery.LegacySQLTypeName.TIMESTAMP)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_71);

					com.google.cloud.bigquery.Field field_72 = com.google.cloud.bigquery.Field
							.newBuilder("note_end_time", com.google.cloud.bigquery.LegacySQLTypeName.TIMESTAMP)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_72);

					com.google.cloud.bigquery.Field field_73 = com.google.cloud.bigquery.Field
							.newBuilder("note_start_time", com.google.cloud.bigquery.LegacySQLTypeName.TIMESTAMP)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_73);

					com.google.cloud.bigquery.Field field_74 = com.google.cloud.bigquery.Field
							.newBuilder("rate_type", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_74);

					com.google.cloud.bigquery.Field field_75 = com.google.cloud.bigquery.Field
							.newBuilder("first_encounter", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_75);

					com.google.cloud.bigquery.Field field_76 = com.google.cloud.bigquery.Field
							.newBuilder("units_calculated", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_76);

					com.google.cloud.bigquery.Field field_77 = com.google.cloud.bigquery.Field
							.newBuilder("clqnote_has_child", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_77);

					com.google.cloud.bigquery.Field field_78 = com.google.cloud.bigquery.Field
							.newBuilder("missed_shift_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_78);

					com.google.cloud.bigquery.Field field_79 = com.google.cloud.bigquery.Field
							.newBuilder("missed_shift_units", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_79);

					com.google.cloud.bigquery.Field field_80 = com.google.cloud.bigquery.Field
							.newBuilder("billed_units", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_80);

					com.google.cloud.bigquery.Field field_81 = com.google.cloud.bigquery.Field
							.newBuilder("transaction_type", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_81);

					com.google.cloud.bigquery.Field field_82 = com.google.cloud.bigquery.Field
							.newBuilder("transaction_date_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_82);

					com.google.cloud.bigquery.Schema schema_tBigQueryOutput_6 = com.google.cloud.bigquery.Schema
							.of(fields_tBigQueryOutput_6);
					com.google.cloud.bigquery.TableInfo tableInfo_tBigQueryOutput_6 = com.google.cloud.bigquery.TableInfo
							.newBuilder(tableId_tBigQueryOutput_6,
									com.google.cloud.bigquery.StandardTableDefinition.of(schema_tBigQueryOutput_6))
							.build();
					com.google.cloud.bigquery.Table table_tBigQueryOutput_6 = bigquery_tBigQueryOutput_6
							.create(tableInfo_tBigQueryOutput_6);
					loadJobBuilder_tBigQueryOutput_6.setSchema(schema_tBigQueryOutput_6);
					loadJobBuilder_tBigQueryOutput_6
							.setCreateDisposition(com.google.cloud.bigquery.JobInfo.CreateDisposition.CREATE_IF_NEEDED);

				} else {
					loadJobBuilder_tBigQueryOutput_6
							.setCreateDisposition(com.google.cloud.bigquery.JobInfo.CreateDisposition.CREATE_NEVER);
				}

				loadJobBuilder_tBigQueryOutput_6
						.setWriteDisposition(com.google.cloud.bigquery.JobInfo.WriteDisposition.WRITE_APPEND);
				loadJobBuilder_tBigQueryOutput_6.setDestinationTable(tableId_tBigQueryOutput_6);
				com.google.cloud.bigquery.CsvOptions.Builder csvOptions_tBigQueryOutput_6 = com.google.cloud.bigquery.CsvOptions
						.newBuilder();
				csvOptions_tBigQueryOutput_6.setAllowQuotedNewLines(true);
				csvOptions_tBigQueryOutput_6.setSkipLeadingRows(0);

				csvOptions_tBigQueryOutput_6.setFieldDelimiter(",");

				loadJobBuilder_tBigQueryOutput_6.setFormatOptions(csvOptions_tBigQueryOutput_6.build());
				loadJobBuilder_tBigQueryOutput_6.setNullMarker("\\N");
				com.google.cloud.bigquery.Job job_tBigQueryOutput_6 = bigquery_tBigQueryOutput_6
						.create(com.google.cloud.bigquery.JobInfo.of(loadJobBuilder_tBigQueryOutput_6.build()));
				job_tBigQueryOutput_6 = job_tBigQueryOutput_6
						.waitFor(com.google.cloud.RetryOption.initialRetryDelay(org.threeten.bp.Duration.ofSeconds(1)));
				com.google.gson.Gson gsonObject_tBigQueryOutput_6 = new com.google.gson.Gson();
				if (job_tBigQueryOutput_6 != null && job_tBigQueryOutput_6.getStatus().getError() == null) {
					globalMap.put("tBigQueryOutput_6_JOBID", job_tBigQueryOutput_6.getJobId().getJob());
					globalMap.put("tBigQueryOutput_6_STATISTICS",
							gsonObject_tBigQueryOutput_6.toJson(job_tBigQueryOutput_6.getStatistics()));

				} else {
					if (job_tBigQueryOutput_6 == null) {
						throw new RuntimeException("Job no longer exists");
					}
					globalMap.put("tBigQueryOutput_6_JOBID", job_tBigQueryOutput_6.getJobId().getJob());
					globalMap.put("tBigQueryOutput_6_STATISTICS",
							gsonObject_tBigQueryOutput_6.toJson(job_tBigQueryOutput_6.getStatistics()));
					List<com.google.cloud.bigquery.BigQueryError> errorList = job_tBigQueryOutput_6.getStatus()
							.getExecutionErrors();
					throw new RuntimeException("Job failed: " + errorList.get(errorList.size() - 1));
				}

				/* ----END-CREATING-JOB (Cloud API)---- */

				/**
				 * [tBigQueryOutput_6_tBQBE begin ] stop
				 */

				/**
				 * [tBigQueryOutput_6_tBQBE main ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_6";

				currentComponent = "tBigQueryOutput_6_tBQBE";

				tos_count_tBigQueryOutput_6_tBQBE++;

				/**
				 * [tBigQueryOutput_6_tBQBE main ] stop
				 */

				/**
				 * [tBigQueryOutput_6_tBQBE process_data_begin ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_6";

				currentComponent = "tBigQueryOutput_6_tBQBE";

				/**
				 * [tBigQueryOutput_6_tBQBE process_data_begin ] stop
				 */

				/**
				 * [tBigQueryOutput_6_tBQBE process_data_end ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_6";

				currentComponent = "tBigQueryOutput_6_tBQBE";

				/**
				 * [tBigQueryOutput_6_tBQBE process_data_end ] stop
				 */

				/**
				 * [tBigQueryOutput_6_tBQBE end ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_6";

				currentComponent = "tBigQueryOutput_6_tBQBE";

				ok_Hash.put("tBigQueryOutput_6_tBQBE", true);
				end_Hash.put("tBigQueryOutput_6_tBQBE", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk6", 0, "ok");
				}
				tJava_9Process(globalMap);

				/**
				 * [tBigQueryOutput_6_tBQBE end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_6 finally ] start
				 */

				currentComponent = "tDBInput_6";

				/**
				 * [tDBInput_6 finally ] stop
				 */

				/**
				 * [tBigQueryOutput_6_tBQOB finally ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_6";

				currentComponent = "tBigQueryOutput_6_tBQOB";

				if (resourceMap.get("finish_tBigQueryOutput_6_tBQOB") == null) {
					if (resourceMap.get("csvWriter_tBigQueryOutput_6_tBQOB") != null) {
						((com.talend.csv.CSVWriter) resourceMap.get("csvWriter_tBigQueryOutput_6_tBQOB")).close();
					}
				}

				/**
				 * [tBigQueryOutput_6_tBQOB finally ] stop
				 */

				/**
				 * [tBigQueryOutput_6_tBQBE finally ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_6";

				currentComponent = "tBigQueryOutput_6_tBQBE";

				/**
				 * [tBigQueryOutput_6_tBQBE finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 1);
	}

	public void tJava_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tJava_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tJava_9 begin ] start
				 */

				ok_Hash.put("tJava_9", false);
				start_Hash.put("tJava_9", System.currentTimeMillis());

				currentComponent = "tJava_9";

				int tos_count_tJava_9 = 0;

				Integer Lines = (Integer) globalMap.get("tDBInput_6_NB_LINE");
//System.out.println("In total processed "+Lines+" batched lines to big query from service ids " + context.ServiceID);
				System.out.println("batched data reload finished at " + TalendDate.getDate("YYYY-MM-dd HH:mm:ss"));
				System.out.println(
						"starting to reload schedule data in BigQuery " + TalendDate.getDate("YYYY-MM-dd HH:mm:ss"));

				/**
				 * [tJava_9 begin ] stop
				 */

				/**
				 * [tJava_9 main ] start
				 */

				currentComponent = "tJava_9";

				tos_count_tJava_9++;

				/**
				 * [tJava_9 main ] stop
				 */

				/**
				 * [tJava_9 process_data_begin ] start
				 */

				currentComponent = "tJava_9";

				/**
				 * [tJava_9 process_data_begin ] stop
				 */

				/**
				 * [tJava_9 process_data_end ] start
				 */

				currentComponent = "tJava_9";

				/**
				 * [tJava_9 process_data_end ] stop
				 */

				/**
				 * [tJava_9 end ] start
				 */

				currentComponent = "tJava_9";

				ok_Hash.put("tJava_9", true);
				end_Hash.put("tJava_9", System.currentTimeMillis());

				/**
				 * [tJava_9 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tJava_9 finally ] start
				 */

				currentComponent = "tJava_9";

				/**
				 * [tJava_9 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_9_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	protected PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final load_transactions_initial load_transactions_initialClass = new load_transactions_initial();

		int exitCode = load_transactions_initialClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}
		boolean inOSGi = routines.system.BundleUtils.inOSGi();

		if (inOSGi) {
			java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

			if (jobProperties != null && jobProperties.get("context") != null) {
				contextStr = (String) jobProperties.get("context");
			}
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = load_transactions_initial.class.getClassLoader().getResourceAsStream(
					"ontarget/load_transactions_initial_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = load_transactions_initial.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				try {
					// defaultProps is in order to keep the original context value
					if (context != null && context.isEmpty()) {
						defaultProps.load(inContext);
						context = new ContextProperties(defaultProps);
					}
				} finally {
					inContext.close();
				}
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
					context.setContextType("ServiceID", "id_String");
					if (context.getStringValue("ServiceID") == null) {
						context.ServiceID = null;
					} else {
						context.ServiceID = (String) context.getProperty("ServiceID");
					}
					context.setContextType("Total_Num_Services", "id_Integer");
					if (context.getStringValue("Total_Num_Services") == null) {
						context.Total_Num_Services = null;
					} else {
						try {
							context.Total_Num_Services = routines.system.ParserUtils
									.parseTo_Integer(context.getProperty("Total_Num_Services"));
						} catch (NumberFormatException e) {
							System.err.println(String.format("Null value will be used for context parameter %s: %s",
									"Total_Num_Services", e.getMessage()));
							context.Total_Num_Services = null;
						}
					}
					context.setContextType("scale", "id_Integer");
					if (context.getStringValue("scale") == null) {
						context.scale = null;
					} else {
						try {
							context.scale = routines.system.ParserUtils.parseTo_Integer(context.getProperty("scale"));
						} catch (NumberFormatException e) {
							System.err.println(String.format("Null value will be used for context parameter %s: %s",
									"scale", e.getMessage()));
							context.scale = null;
						}
					}
					context.setContextType("lower_limit", "id_Integer");
					if (context.getStringValue("lower_limit") == null) {
						context.lower_limit = null;
					} else {
						try {
							context.lower_limit = routines.system.ParserUtils
									.parseTo_Integer(context.getProperty("lower_limit"));
						} catch (NumberFormatException e) {
							System.err.println(String.format("Null value will be used for context parameter %s: %s",
									"lower_limit", e.getMessage()));
							context.lower_limit = null;
						}
					}
					context.setContextType("upper_limit", "id_Integer");
					if (context.getStringValue("upper_limit") == null) {
						context.upper_limit = null;
					} else {
						try {
							context.upper_limit = routines.system.ParserUtils
									.parseTo_Integer(context.getProperty("upper_limit"));
						} catch (NumberFormatException e) {
							System.err.println(String.format("Null value will be used for context parameter %s: %s",
									"upper_limit", e.getMessage()));
							context.upper_limit = null;
						}
					}
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("ServiceID")) {
				context.ServiceID = (String) parentContextMap.get("ServiceID");
			}
			if (parentContextMap.containsKey("Total_Num_Services")) {
				context.Total_Num_Services = (Integer) parentContextMap.get("Total_Num_Services");
			}
			if (parentContextMap.containsKey("scale")) {
				context.scale = (Integer) parentContextMap.get("scale");
			}
			if (parentContextMap.containsKey("lower_limit")) {
				context.lower_limit = (Integer) parentContextMap.get("lower_limit");
			}
			if (parentContextMap.containsKey("upper_limit")) {
				context.upper_limit = (Integer) parentContextMap.get("upper_limit");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tDBInput_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_2) {
			globalMap.put("tDBInput_2_SUBPROCESS_STATE", -1);

			e_tDBInput_2.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : load_transactions_initial");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;

		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 1037565 characters generated by Talend Open Studio for Data Integration on
 * the July 23, 2022 at 3:38:37 PM CDT
 ************************************************************************************************/