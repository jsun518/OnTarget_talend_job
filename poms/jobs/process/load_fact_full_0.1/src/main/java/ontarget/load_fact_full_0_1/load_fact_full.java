// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package ontarget.load_fact_full_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.TalendDate;
import routines.Relational;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: load_fact_full Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status
 */
public class load_fact_full implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

		// if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if (NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "load_fact_full";
	private final String projectName = "ONTARGET";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	public void setDataSourceReferences(List serviceReferences) throws Exception {

		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();

		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils
				.getServices(serviceReferences, javax.sql.DataSource.class).entrySet()) {
			dataSources.put(entry.getKey(), entry.getValue());
			talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					load_fact_full.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(load_fact_full.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tBigQueryOutput_2_tBQOB_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tBigQueryOutput_2_tBQBE_error(exception, errorComponent, globalMap);

	}

	public void tBigQueryOutput_2_tBQBE_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_ONTARGET_load_fact_full = new byte[0];
		static byte[] commonByteArray_ONTARGET_load_fact_full = new byte[0];

		public Integer client_id;

		public Integer getClient_id() {
			return this.client_id;
		}

		public Integer supervisor_id;

		public Integer getSupervisor_id() {
			return this.supervisor_id;
		}

		public Integer client_cost_center_id;

		public Integer getClient_cost_center_id() {
			return this.client_cost_center_id;
		}

		public Integer employee_cost_center_id;

		public Integer getEmployee_cost_center_id() {
			return this.employee_cost_center_id;
		}

		public Integer employee_id;

		public Integer getEmployee_id() {
			return this.employee_id;
		}

		public Integer ar_payer_id;

		public Integer getAr_payer_id() {
			return this.ar_payer_id;
		}

		public Integer department_id;

		public Integer getDepartment_id() {
			return this.department_id;
		}

		public Integer service_cost_center_id;

		public Integer getService_cost_center_id() {
			return this.service_cost_center_id;
		}

		public Integer site_id;

		public Integer getSite_id() {
			return this.site_id;
		}

		public Integer school_district_id;

		public Integer getSchool_district_id() {
			return this.school_district_id;
		}

		public Integer authorization_id;

		public Integer getAuthorization_id() {
			return this.authorization_id;
		}

		public Integer authorized_id;

		public Integer getAuthorized_id() {
			return this.authorized_id;
		}

		public String service_authorization_approval;

		public String getService_authorization_approval() {
			return this.service_authorization_approval;
		}

		public String service_authorization_date_id;

		public String getService_authorization_date_id() {
			return this.service_authorization_date_id;
		}

		public String Service_Authorization_Expired;

		public String getService_Authorization_Expired() {
			return this.Service_Authorization_Expired;
		}

		public String service_authorization_description;

		public String getService_authorization_description() {
			return this.service_authorization_description;
		}

		public String company_name;

		public String getCompany_name() {
			return this.company_name;
		}

		public String service_abbreviation;

		public String getService_abbreviation() {
			return this.service_abbreviation;
		}

		public String service_code;

		public String getService_code() {
			return this.service_code;
		}

		public String authorized_start_date_id;

		public String getAuthorized_start_date_id() {
			return this.authorized_start_date_id;
		}

		public String authorized_end_date_id;

		public String getAuthorized_end_date_id() {
			return this.authorized_end_date_id;
		}

		public String authorization_start_date_id;

		public String getAuthorization_start_date_id() {
			return this.authorization_start_date_id;
		}

		public String authorization_end_date_id;

		public String getAuthorization_end_date_id() {
			return this.authorization_end_date_id;
		}

		public String service_program;

		public String getService_program() {
			return this.service_program;
		}

		public String service_place;

		public String getService_place() {
			return this.service_place;
		}

		public Integer service_is_sum_and_round;

		public Integer getService_is_sum_and_round() {
			return this.service_is_sum_and_round;
		}

		public Integer validate_to_schedules;

		public Integer getValidate_to_schedules() {
			return this.validate_to_schedules;
		}

		public Integer service_minimum_minutes;

		public Integer getService_minimum_minutes() {
			return this.service_minimum_minutes;
		}

		public Integer service_units_per_hour;

		public Integer getService_units_per_hour() {
			return this.service_units_per_hour;
		}

		public Integer service_max_units_total;

		public Integer getService_max_units_total() {
			return this.service_max_units_total;
		}

		public Integer service_auth_max_units_total;

		public Integer getService_auth_max_units_total() {
			return this.service_auth_max_units_total;
		}

		public Boolean auth_level_validation;

		public Boolean getAuth_level_validation() {
			return this.auth_level_validation;
		}

		public Integer total_units_authorized;

		public Integer getTotal_units_authorized() {
			return this.total_units_authorized;
		}

		public Float current_rate;

		public Float getCurrent_rate() {
			return this.current_rate;
		}

		public Integer caregiver_id;

		public Integer getCaregiver_id() {
			return this.caregiver_id;
		}

		public Integer inv_stg_service_date_id;

		public Integer getInv_stg_service_date_id() {
			return this.inv_stg_service_date_id;
		}

		public Integer in_schedule_note_service_date_id;

		public Integer getIn_schedule_note_service_date_id() {
			return this.in_schedule_note_service_date_id;
		}

		public Integer note_date_of_service_id;

		public Integer getNote_date_of_service_id() {
			return this.note_date_of_service_id;
		}

		public Integer in_actual_note_service_date_id;

		public Integer getIn_actual_note_service_date_id() {
			return this.in_actual_note_service_date_id;
		}

		public java.util.Date schedule_duration;

		public java.util.Date getSchedule_duration() {
			return this.schedule_duration;
		}

		public Integer schedule_start_date_id;

		public Integer getSchedule_start_date_id() {
			return this.schedule_start_date_id;
		}

		public Integer schedule_end_date_id;

		public Integer getSchedule_end_date_id() {
			return this.schedule_end_date_id;
		}

		public java.util.Date schedule_start_time;

		public java.util.Date getSchedule_start_time() {
			return this.schedule_start_time;
		}

		public java.util.Date schedule_end_time;

		public java.util.Date getSchedule_end_time() {
			return this.schedule_end_time;
		}

		public Integer schedule_units;

		public Integer getSchedule_units() {
			return this.schedule_units;
		}

		public String schedule_status;

		public String getSchedule_status() {
			return this.schedule_status;
		}

		public Integer actual_start_date_id;

		public Integer getActual_start_date_id() {
			return this.actual_start_date_id;
		}

		public Integer actual_end_date_id;

		public Integer getActual_end_date_id() {
			return this.actual_end_date_id;
		}

		public String billing_attending_NPI;

		public String getBilling_attending_NPI() {
			return this.billing_attending_NPI;
		}

		public Boolean actual_imported;

		public Boolean getActual_imported() {
			return this.actual_imported;
		}

		public Boolean actual_hold_pay;

		public Boolean getActual_hold_pay() {
			return this.actual_hold_pay;
		}

		public Boolean actual_hold_bill;

		public Boolean getActual_hold_bill() {
			return this.actual_hold_bill;
		}

		public Boolean actual_time_sheet_approved;

		public Boolean getActual_time_sheet_approved() {
			return this.actual_time_sheet_approved;
		}

		public Boolean actual_note_approved_bl;

		public Boolean getActual_note_approved_bl() {
			return this.actual_note_approved_bl;
		}

		public Boolean actual_note_approved_pr;

		public Boolean getActual_note_approved_pr() {
			return this.actual_note_approved_pr;
		}

		public String actual_status_BL;

		public String getActual_status_BL() {
			return this.actual_status_BL;
		}

		public String actual_emp_pay_type;

		public String getActual_emp_pay_type() {
			return this.actual_emp_pay_type;
		}

		public Boolean ineligible_for_billing;

		public Boolean getIneligible_for_billing() {
			return this.ineligible_for_billing;
		}

		public Boolean actual_adjustment;

		public Boolean getActual_adjustment() {
			return this.actual_adjustment;
		}

		public Integer actual_check_date_id;

		public Integer getActual_check_date_id() {
			return this.actual_check_date_id;
		}

		public Integer actual_last_check_date_id;

		public Integer getActual_last_check_date_id() {
			return this.actual_last_check_date_id;
		}

		public Boolean actual_paid;

		public Boolean getActual_paid() {
			return this.actual_paid;
		}

		public Boolean ineligible_for_payroll;

		public Boolean getIneligible_for_payroll() {
			return this.ineligible_for_payroll;
		}

		public Integer actual_invoice_number;

		public Integer getActual_invoice_number() {
			return this.actual_invoice_number;
		}

		public Boolean actual_billed;

		public Boolean getActual_billed() {
			return this.actual_billed;
		}

		public java.util.Date actual_start_time;

		public java.util.Date getActual_start_time() {
			return this.actual_start_time;
		}

		public java.util.Date actual_end_time;

		public java.util.Date getActual_end_time() {
			return this.actual_end_time;
		}

		public Integer actual_units;

		public Integer getActual_units() {
			return this.actual_units;
		}

		public java.util.Date actual_duration;

		public java.util.Date getActual_duration() {
			return this.actual_duration;
		}

		public Integer service_billed_date_id;

		public Integer getService_billed_date_id() {
			return this.service_billed_date_id;
		}

		public Integer in_process_units_batched;

		public Integer getIn_process_units_batched() {
			return this.in_process_units_batched;
		}

		public java.util.Date note_duration;

		public java.util.Date getNote_duration() {
			return this.note_duration;
		}

		public java.util.Date note_end_time;

		public java.util.Date getNote_end_time() {
			return this.note_end_time;
		}

		public java.util.Date note_start_time;

		public java.util.Date getNote_start_time() {
			return this.note_start_time;
		}

		public String rate_type;

		public String getRate_type() {
			return this.rate_type;
		}

		public Boolean first_encounter;

		public Boolean getFirst_encounter() {
			return this.first_encounter;
		}

		public Integer units_calculated;

		public Integer getUnits_calculated() {
			return this.units_calculated;
		}

		public Boolean clqnote_has_child;

		public Boolean getClqnote_has_child() {
			return this.clqnote_has_child;
		}

		public Integer missed_shift_id;

		public Integer getMissed_shift_id() {
			return this.missed_shift_id;
		}

		public Integer missed_shift_units;

		public Integer getMissed_shift_units() {
			return this.missed_shift_units;
		}

		public Integer billed_units;

		public Integer getBilled_units() {
			return this.billed_units;
		}

		public String transaction_type;

		public String getTransaction_type() {
			return this.transaction_type;
		}

		public Integer transaction_date_id;

		public Integer getTransaction_date_id() {
			return this.transaction_date_id;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ONTARGET_load_fact_full.length) {
					if (length < 1024 && commonByteArray_ONTARGET_load_fact_full.length == 0) {
						commonByteArray_ONTARGET_load_fact_full = new byte[1024];
					} else {
						commonByteArray_ONTARGET_load_fact_full = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ONTARGET_load_fact_full, 0, length);
				strReturn = new String(commonByteArray_ONTARGET_load_fact_full, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ONTARGET_load_fact_full.length) {
					if (length < 1024 && commonByteArray_ONTARGET_load_fact_full.length == 0) {
						commonByteArray_ONTARGET_load_fact_full = new byte[1024];
					} else {
						commonByteArray_ONTARGET_load_fact_full = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_ONTARGET_load_fact_full, 0, length);
				strReturn = new String(commonByteArray_ONTARGET_load_fact_full, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ONTARGET_load_fact_full) {

				try {

					int length = 0;

					this.client_id = readInteger(dis);

					this.supervisor_id = readInteger(dis);

					this.client_cost_center_id = readInteger(dis);

					this.employee_cost_center_id = readInteger(dis);

					this.employee_id = readInteger(dis);

					this.ar_payer_id = readInteger(dis);

					this.department_id = readInteger(dis);

					this.service_cost_center_id = readInteger(dis);

					this.site_id = readInteger(dis);

					this.school_district_id = readInteger(dis);

					this.authorization_id = readInteger(dis);

					this.authorized_id = readInteger(dis);

					this.service_authorization_approval = readString(dis);

					this.service_authorization_date_id = readString(dis);

					this.Service_Authorization_Expired = readString(dis);

					this.service_authorization_description = readString(dis);

					this.company_name = readString(dis);

					this.service_abbreviation = readString(dis);

					this.service_code = readString(dis);

					this.authorized_start_date_id = readString(dis);

					this.authorized_end_date_id = readString(dis);

					this.authorization_start_date_id = readString(dis);

					this.authorization_end_date_id = readString(dis);

					this.service_program = readString(dis);

					this.service_place = readString(dis);

					this.service_is_sum_and_round = readInteger(dis);

					this.validate_to_schedules = readInteger(dis);

					this.service_minimum_minutes = readInteger(dis);

					this.service_units_per_hour = readInteger(dis);

					this.service_max_units_total = readInteger(dis);

					this.service_auth_max_units_total = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.auth_level_validation = null;
					} else {
						this.auth_level_validation = dis.readBoolean();
					}

					this.total_units_authorized = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.current_rate = null;
					} else {
						this.current_rate = dis.readFloat();
					}

					this.caregiver_id = readInteger(dis);

					this.inv_stg_service_date_id = readInteger(dis);

					this.in_schedule_note_service_date_id = readInteger(dis);

					this.note_date_of_service_id = readInteger(dis);

					this.in_actual_note_service_date_id = readInteger(dis);

					this.schedule_duration = readDate(dis);

					this.schedule_start_date_id = readInteger(dis);

					this.schedule_end_date_id = readInteger(dis);

					this.schedule_start_time = readDate(dis);

					this.schedule_end_time = readDate(dis);

					this.schedule_units = readInteger(dis);

					this.schedule_status = readString(dis);

					this.actual_start_date_id = readInteger(dis);

					this.actual_end_date_id = readInteger(dis);

					this.billing_attending_NPI = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.actual_imported = null;
					} else {
						this.actual_imported = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_hold_pay = null;
					} else {
						this.actual_hold_pay = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_hold_bill = null;
					} else {
						this.actual_hold_bill = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_time_sheet_approved = null;
					} else {
						this.actual_time_sheet_approved = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_note_approved_bl = null;
					} else {
						this.actual_note_approved_bl = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_note_approved_pr = null;
					} else {
						this.actual_note_approved_pr = dis.readBoolean();
					}

					this.actual_status_BL = readString(dis);

					this.actual_emp_pay_type = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ineligible_for_billing = null;
					} else {
						this.ineligible_for_billing = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_adjustment = null;
					} else {
						this.actual_adjustment = dis.readBoolean();
					}

					this.actual_check_date_id = readInteger(dis);

					this.actual_last_check_date_id = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.actual_paid = null;
					} else {
						this.actual_paid = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.ineligible_for_payroll = null;
					} else {
						this.ineligible_for_payroll = dis.readBoolean();
					}

					this.actual_invoice_number = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.actual_billed = null;
					} else {
						this.actual_billed = dis.readBoolean();
					}

					this.actual_start_time = readDate(dis);

					this.actual_end_time = readDate(dis);

					this.actual_units = readInteger(dis);

					this.actual_duration = readDate(dis);

					this.service_billed_date_id = readInteger(dis);

					this.in_process_units_batched = readInteger(dis);

					this.note_duration = readDate(dis);

					this.note_end_time = readDate(dis);

					this.note_start_time = readDate(dis);

					this.rate_type = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.first_encounter = null;
					} else {
						this.first_encounter = dis.readBoolean();
					}

					this.units_calculated = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.clqnote_has_child = null;
					} else {
						this.clqnote_has_child = dis.readBoolean();
					}

					this.missed_shift_id = readInteger(dis);

					this.missed_shift_units = readInteger(dis);

					this.billed_units = readInteger(dis);

					this.transaction_type = readString(dis);

					this.transaction_date_id = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ONTARGET_load_fact_full) {

				try {

					int length = 0;

					this.client_id = readInteger(dis);

					this.supervisor_id = readInteger(dis);

					this.client_cost_center_id = readInteger(dis);

					this.employee_cost_center_id = readInteger(dis);

					this.employee_id = readInteger(dis);

					this.ar_payer_id = readInteger(dis);

					this.department_id = readInteger(dis);

					this.service_cost_center_id = readInteger(dis);

					this.site_id = readInteger(dis);

					this.school_district_id = readInteger(dis);

					this.authorization_id = readInteger(dis);

					this.authorized_id = readInteger(dis);

					this.service_authorization_approval = readString(dis);

					this.service_authorization_date_id = readString(dis);

					this.Service_Authorization_Expired = readString(dis);

					this.service_authorization_description = readString(dis);

					this.company_name = readString(dis);

					this.service_abbreviation = readString(dis);

					this.service_code = readString(dis);

					this.authorized_start_date_id = readString(dis);

					this.authorized_end_date_id = readString(dis);

					this.authorization_start_date_id = readString(dis);

					this.authorization_end_date_id = readString(dis);

					this.service_program = readString(dis);

					this.service_place = readString(dis);

					this.service_is_sum_and_round = readInteger(dis);

					this.validate_to_schedules = readInteger(dis);

					this.service_minimum_minutes = readInteger(dis);

					this.service_units_per_hour = readInteger(dis);

					this.service_max_units_total = readInteger(dis);

					this.service_auth_max_units_total = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.auth_level_validation = null;
					} else {
						this.auth_level_validation = dis.readBoolean();
					}

					this.total_units_authorized = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.current_rate = null;
					} else {
						this.current_rate = dis.readFloat();
					}

					this.caregiver_id = readInteger(dis);

					this.inv_stg_service_date_id = readInteger(dis);

					this.in_schedule_note_service_date_id = readInteger(dis);

					this.note_date_of_service_id = readInteger(dis);

					this.in_actual_note_service_date_id = readInteger(dis);

					this.schedule_duration = readDate(dis);

					this.schedule_start_date_id = readInteger(dis);

					this.schedule_end_date_id = readInteger(dis);

					this.schedule_start_time = readDate(dis);

					this.schedule_end_time = readDate(dis);

					this.schedule_units = readInteger(dis);

					this.schedule_status = readString(dis);

					this.actual_start_date_id = readInteger(dis);

					this.actual_end_date_id = readInteger(dis);

					this.billing_attending_NPI = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.actual_imported = null;
					} else {
						this.actual_imported = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_hold_pay = null;
					} else {
						this.actual_hold_pay = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_hold_bill = null;
					} else {
						this.actual_hold_bill = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_time_sheet_approved = null;
					} else {
						this.actual_time_sheet_approved = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_note_approved_bl = null;
					} else {
						this.actual_note_approved_bl = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_note_approved_pr = null;
					} else {
						this.actual_note_approved_pr = dis.readBoolean();
					}

					this.actual_status_BL = readString(dis);

					this.actual_emp_pay_type = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ineligible_for_billing = null;
					} else {
						this.ineligible_for_billing = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.actual_adjustment = null;
					} else {
						this.actual_adjustment = dis.readBoolean();
					}

					this.actual_check_date_id = readInteger(dis);

					this.actual_last_check_date_id = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.actual_paid = null;
					} else {
						this.actual_paid = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.ineligible_for_payroll = null;
					} else {
						this.ineligible_for_payroll = dis.readBoolean();
					}

					this.actual_invoice_number = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.actual_billed = null;
					} else {
						this.actual_billed = dis.readBoolean();
					}

					this.actual_start_time = readDate(dis);

					this.actual_end_time = readDate(dis);

					this.actual_units = readInteger(dis);

					this.actual_duration = readDate(dis);

					this.service_billed_date_id = readInteger(dis);

					this.in_process_units_batched = readInteger(dis);

					this.note_duration = readDate(dis);

					this.note_end_time = readDate(dis);

					this.note_start_time = readDate(dis);

					this.rate_type = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.first_encounter = null;
					} else {
						this.first_encounter = dis.readBoolean();
					}

					this.units_calculated = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.clqnote_has_child = null;
					} else {
						this.clqnote_has_child = dis.readBoolean();
					}

					this.missed_shift_id = readInteger(dis);

					this.missed_shift_units = readInteger(dis);

					this.billed_units = readInteger(dis);

					this.transaction_type = readString(dis);

					this.transaction_date_id = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.client_id, dos);

				// Integer

				writeInteger(this.supervisor_id, dos);

				// Integer

				writeInteger(this.client_cost_center_id, dos);

				// Integer

				writeInteger(this.employee_cost_center_id, dos);

				// Integer

				writeInteger(this.employee_id, dos);

				// Integer

				writeInteger(this.ar_payer_id, dos);

				// Integer

				writeInteger(this.department_id, dos);

				// Integer

				writeInteger(this.service_cost_center_id, dos);

				// Integer

				writeInteger(this.site_id, dos);

				// Integer

				writeInteger(this.school_district_id, dos);

				// Integer

				writeInteger(this.authorization_id, dos);

				// Integer

				writeInteger(this.authorized_id, dos);

				// String

				writeString(this.service_authorization_approval, dos);

				// String

				writeString(this.service_authorization_date_id, dos);

				// String

				writeString(this.Service_Authorization_Expired, dos);

				// String

				writeString(this.service_authorization_description, dos);

				// String

				writeString(this.company_name, dos);

				// String

				writeString(this.service_abbreviation, dos);

				// String

				writeString(this.service_code, dos);

				// String

				writeString(this.authorized_start_date_id, dos);

				// String

				writeString(this.authorized_end_date_id, dos);

				// String

				writeString(this.authorization_start_date_id, dos);

				// String

				writeString(this.authorization_end_date_id, dos);

				// String

				writeString(this.service_program, dos);

				// String

				writeString(this.service_place, dos);

				// Integer

				writeInteger(this.service_is_sum_and_round, dos);

				// Integer

				writeInteger(this.validate_to_schedules, dos);

				// Integer

				writeInteger(this.service_minimum_minutes, dos);

				// Integer

				writeInteger(this.service_units_per_hour, dos);

				// Integer

				writeInteger(this.service_max_units_total, dos);

				// Integer

				writeInteger(this.service_auth_max_units_total, dos);

				// Boolean

				if (this.auth_level_validation == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.auth_level_validation);
				}

				// Integer

				writeInteger(this.total_units_authorized, dos);

				// Float

				if (this.current_rate == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.current_rate);
				}

				// Integer

				writeInteger(this.caregiver_id, dos);

				// Integer

				writeInteger(this.inv_stg_service_date_id, dos);

				// Integer

				writeInteger(this.in_schedule_note_service_date_id, dos);

				// Integer

				writeInteger(this.note_date_of_service_id, dos);

				// Integer

				writeInteger(this.in_actual_note_service_date_id, dos);

				// java.util.Date

				writeDate(this.schedule_duration, dos);

				// Integer

				writeInteger(this.schedule_start_date_id, dos);

				// Integer

				writeInteger(this.schedule_end_date_id, dos);

				// java.util.Date

				writeDate(this.schedule_start_time, dos);

				// java.util.Date

				writeDate(this.schedule_end_time, dos);

				// Integer

				writeInteger(this.schedule_units, dos);

				// String

				writeString(this.schedule_status, dos);

				// Integer

				writeInteger(this.actual_start_date_id, dos);

				// Integer

				writeInteger(this.actual_end_date_id, dos);

				// String

				writeString(this.billing_attending_NPI, dos);

				// Boolean

				if (this.actual_imported == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_imported);
				}

				// Boolean

				if (this.actual_hold_pay == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_hold_pay);
				}

				// Boolean

				if (this.actual_hold_bill == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_hold_bill);
				}

				// Boolean

				if (this.actual_time_sheet_approved == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_time_sheet_approved);
				}

				// Boolean

				if (this.actual_note_approved_bl == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_note_approved_bl);
				}

				// Boolean

				if (this.actual_note_approved_pr == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_note_approved_pr);
				}

				// String

				writeString(this.actual_status_BL, dos);

				// String

				writeString(this.actual_emp_pay_type, dos);

				// Boolean

				if (this.ineligible_for_billing == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.ineligible_for_billing);
				}

				// Boolean

				if (this.actual_adjustment == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_adjustment);
				}

				// Integer

				writeInteger(this.actual_check_date_id, dos);

				// Integer

				writeInteger(this.actual_last_check_date_id, dos);

				// Boolean

				if (this.actual_paid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_paid);
				}

				// Boolean

				if (this.ineligible_for_payroll == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.ineligible_for_payroll);
				}

				// Integer

				writeInteger(this.actual_invoice_number, dos);

				// Boolean

				if (this.actual_billed == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_billed);
				}

				// java.util.Date

				writeDate(this.actual_start_time, dos);

				// java.util.Date

				writeDate(this.actual_end_time, dos);

				// Integer

				writeInteger(this.actual_units, dos);

				// java.util.Date

				writeDate(this.actual_duration, dos);

				// Integer

				writeInteger(this.service_billed_date_id, dos);

				// Integer

				writeInteger(this.in_process_units_batched, dos);

				// java.util.Date

				writeDate(this.note_duration, dos);

				// java.util.Date

				writeDate(this.note_end_time, dos);

				// java.util.Date

				writeDate(this.note_start_time, dos);

				// String

				writeString(this.rate_type, dos);

				// Boolean

				if (this.first_encounter == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.first_encounter);
				}

				// Integer

				writeInteger(this.units_calculated, dos);

				// Boolean

				if (this.clqnote_has_child == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.clqnote_has_child);
				}

				// Integer

				writeInteger(this.missed_shift_id, dos);

				// Integer

				writeInteger(this.missed_shift_units, dos);

				// Integer

				writeInteger(this.billed_units, dos);

				// String

				writeString(this.transaction_type, dos);

				// Integer

				writeInteger(this.transaction_date_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.client_id, dos);

				// Integer

				writeInteger(this.supervisor_id, dos);

				// Integer

				writeInteger(this.client_cost_center_id, dos);

				// Integer

				writeInteger(this.employee_cost_center_id, dos);

				// Integer

				writeInteger(this.employee_id, dos);

				// Integer

				writeInteger(this.ar_payer_id, dos);

				// Integer

				writeInteger(this.department_id, dos);

				// Integer

				writeInteger(this.service_cost_center_id, dos);

				// Integer

				writeInteger(this.site_id, dos);

				// Integer

				writeInteger(this.school_district_id, dos);

				// Integer

				writeInteger(this.authorization_id, dos);

				// Integer

				writeInteger(this.authorized_id, dos);

				// String

				writeString(this.service_authorization_approval, dos);

				// String

				writeString(this.service_authorization_date_id, dos);

				// String

				writeString(this.Service_Authorization_Expired, dos);

				// String

				writeString(this.service_authorization_description, dos);

				// String

				writeString(this.company_name, dos);

				// String

				writeString(this.service_abbreviation, dos);

				// String

				writeString(this.service_code, dos);

				// String

				writeString(this.authorized_start_date_id, dos);

				// String

				writeString(this.authorized_end_date_id, dos);

				// String

				writeString(this.authorization_start_date_id, dos);

				// String

				writeString(this.authorization_end_date_id, dos);

				// String

				writeString(this.service_program, dos);

				// String

				writeString(this.service_place, dos);

				// Integer

				writeInteger(this.service_is_sum_and_round, dos);

				// Integer

				writeInteger(this.validate_to_schedules, dos);

				// Integer

				writeInteger(this.service_minimum_minutes, dos);

				// Integer

				writeInteger(this.service_units_per_hour, dos);

				// Integer

				writeInteger(this.service_max_units_total, dos);

				// Integer

				writeInteger(this.service_auth_max_units_total, dos);

				// Boolean

				if (this.auth_level_validation == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.auth_level_validation);
				}

				// Integer

				writeInteger(this.total_units_authorized, dos);

				// Float

				if (this.current_rate == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.current_rate);
				}

				// Integer

				writeInteger(this.caregiver_id, dos);

				// Integer

				writeInteger(this.inv_stg_service_date_id, dos);

				// Integer

				writeInteger(this.in_schedule_note_service_date_id, dos);

				// Integer

				writeInteger(this.note_date_of_service_id, dos);

				// Integer

				writeInteger(this.in_actual_note_service_date_id, dos);

				// java.util.Date

				writeDate(this.schedule_duration, dos);

				// Integer

				writeInteger(this.schedule_start_date_id, dos);

				// Integer

				writeInteger(this.schedule_end_date_id, dos);

				// java.util.Date

				writeDate(this.schedule_start_time, dos);

				// java.util.Date

				writeDate(this.schedule_end_time, dos);

				// Integer

				writeInteger(this.schedule_units, dos);

				// String

				writeString(this.schedule_status, dos);

				// Integer

				writeInteger(this.actual_start_date_id, dos);

				// Integer

				writeInteger(this.actual_end_date_id, dos);

				// String

				writeString(this.billing_attending_NPI, dos);

				// Boolean

				if (this.actual_imported == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_imported);
				}

				// Boolean

				if (this.actual_hold_pay == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_hold_pay);
				}

				// Boolean

				if (this.actual_hold_bill == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_hold_bill);
				}

				// Boolean

				if (this.actual_time_sheet_approved == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_time_sheet_approved);
				}

				// Boolean

				if (this.actual_note_approved_bl == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_note_approved_bl);
				}

				// Boolean

				if (this.actual_note_approved_pr == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_note_approved_pr);
				}

				// String

				writeString(this.actual_status_BL, dos);

				// String

				writeString(this.actual_emp_pay_type, dos);

				// Boolean

				if (this.ineligible_for_billing == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.ineligible_for_billing);
				}

				// Boolean

				if (this.actual_adjustment == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_adjustment);
				}

				// Integer

				writeInteger(this.actual_check_date_id, dos);

				// Integer

				writeInteger(this.actual_last_check_date_id, dos);

				// Boolean

				if (this.actual_paid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_paid);
				}

				// Boolean

				if (this.ineligible_for_payroll == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.ineligible_for_payroll);
				}

				// Integer

				writeInteger(this.actual_invoice_number, dos);

				// Boolean

				if (this.actual_billed == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.actual_billed);
				}

				// java.util.Date

				writeDate(this.actual_start_time, dos);

				// java.util.Date

				writeDate(this.actual_end_time, dos);

				// Integer

				writeInteger(this.actual_units, dos);

				// java.util.Date

				writeDate(this.actual_duration, dos);

				// Integer

				writeInteger(this.service_billed_date_id, dos);

				// Integer

				writeInteger(this.in_process_units_batched, dos);

				// java.util.Date

				writeDate(this.note_duration, dos);

				// java.util.Date

				writeDate(this.note_end_time, dos);

				// java.util.Date

				writeDate(this.note_start_time, dos);

				// String

				writeString(this.rate_type, dos);

				// Boolean

				if (this.first_encounter == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.first_encounter);
				}

				// Integer

				writeInteger(this.units_calculated, dos);

				// Boolean

				if (this.clqnote_has_child == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.clqnote_has_child);
				}

				// Integer

				writeInteger(this.missed_shift_id, dos);

				// Integer

				writeInteger(this.missed_shift_units, dos);

				// Integer

				writeInteger(this.billed_units, dos);

				// String

				writeString(this.transaction_type, dos);

				// Integer

				writeInteger(this.transaction_date_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("client_id=" + String.valueOf(client_id));
			sb.append(",supervisor_id=" + String.valueOf(supervisor_id));
			sb.append(",client_cost_center_id=" + String.valueOf(client_cost_center_id));
			sb.append(",employee_cost_center_id=" + String.valueOf(employee_cost_center_id));
			sb.append(",employee_id=" + String.valueOf(employee_id));
			sb.append(",ar_payer_id=" + String.valueOf(ar_payer_id));
			sb.append(",department_id=" + String.valueOf(department_id));
			sb.append(",service_cost_center_id=" + String.valueOf(service_cost_center_id));
			sb.append(",site_id=" + String.valueOf(site_id));
			sb.append(",school_district_id=" + String.valueOf(school_district_id));
			sb.append(",authorization_id=" + String.valueOf(authorization_id));
			sb.append(",authorized_id=" + String.valueOf(authorized_id));
			sb.append(",service_authorization_approval=" + service_authorization_approval);
			sb.append(",service_authorization_date_id=" + service_authorization_date_id);
			sb.append(",Service_Authorization_Expired=" + Service_Authorization_Expired);
			sb.append(",service_authorization_description=" + service_authorization_description);
			sb.append(",company_name=" + company_name);
			sb.append(",service_abbreviation=" + service_abbreviation);
			sb.append(",service_code=" + service_code);
			sb.append(",authorized_start_date_id=" + authorized_start_date_id);
			sb.append(",authorized_end_date_id=" + authorized_end_date_id);
			sb.append(",authorization_start_date_id=" + authorization_start_date_id);
			sb.append(",authorization_end_date_id=" + authorization_end_date_id);
			sb.append(",service_program=" + service_program);
			sb.append(",service_place=" + service_place);
			sb.append(",service_is_sum_and_round=" + String.valueOf(service_is_sum_and_round));
			sb.append(",validate_to_schedules=" + String.valueOf(validate_to_schedules));
			sb.append(",service_minimum_minutes=" + String.valueOf(service_minimum_minutes));
			sb.append(",service_units_per_hour=" + String.valueOf(service_units_per_hour));
			sb.append(",service_max_units_total=" + String.valueOf(service_max_units_total));
			sb.append(",service_auth_max_units_total=" + String.valueOf(service_auth_max_units_total));
			sb.append(",auth_level_validation=" + String.valueOf(auth_level_validation));
			sb.append(",total_units_authorized=" + String.valueOf(total_units_authorized));
			sb.append(",current_rate=" + String.valueOf(current_rate));
			sb.append(",caregiver_id=" + String.valueOf(caregiver_id));
			sb.append(",inv_stg_service_date_id=" + String.valueOf(inv_stg_service_date_id));
			sb.append(",in_schedule_note_service_date_id=" + String.valueOf(in_schedule_note_service_date_id));
			sb.append(",note_date_of_service_id=" + String.valueOf(note_date_of_service_id));
			sb.append(",in_actual_note_service_date_id=" + String.valueOf(in_actual_note_service_date_id));
			sb.append(",schedule_duration=" + String.valueOf(schedule_duration));
			sb.append(",schedule_start_date_id=" + String.valueOf(schedule_start_date_id));
			sb.append(",schedule_end_date_id=" + String.valueOf(schedule_end_date_id));
			sb.append(",schedule_start_time=" + String.valueOf(schedule_start_time));
			sb.append(",schedule_end_time=" + String.valueOf(schedule_end_time));
			sb.append(",schedule_units=" + String.valueOf(schedule_units));
			sb.append(",schedule_status=" + schedule_status);
			sb.append(",actual_start_date_id=" + String.valueOf(actual_start_date_id));
			sb.append(",actual_end_date_id=" + String.valueOf(actual_end_date_id));
			sb.append(",billing_attending_NPI=" + billing_attending_NPI);
			sb.append(",actual_imported=" + String.valueOf(actual_imported));
			sb.append(",actual_hold_pay=" + String.valueOf(actual_hold_pay));
			sb.append(",actual_hold_bill=" + String.valueOf(actual_hold_bill));
			sb.append(",actual_time_sheet_approved=" + String.valueOf(actual_time_sheet_approved));
			sb.append(",actual_note_approved_bl=" + String.valueOf(actual_note_approved_bl));
			sb.append(",actual_note_approved_pr=" + String.valueOf(actual_note_approved_pr));
			sb.append(",actual_status_BL=" + actual_status_BL);
			sb.append(",actual_emp_pay_type=" + actual_emp_pay_type);
			sb.append(",ineligible_for_billing=" + String.valueOf(ineligible_for_billing));
			sb.append(",actual_adjustment=" + String.valueOf(actual_adjustment));
			sb.append(",actual_check_date_id=" + String.valueOf(actual_check_date_id));
			sb.append(",actual_last_check_date_id=" + String.valueOf(actual_last_check_date_id));
			sb.append(",actual_paid=" + String.valueOf(actual_paid));
			sb.append(",ineligible_for_payroll=" + String.valueOf(ineligible_for_payroll));
			sb.append(",actual_invoice_number=" + String.valueOf(actual_invoice_number));
			sb.append(",actual_billed=" + String.valueOf(actual_billed));
			sb.append(",actual_start_time=" + String.valueOf(actual_start_time));
			sb.append(",actual_end_time=" + String.valueOf(actual_end_time));
			sb.append(",actual_units=" + String.valueOf(actual_units));
			sb.append(",actual_duration=" + String.valueOf(actual_duration));
			sb.append(",service_billed_date_id=" + String.valueOf(service_billed_date_id));
			sb.append(",in_process_units_batched=" + String.valueOf(in_process_units_batched));
			sb.append(",note_duration=" + String.valueOf(note_duration));
			sb.append(",note_end_time=" + String.valueOf(note_end_time));
			sb.append(",note_start_time=" + String.valueOf(note_start_time));
			sb.append(",rate_type=" + rate_type);
			sb.append(",first_encounter=" + String.valueOf(first_encounter));
			sb.append(",units_calculated=" + String.valueOf(units_calculated));
			sb.append(",clqnote_has_child=" + String.valueOf(clqnote_has_child));
			sb.append(",missed_shift_id=" + String.valueOf(missed_shift_id));
			sb.append(",missed_shift_units=" + String.valueOf(missed_shift_units));
			sb.append(",billed_units=" + String.valueOf(billed_units));
			sb.append(",transaction_type=" + transaction_type);
			sb.append(",transaction_date_id=" + String.valueOf(transaction_date_id));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();

				/**
				 * [tBigQueryOutput_2_tBQOB begin ] start
				 */

				ok_Hash.put("tBigQueryOutput_2_tBQOB", false);
				start_Hash.put("tBigQueryOutput_2_tBQOB", System.currentTimeMillis());

				currentVirtualComponent = "tBigQueryOutput_2";

				currentComponent = "tBigQueryOutput_2_tBQOB";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tBigQueryOutput_2_tBQOB = 0;

				int nb_line_tBigQueryOutput_2_tBQOB = 0;
				String rowSeparator_tBigQueryOutput_2_tBQOB = "\n";
				String fieldSeparator_tBigQueryOutput_2_tBQOB = ",";
				char escapeChar_tBigQueryOutput_2_tBQOB = "\\".charAt(0);
				char textEnclosure_tBigQueryOutput_2_tBQOB = "\"".charAt(0);

				escapeChar_tBigQueryOutput_2_tBQOB = textEnclosure_tBigQueryOutput_2_tBQOB;

				if (escapeChar_tBigQueryOutput_2_tBQOB == '\\') {
				} else if (escapeChar_tBigQueryOutput_2_tBQOB == textEnclosure_tBigQueryOutput_2_tBQOB) {
				} else {
					throw new RuntimeException("The escape mode only support the '\\' or double text enclosure.");
				}

				java.io.File file_tBigQueryOutput_2_tBQOB = new java.io.File(
						"/Applications/TOSDI-8.0.1/studio/workspace/schedule_data.avro");

				file_tBigQueryOutput_2_tBQOB.getParentFile().mkdirs();

				com.talend.csv.CSVWriter csvWriter_tBigQueryOutput_2_tBQOB = new com.talend.csv.CSVWriter(
						new java.io.BufferedWriter(new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(file_tBigQueryOutput_2_tBQOB, false), "ISO-8859-15")));
				resourceMap.put("csvWriter_tBigQueryOutput_2_tBQOB", csvWriter_tBigQueryOutput_2_tBQOB);
				csvWriter_tBigQueryOutput_2_tBQOB.setSeparator(fieldSeparator_tBigQueryOutput_2_tBQOB.charAt(0));

				csvWriter_tBigQueryOutput_2_tBQOB.setLineEnd(rowSeparator_tBigQueryOutput_2_tBQOB);
				csvWriter_tBigQueryOutput_2_tBQOB.setEscapeChar(escapeChar_tBigQueryOutput_2_tBQOB);
				csvWriter_tBigQueryOutput_2_tBQOB.setQuoteChar(textEnclosure_tBigQueryOutput_2_tBQOB);
				csvWriter_tBigQueryOutput_2_tBQOB.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.AUTO);

				/**
				 * [tBigQueryOutput_2_tBQOB begin ] stop
				 */

				/**
				 * [tDBInput_2 begin ] start
				 */

				ok_Hash.put("tDBInput_2", false);
				start_Hash.put("tDBInput_2", System.currentTimeMillis());

				currentComponent = "tDBInput_2";

				int tos_count_tDBInput_2 = 0;

				int nb_line_tDBInput_2 = 0;
				java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBInput_2 = java.lang.Class.forName(driverClass_tDBInput_2);
				String dbUser_tDBInput_2 = "postgres";

				final String decryptedPassword_tDBInput_2 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:cBtYOF1EDKDptDDIzxThqGoUkIy2EV/LeXZsOGW5yMYkKahx83g=");

				String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;

				String url_tDBInput_2 = "jdbc:postgresql://" + "localhost" + ":" + "5431" + "/" + "OnTarget" + "?"
						+ "currentSchema=smallmiracle";

				conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2, dbUser_tDBInput_2,
						dbPwd_tDBInput_2);

				conn_tDBInput_2.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

				String dbquery_tDBInput_2 = "WITH schoolstatus AS (\nSELECT schoolyear.schooldistrictid AS schooldistrict,n.date\nFROM smallmiracle.schoolyear\nJOIN sm"
						+ "allmiracle.nonschoolday n ON schoolyear.id = n.schoolyearid\nGROUP BY schoolyear.schooldistrictid, n.date\n), base as(\nsel"
						+ "ect auth.id as Authorization_ID,authd.id as Authorized_ID,\nauth.ClientID as Client_ID,e.id as Employee_ID,dept.id as Dep"
						+ "artment_ID,cc.Id as Client_Cost_Center_ID,empCostCenter.id as Emp_Cost_Center_ID,\ncc_service.ID as Service_Cost_Center_I"
						+ "D,facility.ID as site_id,\ncase when auth.approved then 'a' else 'u' end as Service_Authorization_Approval,\nto_char(date("
						+ "auth.enddate),'YYYYMMDD') as Service_Authorization_Date_ID,\ncase when auth.EndDate<current_date then 'e' else 'u' end as"
						+ " Service_Authorization_Expired,\nauth.description as Service_Authorization_Description,\n'Abound Health, LLC' as company_n"
						+ "ame,\nBLServiceMaster.ServiceAbbreviation AS svcabbreviation,\nBLServiceMaster.ServiceCode AS svccode,\nto_char(date(authd."
						+ "startdate),'YYYYMMDD') as Authorized_Start_Date_ID,\nto_char(date(authd.enddate),'YYYYMMDD') as Authorized_End_Date_ID,\nt"
						+ "o_char(date(auth.startdate),'YYYYMMDD') as Authorization_Start_Date_ID,\nto_char(date(auth.startdate),'YYYYMMDD') as Auth"
						+ "orization_End_Date_ID,\ncoalesce(GLProgramCode.Description,'') AS Service_Program,\np.id as AR_Payer_ID,\np.OverrideNU AS P"
						+ "ayer_Override,\nBLServiceState.Eligible4Billing,\nBLServiceState.Eligible4Payroll,\nBLServiceMaster.RateType,\nauthd.BLServi"
						+ "cePayerID,\nBLServiceLocation.Code AS Service_Place,\nsmallmiracle.fn_isservicesumandround(authd.id)::int as Service_Is_Su"
						+ "m_And_Round,\nBLServiceState.validatetoschedules::int as Validate_To_Schedules,\ncoalesce(BLServiceMaster.MinimumMinutes,0"
						+ ") as Service_Minimum_Minutes,\nBLServiceMaster.UnitsPerHour as Service_Units_Per_Hour,\ncoalesce(authd.maxunitstotal,0) as"
						+ " Service_Max_Units_Total,\ncoalesce(auth.maxunitstotal,0) as Service_Auth_Max_Units_Total,\nauth.AuthLevelValidation as Au"
						+ "th_Level_Validation,\nCASE WHEN auth.AuthLevelValidation THEN COALESCE(auth.MaxUnitsTotal, 0) ELSE COALESCE(authd.MaxUnit"
						+ "sTotal, 0) end as Total_Units_Authorized,\nc.schooldistrictid as school_district_id\nfrom smallmiracle.BLServiceAuthorizat"
						+ "ion auth \ninner join smallmiracle.BLServiceAuthorized authd on auth.ID=authd.blserviceauthorizationid \nINNER JOIN smallm"
						+ "iracle.BLServicePayer ON authd.BLServicePayerID = BLServicePayer.ID\nINNER JOIN smallmiracle.BLServiceState ON BLServiceP"
						+ "ayer.BLStateServiceID = BLServiceState.ID\nLEFT JOIN smallmiracle.GLProgramCode ON BLServiceState.GLProgramCodeID = GLPro"
						+ "gramCode.ID\nINNER JOIN smallmiracle.BLServiceMaster ON BLServiceState.BLServiceMasterID = BLServiceMaster.ID\ninner join "
						+ "smallmiracle.clclient c on c.id=auth.clientid\nLEFT JOIN smallmiracle.PREmployee e ON c.PREmployeeID = e.ID\nLEFT JOIN sma"
						+ "llmiracle.prempdemo PRD ON PRD.PREmployeeID = e.ID\nLEFT JOIN smallmiracle.prbusdepartment dept on PRD.prbusdepartmentid "
						+ "= dept.id\nLEFT JOIN smallmiracle.PRBusCostCenter cc ON c.PRBusCostCenterID = cc.ID\nLEFT JOIN smallmiracle.prbuscostcente"
						+ "r cc_service ON authd.PRBusCostCenterID = cc_service.ID\nleft outer join smallmiracle.PRBusCostCenter as empCostCenter on"
						+ " prd.PRBusCostCenterID = empCostCenter.ID\nINNER JOIN smallmiracle.arpayer p ON auth.ARPayerID = p.ID\nINNER JOIN smallmir"
						+ "acle.BLServiceLocation ON authd.BLServiceLocationID = BLServiceLocation.ID\nleft outer join smallmiracle.FCFacility as fa"
						+ "cility on authd.FCFacilityID = facility.ID  \n)\nselect base.client_id as client_id,\ncoalesce(cast(base.employee_id as int"
						+ "),-1) as Supervisor_id,\ncoalesce(cast(base.client_cost_center_id as int),-1) as client_cost_center_id,\ncoalesce(cast(bas"
						+ "e.Emp_Cost_Center_ID as int),-1) as Employee_Cost_Center_ID,\ncoalesce(cast(base.employee_id as int),-1) as employee_id,\n"
						+ "coalesce(cast(base.AR_Payer_ID as int),-1) as AR_Payer_ID,\ncoalesce(cast(base.department_id as int),-1) as department_id"
						+ ",\ncoalesce(cast(base.service_cost_center_id as int),-1) as service_cost_center_id,\ncoalesce(cast(base.site_id as int),-1"
						+ ") as site_id,\ncoalesce(cast(schoolstatus.schooldistrict as int),-1) as school_district_id,\nbase.Authorization_ID,base.au"
						+ "thorized_id,\nbase.Service_Authorization_Approval,\nbase.Service_Authorization_Date_ID,\nbase.Service_Authorization_Expired"
						+ ",\nbase.Service_Authorization_Description,\nbase.company_name,\nbase.svcabbreviation as service_abbreviation,\nbase.svccode "
						+ "as service_code,\nbase.Authorized_Start_Date_ID,\nbase.Authorized_End_Date_ID,\nbase.Authorization_Start_Date_ID,\nbase.Auth"
						+ "orization_End_Date_ID,\nbase.Service_Program,\nbase.Service_Place,\nbase.Service_Is_Sum_And_Round,\nbase.Validate_To_Schedul"
						+ "es,\nbase.Service_Minimum_Minutes,\nbase.Service_Units_Per_Hour,\nbase.Service_Max_Units_Total,\nbase.Service_Auth_Max_Units"
						+ "_Total,\nbase.Auth_Level_Validation,\nbase.total_units_authorized,\ncoalesce(smallmiracle.fn_getcurrate(base.authorized_id)"
						+ ",0) as current_rate,\n-1 as caregiver_id,-1 as inv_stg_service_date_id,coalesce(cast(to_char(date(clqnote_schedule.dateof"
						+ "service),'YYYYMMDD') as int),-1) as in_schedule_note_service_date_id,\ncoalesce(cast(to_char(date(clqnote_schedule.dateof"
						+ "service),'YYYYMMDD') as int),-1) as note_date_of_service_id,\n-1 as in_actual_note_service_date_id,\ncoalesce(schedule.dur"
						+ "ation,TO_TIMESTAMP('1900-01-01 00:00:00','YYYY-MM-DD HH24:MI:SS')) as schedule_duration,\ncoalesce(cast(to_char(date(sche"
						+ "dule.startdate),'YYYYMMDD') as int),-1) as schedule_start_date_id,\ncoalesce(cast(to_char(date(schedule.enddate),'YYYYMMD"
						+ "D') as int),-1) as schedule_end_date_id,\ncoalesce(schedule.starttime,TO_TIMESTAMP('1900-01-01 00:00:00','YYYY-MM-DD HH24"
						+ ":MI:SS')) as schedule_start_time, \ncoalesce(schedule.endtime,TO_TIMESTAMP('1900-01-01 00:00:00','YYYY-MM-DD HH24:MI:SS')"
						+ ") as schedule_end_time,\ncoalesce(schedule.units,0) as schedule_units,\nCOALESCE(status.description, '') AS schedule_statu"
						+ "s,\ncoalesce(cast(to_char(date(actual.startdate),'YYYYMMDD') as int),-1) as actual_start_date_id,\ncoalesce(cast(to_char(d"
						+ "ate(actual.enddate),'YYYYMMDD') as int),-1) as actual_end_date_id, \nformat('%s / %s', p_op_billingnpi, p_op_attendingnpi"
						+ ") as billing_attending_NPI,\nfalse as actual_imported,false as actual_hold_pay,false as actual_hold_bill,false as actual_"
						+ "time_sheet_Approved,\nfalse as actual_note_approved_bl,\nfalse as actual_note_approved_pr,\ncast('' as varchar(10)) as actu"
						+ "al_status_BL,\ncast('' as varchar(10)) as actual_emp_pay_type,\nfalse as ineligible_For_Billing,\nfalse as actual_adjustmen"
						+ "t,-1 as actual_check_Date_ID,\n-1 as actual_last_Check_Date_id,\nfalse as actual_paid,\nfalse as ineligible_For_Payroll,\n-1"
						+ " as actual_invoice_Number,\nfalse as actual_billed,TO_TIMESTAMP('1900-01-01 00:00:00','YYYY-MM-DD HH24:MI:SS') as actual_"
						+ "start_time, TO_TIMESTAMP('1900-01-01 00:00:00','YYYY-MM-DD HH24:MI:SS') as actual_end_time,\ncast(0 as int) as actual_uni"
						+ "ts,TO_TIMESTAMP('1900-01-01 00:00:00','YYYY-MM-DD HH24:MI:SS') as actual_duration,\n-1 as service_billed_date_id,0 as in_"
						+ "process_units_batched,\ncoalesce(clqnote_schedule.duration,TO_TIMESTAMP('1900-01-01 00:00:00','YYYY-MM-DD HH24:MI:SS')) a"
						+ "s note_duration,\ncoalesce(clqnote_schedule.endtime,TO_TIMESTAMP('1900-01-01 00:00:00','YYYY-MM-DD HH24:MI:SS')) as note_"
						+ "end_time,\ncoalesce(clqnote_schedule.starttime,TO_TIMESTAMP('1900-01-01 00:00:00','YYYY-MM-DD HH24:MI:SS')) as note_start"
						+ "_time,\nbase.ratetype as rate_type,\ncoalesce(clqnote_schedule.firstencounter,false) as first_encounter,\ncoalesce(clqnote_"
						+ "schedule.unitscalculated,0) as units_calculated,\nclqnote_child.id is not null as clqnote_has_child,\ncoalesce(schedule.Mi"
						+ "ssedShiftID,-1) as missed_shift_ID,\ncoalesce(schedule.MissedShiftUnits,0) as missed_shift_units,\n0 as billed_units,\ncast"
						+ "('S' as varchar(1)) as transaction_type,\ncoalesce(cast(to_char(date(schedule.startdate),'YYYYMMDD') as int),-1) as trans"
						+ "action_date_id\nfrom base\nleft join smallmiracle.bltimeschedule schedule on base.authorized_id=schedule.blserviceauthoriz"
						+ "edid \nLEFT JOIN smallmiracle.missedshift ON schedule.missedshiftid = missedshift.id\nLEFT JOIN smallmiracle.bltimeschedul"
						+ "estatus status ON schedule.bltimeschedulestatusid = status.id\nleft join schoolstatus on base.school_district_id = school"
						+ "status.schooldistrict AND schoolstatus.date = schedule.startdate \nLEFT JOIN smallmiracle.BLTimeActual actual ON schedule"
						+ ".ID = actual.BLTimeScheduleID\nleft join smallmiracle.clqnote as clqnote_schedule on schedule.id=clqnote_schedule.bltimes"
						+ "cheduleid \nleft join smallmiracle.clqnote as clqnote_child on clqnote_schedule.id=clqnote_child.clqnoteidparent \ncross j"
						+ "oin smallmiracle.up_findlastcheckdtandadjstflag(actual.id) \ncross join smallmiracle.fn_getbillingattendingnpisselect(nul"
						+ "l, actual.id)";

				globalMap.put("tDBInput_2_QUERY", dbquery_tDBInput_2);
				java.sql.ResultSet rs_tDBInput_2 = null;

				try {
					rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
					java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
					int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

					String tmpContent_tDBInput_2 = null;

					while (rs_tDBInput_2.next()) {
						nb_line_tDBInput_2++;

						if (colQtyInRs_tDBInput_2 < 1) {
							row1.client_id = null;
						} else {

							row1.client_id = rs_tDBInput_2.getInt(1);
							if (rs_tDBInput_2.wasNull()) {
								row1.client_id = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 2) {
							row1.supervisor_id = null;
						} else {

							row1.supervisor_id = rs_tDBInput_2.getInt(2);
							if (rs_tDBInput_2.wasNull()) {
								row1.supervisor_id = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 3) {
							row1.client_cost_center_id = null;
						} else {

							row1.client_cost_center_id = rs_tDBInput_2.getInt(3);
							if (rs_tDBInput_2.wasNull()) {
								row1.client_cost_center_id = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 4) {
							row1.employee_cost_center_id = null;
						} else {

							row1.employee_cost_center_id = rs_tDBInput_2.getInt(4);
							if (rs_tDBInput_2.wasNull()) {
								row1.employee_cost_center_id = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 5) {
							row1.employee_id = null;
						} else {

							row1.employee_id = rs_tDBInput_2.getInt(5);
							if (rs_tDBInput_2.wasNull()) {
								row1.employee_id = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 6) {
							row1.ar_payer_id = null;
						} else {

							row1.ar_payer_id = rs_tDBInput_2.getInt(6);
							if (rs_tDBInput_2.wasNull()) {
								row1.ar_payer_id = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 7) {
							row1.department_id = null;
						} else {

							row1.department_id = rs_tDBInput_2.getInt(7);
							if (rs_tDBInput_2.wasNull()) {
								row1.department_id = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 8) {
							row1.service_cost_center_id = null;
						} else {

							row1.service_cost_center_id = rs_tDBInput_2.getInt(8);
							if (rs_tDBInput_2.wasNull()) {
								row1.service_cost_center_id = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 9) {
							row1.site_id = null;
						} else {

							row1.site_id = rs_tDBInput_2.getInt(9);
							if (rs_tDBInput_2.wasNull()) {
								row1.site_id = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 10) {
							row1.school_district_id = null;
						} else {

							row1.school_district_id = rs_tDBInput_2.getInt(10);
							if (rs_tDBInput_2.wasNull()) {
								row1.school_district_id = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 11) {
							row1.authorization_id = null;
						} else {

							row1.authorization_id = rs_tDBInput_2.getInt(11);
							if (rs_tDBInput_2.wasNull()) {
								row1.authorization_id = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 12) {
							row1.authorized_id = null;
						} else {

							row1.authorized_id = rs_tDBInput_2.getInt(12);
							if (rs_tDBInput_2.wasNull()) {
								row1.authorized_id = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 13) {
							row1.service_authorization_approval = null;
						} else {

							row1.service_authorization_approval = routines.system.JDBCUtil.getString(rs_tDBInput_2, 13,
									false);
						}
						if (colQtyInRs_tDBInput_2 < 14) {
							row1.service_authorization_date_id = null;
						} else {

							row1.service_authorization_date_id = routines.system.JDBCUtil.getString(rs_tDBInput_2, 14,
									false);
						}
						if (colQtyInRs_tDBInput_2 < 15) {
							row1.Service_Authorization_Expired = null;
						} else {

							row1.Service_Authorization_Expired = routines.system.JDBCUtil.getString(rs_tDBInput_2, 15,
									false);
						}
						if (colQtyInRs_tDBInput_2 < 16) {
							row1.service_authorization_description = null;
						} else {

							row1.service_authorization_description = routines.system.JDBCUtil.getString(rs_tDBInput_2,
									16, false);
						}
						if (colQtyInRs_tDBInput_2 < 17) {
							row1.company_name = null;
						} else {

							row1.company_name = routines.system.JDBCUtil.getString(rs_tDBInput_2, 17, false);
						}
						if (colQtyInRs_tDBInput_2 < 18) {
							row1.service_abbreviation = null;
						} else {

							row1.service_abbreviation = routines.system.JDBCUtil.getString(rs_tDBInput_2, 18, false);
						}
						if (colQtyInRs_tDBInput_2 < 19) {
							row1.service_code = null;
						} else {

							row1.service_code = routines.system.JDBCUtil.getString(rs_tDBInput_2, 19, false);
						}
						if (colQtyInRs_tDBInput_2 < 20) {
							row1.authorized_start_date_id = null;
						} else {

							row1.authorized_start_date_id = routines.system.JDBCUtil.getString(rs_tDBInput_2, 20,
									false);
						}
						if (colQtyInRs_tDBInput_2 < 21) {
							row1.authorized_end_date_id = null;
						} else {

							row1.authorized_end_date_id = routines.system.JDBCUtil.getString(rs_tDBInput_2, 21, false);
						}
						if (colQtyInRs_tDBInput_2 < 22) {
							row1.authorization_start_date_id = null;
						} else {

							row1.authorization_start_date_id = routines.system.JDBCUtil.getString(rs_tDBInput_2, 22,
									false);
						}
						if (colQtyInRs_tDBInput_2 < 23) {
							row1.authorization_end_date_id = null;
						} else {

							row1.authorization_end_date_id = routines.system.JDBCUtil.getString(rs_tDBInput_2, 23,
									false);
						}
						if (colQtyInRs_tDBInput_2 < 24) {
							row1.service_program = null;
						} else {

							row1.service_program = routines.system.JDBCUtil.getString(rs_tDBInput_2, 24, false);
						}
						if (colQtyInRs_tDBInput_2 < 25) {
							row1.service_place = null;
						} else {

							row1.service_place = routines.system.JDBCUtil.getString(rs_tDBInput_2, 25, false);
						}
						if (colQtyInRs_tDBInput_2 < 26) {
							row1.service_is_sum_and_round = null;
						} else {

							row1.service_is_sum_and_round = rs_tDBInput_2.getInt(26);
							if (rs_tDBInput_2.wasNull()) {
								row1.service_is_sum_and_round = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 27) {
							row1.validate_to_schedules = null;
						} else {

							row1.validate_to_schedules = rs_tDBInput_2.getInt(27);
							if (rs_tDBInput_2.wasNull()) {
								row1.validate_to_schedules = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 28) {
							row1.service_minimum_minutes = null;
						} else {

							row1.service_minimum_minutes = rs_tDBInput_2.getInt(28);
							if (rs_tDBInput_2.wasNull()) {
								row1.service_minimum_minutes = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 29) {
							row1.service_units_per_hour = null;
						} else {

							row1.service_units_per_hour = rs_tDBInput_2.getInt(29);
							if (rs_tDBInput_2.wasNull()) {
								row1.service_units_per_hour = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 30) {
							row1.service_max_units_total = null;
						} else {

							row1.service_max_units_total = rs_tDBInput_2.getInt(30);
							if (rs_tDBInput_2.wasNull()) {
								row1.service_max_units_total = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 31) {
							row1.service_auth_max_units_total = null;
						} else {

							row1.service_auth_max_units_total = rs_tDBInput_2.getInt(31);
							if (rs_tDBInput_2.wasNull()) {
								row1.service_auth_max_units_total = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 32) {
							row1.auth_level_validation = null;
						} else {

							row1.auth_level_validation = rs_tDBInput_2.getBoolean(32);
							if (rs_tDBInput_2.wasNull()) {
								row1.auth_level_validation = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 33) {
							row1.total_units_authorized = null;
						} else {

							row1.total_units_authorized = rs_tDBInput_2.getInt(33);
							if (rs_tDBInput_2.wasNull()) {
								row1.total_units_authorized = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 34) {
							row1.current_rate = null;
						} else {

							row1.current_rate = rs_tDBInput_2.getFloat(34);
							if (rs_tDBInput_2.wasNull()) {
								row1.current_rate = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 35) {
							row1.caregiver_id = null;
						} else {

							row1.caregiver_id = rs_tDBInput_2.getInt(35);
							if (rs_tDBInput_2.wasNull()) {
								row1.caregiver_id = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 36) {
							row1.inv_stg_service_date_id = null;
						} else {

							row1.inv_stg_service_date_id = rs_tDBInput_2.getInt(36);
							if (rs_tDBInput_2.wasNull()) {
								row1.inv_stg_service_date_id = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 37) {
							row1.in_schedule_note_service_date_id = null;
						} else {

							row1.in_schedule_note_service_date_id = rs_tDBInput_2.getInt(37);
							if (rs_tDBInput_2.wasNull()) {
								row1.in_schedule_note_service_date_id = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 38) {
							row1.note_date_of_service_id = null;
						} else {

							row1.note_date_of_service_id = rs_tDBInput_2.getInt(38);
							if (rs_tDBInput_2.wasNull()) {
								row1.note_date_of_service_id = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 39) {
							row1.in_actual_note_service_date_id = null;
						} else {

							row1.in_actual_note_service_date_id = rs_tDBInput_2.getInt(39);
							if (rs_tDBInput_2.wasNull()) {
								row1.in_actual_note_service_date_id = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 40) {
							row1.schedule_duration = null;
						} else {

							row1.schedule_duration = routines.system.JDBCUtil.getDate(rs_tDBInput_2, 40);
						}
						if (colQtyInRs_tDBInput_2 < 41) {
							row1.schedule_start_date_id = null;
						} else {

							row1.schedule_start_date_id = rs_tDBInput_2.getInt(41);
							if (rs_tDBInput_2.wasNull()) {
								row1.schedule_start_date_id = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 42) {
							row1.schedule_end_date_id = null;
						} else {

							row1.schedule_end_date_id = rs_tDBInput_2.getInt(42);
							if (rs_tDBInput_2.wasNull()) {
								row1.schedule_end_date_id = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 43) {
							row1.schedule_start_time = null;
						} else {

							row1.schedule_start_time = routines.system.JDBCUtil.getDate(rs_tDBInput_2, 43);
						}
						if (colQtyInRs_tDBInput_2 < 44) {
							row1.schedule_end_time = null;
						} else {

							row1.schedule_end_time = routines.system.JDBCUtil.getDate(rs_tDBInput_2, 44);
						}
						if (colQtyInRs_tDBInput_2 < 45) {
							row1.schedule_units = null;
						} else {

							row1.schedule_units = rs_tDBInput_2.getInt(45);
							if (rs_tDBInput_2.wasNull()) {
								row1.schedule_units = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 46) {
							row1.schedule_status = null;
						} else {

							row1.schedule_status = routines.system.JDBCUtil.getString(rs_tDBInput_2, 46, false);
						}
						if (colQtyInRs_tDBInput_2 < 47) {
							row1.actual_start_date_id = null;
						} else {

							row1.actual_start_date_id = rs_tDBInput_2.getInt(47);
							if (rs_tDBInput_2.wasNull()) {
								row1.actual_start_date_id = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 48) {
							row1.actual_end_date_id = null;
						} else {

							row1.actual_end_date_id = rs_tDBInput_2.getInt(48);
							if (rs_tDBInput_2.wasNull()) {
								row1.actual_end_date_id = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 49) {
							row1.billing_attending_NPI = null;
						} else {

							row1.billing_attending_NPI = routines.system.JDBCUtil.getString(rs_tDBInput_2, 49, false);
						}
						if (colQtyInRs_tDBInput_2 < 50) {
							row1.actual_imported = null;
						} else {

							row1.actual_imported = rs_tDBInput_2.getBoolean(50);
							if (rs_tDBInput_2.wasNull()) {
								row1.actual_imported = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 51) {
							row1.actual_hold_pay = null;
						} else {

							row1.actual_hold_pay = rs_tDBInput_2.getBoolean(51);
							if (rs_tDBInput_2.wasNull()) {
								row1.actual_hold_pay = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 52) {
							row1.actual_hold_bill = null;
						} else {

							row1.actual_hold_bill = rs_tDBInput_2.getBoolean(52);
							if (rs_tDBInput_2.wasNull()) {
								row1.actual_hold_bill = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 53) {
							row1.actual_time_sheet_approved = null;
						} else {

							row1.actual_time_sheet_approved = rs_tDBInput_2.getBoolean(53);
							if (rs_tDBInput_2.wasNull()) {
								row1.actual_time_sheet_approved = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 54) {
							row1.actual_note_approved_bl = null;
						} else {

							row1.actual_note_approved_bl = rs_tDBInput_2.getBoolean(54);
							if (rs_tDBInput_2.wasNull()) {
								row1.actual_note_approved_bl = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 55) {
							row1.actual_note_approved_pr = null;
						} else {

							row1.actual_note_approved_pr = rs_tDBInput_2.getBoolean(55);
							if (rs_tDBInput_2.wasNull()) {
								row1.actual_note_approved_pr = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 56) {
							row1.actual_status_BL = null;
						} else {

							row1.actual_status_BL = routines.system.JDBCUtil.getString(rs_tDBInput_2, 56, false);
						}
						if (colQtyInRs_tDBInput_2 < 57) {
							row1.actual_emp_pay_type = null;
						} else {

							row1.actual_emp_pay_type = routines.system.JDBCUtil.getString(rs_tDBInput_2, 57, false);
						}
						if (colQtyInRs_tDBInput_2 < 58) {
							row1.ineligible_for_billing = null;
						} else {

							row1.ineligible_for_billing = rs_tDBInput_2.getBoolean(58);
							if (rs_tDBInput_2.wasNull()) {
								row1.ineligible_for_billing = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 59) {
							row1.actual_adjustment = null;
						} else {

							row1.actual_adjustment = rs_tDBInput_2.getBoolean(59);
							if (rs_tDBInput_2.wasNull()) {
								row1.actual_adjustment = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 60) {
							row1.actual_check_date_id = null;
						} else {

							row1.actual_check_date_id = rs_tDBInput_2.getInt(60);
							if (rs_tDBInput_2.wasNull()) {
								row1.actual_check_date_id = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 61) {
							row1.actual_last_check_date_id = null;
						} else {

							row1.actual_last_check_date_id = rs_tDBInput_2.getInt(61);
							if (rs_tDBInput_2.wasNull()) {
								row1.actual_last_check_date_id = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 62) {
							row1.actual_paid = null;
						} else {

							row1.actual_paid = rs_tDBInput_2.getBoolean(62);
							if (rs_tDBInput_2.wasNull()) {
								row1.actual_paid = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 63) {
							row1.ineligible_for_payroll = null;
						} else {

							row1.ineligible_for_payroll = rs_tDBInput_2.getBoolean(63);
							if (rs_tDBInput_2.wasNull()) {
								row1.ineligible_for_payroll = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 64) {
							row1.actual_invoice_number = null;
						} else {

							row1.actual_invoice_number = rs_tDBInput_2.getInt(64);
							if (rs_tDBInput_2.wasNull()) {
								row1.actual_invoice_number = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 65) {
							row1.actual_billed = null;
						} else {

							row1.actual_billed = rs_tDBInput_2.getBoolean(65);
							if (rs_tDBInput_2.wasNull()) {
								row1.actual_billed = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 66) {
							row1.actual_start_time = null;
						} else {

							row1.actual_start_time = routines.system.JDBCUtil.getDate(rs_tDBInput_2, 66);
						}
						if (colQtyInRs_tDBInput_2 < 67) {
							row1.actual_end_time = null;
						} else {

							row1.actual_end_time = routines.system.JDBCUtil.getDate(rs_tDBInput_2, 67);
						}
						if (colQtyInRs_tDBInput_2 < 68) {
							row1.actual_units = null;
						} else {

							row1.actual_units = rs_tDBInput_2.getInt(68);
							if (rs_tDBInput_2.wasNull()) {
								row1.actual_units = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 69) {
							row1.actual_duration = null;
						} else {

							row1.actual_duration = routines.system.JDBCUtil.getDate(rs_tDBInput_2, 69);
						}
						if (colQtyInRs_tDBInput_2 < 70) {
							row1.service_billed_date_id = null;
						} else {

							row1.service_billed_date_id = rs_tDBInput_2.getInt(70);
							if (rs_tDBInput_2.wasNull()) {
								row1.service_billed_date_id = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 71) {
							row1.in_process_units_batched = null;
						} else {

							row1.in_process_units_batched = rs_tDBInput_2.getInt(71);
							if (rs_tDBInput_2.wasNull()) {
								row1.in_process_units_batched = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 72) {
							row1.note_duration = null;
						} else {

							row1.note_duration = routines.system.JDBCUtil.getDate(rs_tDBInput_2, 72);
						}
						if (colQtyInRs_tDBInput_2 < 73) {
							row1.note_end_time = null;
						} else {

							row1.note_end_time = routines.system.JDBCUtil.getDate(rs_tDBInput_2, 73);
						}
						if (colQtyInRs_tDBInput_2 < 74) {
							row1.note_start_time = null;
						} else {

							row1.note_start_time = routines.system.JDBCUtil.getDate(rs_tDBInput_2, 74);
						}
						if (colQtyInRs_tDBInput_2 < 75) {
							row1.rate_type = null;
						} else {

							row1.rate_type = routines.system.JDBCUtil.getString(rs_tDBInput_2, 75, false);
						}
						if (colQtyInRs_tDBInput_2 < 76) {
							row1.first_encounter = null;
						} else {

							row1.first_encounter = rs_tDBInput_2.getBoolean(76);
							if (rs_tDBInput_2.wasNull()) {
								row1.first_encounter = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 77) {
							row1.units_calculated = null;
						} else {

							row1.units_calculated = rs_tDBInput_2.getInt(77);
							if (rs_tDBInput_2.wasNull()) {
								row1.units_calculated = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 78) {
							row1.clqnote_has_child = null;
						} else {

							row1.clqnote_has_child = rs_tDBInput_2.getBoolean(78);
							if (rs_tDBInput_2.wasNull()) {
								row1.clqnote_has_child = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 79) {
							row1.missed_shift_id = null;
						} else {

							row1.missed_shift_id = rs_tDBInput_2.getInt(79);
							if (rs_tDBInput_2.wasNull()) {
								row1.missed_shift_id = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 80) {
							row1.missed_shift_units = null;
						} else {

							row1.missed_shift_units = rs_tDBInput_2.getInt(80);
							if (rs_tDBInput_2.wasNull()) {
								row1.missed_shift_units = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 81) {
							row1.billed_units = null;
						} else {

							row1.billed_units = rs_tDBInput_2.getInt(81);
							if (rs_tDBInput_2.wasNull()) {
								row1.billed_units = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 82) {
							row1.transaction_type = null;
						} else {

							row1.transaction_type = routines.system.JDBCUtil.getString(rs_tDBInput_2, 82, false);
						}
						if (colQtyInRs_tDBInput_2 < 83) {
							row1.transaction_date_id = null;
						} else {

							row1.transaction_date_id = rs_tDBInput_2.getInt(83);
							if (rs_tDBInput_2.wasNull()) {
								row1.transaction_date_id = null;
							}
						}

						/**
						 * [tDBInput_2 begin ] stop
						 */

						/**
						 * [tDBInput_2 main ] start
						 */

						currentComponent = "tDBInput_2";

						tos_count_tDBInput_2++;

						/**
						 * [tDBInput_2 main ] stop
						 */

						/**
						 * [tDBInput_2 process_data_begin ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_begin ] stop
						 */

						/**
						 * [tBigQueryOutput_2_tBQOB main ] start
						 */

						currentVirtualComponent = "tBigQueryOutput_2";

						currentComponent = "tBigQueryOutput_2_tBQOB";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row1"

							);
						}

						String[] row_tBigQueryOutput_2_tBQOB = new String[83];
						java.util.Arrays.fill(row_tBigQueryOutput_2_tBQOB, "\\N");

						int curColumnIndex_tBigQueryOutput_2_tBQOB = 0;

						curColumnIndex_tBigQueryOutput_2_tBQOB = 0;

						if (row1.client_id != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = String
									.valueOf(row1.client_id);

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 1;

						if (row1.supervisor_id != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = String
									.valueOf(row1.supervisor_id);

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 2;

						if (row1.client_cost_center_id != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = String
									.valueOf(row1.client_cost_center_id);

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 3;

						if (row1.employee_cost_center_id != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = String
									.valueOf(row1.employee_cost_center_id);

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 4;

						if (row1.employee_id != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = String
									.valueOf(row1.employee_id);

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 5;

						if (row1.ar_payer_id != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = String
									.valueOf(row1.ar_payer_id);

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 6;

						if (row1.department_id != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = String
									.valueOf(row1.department_id);

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 7;

						if (row1.service_cost_center_id != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = String
									.valueOf(row1.service_cost_center_id);

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 8;

						if (row1.site_id != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = String
									.valueOf(row1.site_id);

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 9;

						if (row1.school_district_id != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = String
									.valueOf(row1.school_district_id);

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 10;

						if (row1.authorization_id != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = String
									.valueOf(row1.authorization_id);

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 11;

						if (row1.authorized_id != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = String
									.valueOf(row1.authorized_id);

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 12;

						if (row1.service_authorization_approval != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = row1.service_authorization_approval;

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 13;

						if (row1.service_authorization_date_id != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = row1.service_authorization_date_id;

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 14;

						if (row1.Service_Authorization_Expired != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = row1.Service_Authorization_Expired;

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 15;

						if (row1.service_authorization_description != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = row1.service_authorization_description;

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 16;

						if (row1.company_name != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = row1.company_name;

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 17;

						if (row1.service_abbreviation != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = row1.service_abbreviation;

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 18;

						if (row1.service_code != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = row1.service_code;

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 19;

						if (row1.authorized_start_date_id != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = row1.authorized_start_date_id;

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 20;

						if (row1.authorized_end_date_id != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = row1.authorized_end_date_id;

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 21;

						if (row1.authorization_start_date_id != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = row1.authorization_start_date_id;

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 22;

						if (row1.authorization_end_date_id != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = row1.authorization_end_date_id;

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 23;

						if (row1.service_program != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = row1.service_program;

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 24;

						if (row1.service_place != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = row1.service_place;

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 25;

						if (row1.service_is_sum_and_round != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = String
									.valueOf(row1.service_is_sum_and_round);

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 26;

						if (row1.validate_to_schedules != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = String
									.valueOf(row1.validate_to_schedules);

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 27;

						if (row1.service_minimum_minutes != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = String
									.valueOf(row1.service_minimum_minutes);

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 28;

						if (row1.service_units_per_hour != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = String
									.valueOf(row1.service_units_per_hour);

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 29;

						if (row1.service_max_units_total != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = String
									.valueOf(row1.service_max_units_total);

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 30;

						if (row1.service_auth_max_units_total != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = String
									.valueOf(row1.service_auth_max_units_total);

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 31;

						if (row1.auth_level_validation != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = String
									.valueOf(true == row1.auth_level_validation ? "1" : "0");

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 32;

						if (row1.total_units_authorized != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = String
									.valueOf(row1.total_units_authorized);

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 33;

						if (row1.current_rate != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = String
									.valueOf(row1.current_rate);

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 34;

						if (row1.caregiver_id != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = String
									.valueOf(row1.caregiver_id);

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 35;

						if (row1.inv_stg_service_date_id != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = String
									.valueOf(row1.inv_stg_service_date_id);

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 36;

						if (row1.in_schedule_note_service_date_id != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = String
									.valueOf(row1.in_schedule_note_service_date_id);

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 37;

						if (row1.note_date_of_service_id != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = String
									.valueOf(row1.note_date_of_service_id);

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 38;

						if (row1.in_actual_note_service_date_id != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = String
									.valueOf(row1.in_actual_note_service_date_id);

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 39;

						if (row1.schedule_duration != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = FormatterUtils
									.format_Date(row1.schedule_duration, "yyyy-MM-dd HH:mm:ss");

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 40;

						if (row1.schedule_start_date_id != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = String
									.valueOf(row1.schedule_start_date_id);

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 41;

						if (row1.schedule_end_date_id != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = String
									.valueOf(row1.schedule_end_date_id);

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 42;

						if (row1.schedule_start_time != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = FormatterUtils
									.format_Date(row1.schedule_start_time, "yyyy-MM-dd HH:mm:ss");

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 43;

						if (row1.schedule_end_time != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = FormatterUtils
									.format_Date(row1.schedule_end_time, "yyyy-MM-dd HH:mm:ss");

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 44;

						if (row1.schedule_units != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = String
									.valueOf(row1.schedule_units);

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 45;

						if (row1.schedule_status != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = row1.schedule_status;

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 46;

						if (row1.actual_start_date_id != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = String
									.valueOf(row1.actual_start_date_id);

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 47;

						if (row1.actual_end_date_id != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = String
									.valueOf(row1.actual_end_date_id);

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 48;

						if (row1.billing_attending_NPI != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = row1.billing_attending_NPI;

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 49;

						if (row1.actual_imported != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = String
									.valueOf(true == row1.actual_imported ? "1" : "0");

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 50;

						if (row1.actual_hold_pay != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = String
									.valueOf(true == row1.actual_hold_pay ? "1" : "0");

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 51;

						if (row1.actual_hold_bill != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = String
									.valueOf(true == row1.actual_hold_bill ? "1" : "0");

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 52;

						if (row1.actual_time_sheet_approved != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = String
									.valueOf(true == row1.actual_time_sheet_approved ? "1" : "0");

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 53;

						if (row1.actual_note_approved_bl != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = String
									.valueOf(true == row1.actual_note_approved_bl ? "1" : "0");

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 54;

						if (row1.actual_note_approved_pr != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = String
									.valueOf(true == row1.actual_note_approved_pr ? "1" : "0");

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 55;

						if (row1.actual_status_BL != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = row1.actual_status_BL;

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 56;

						if (row1.actual_emp_pay_type != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = row1.actual_emp_pay_type;

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 57;

						if (row1.ineligible_for_billing != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = String
									.valueOf(true == row1.ineligible_for_billing ? "1" : "0");

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 58;

						if (row1.actual_adjustment != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = String
									.valueOf(true == row1.actual_adjustment ? "1" : "0");

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 59;

						if (row1.actual_check_date_id != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = String
									.valueOf(row1.actual_check_date_id);

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 60;

						if (row1.actual_last_check_date_id != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = String
									.valueOf(row1.actual_last_check_date_id);

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 61;

						if (row1.actual_paid != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = String
									.valueOf(true == row1.actual_paid ? "1" : "0");

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 62;

						if (row1.ineligible_for_payroll != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = String
									.valueOf(true == row1.ineligible_for_payroll ? "1" : "0");

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 63;

						if (row1.actual_invoice_number != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = String
									.valueOf(row1.actual_invoice_number);

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 64;

						if (row1.actual_billed != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = String
									.valueOf(true == row1.actual_billed ? "1" : "0");

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 65;

						if (row1.actual_start_time != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = FormatterUtils
									.format_Date(row1.actual_start_time, "yyyy-MM-dd HH:mm:ss");

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 66;

						if (row1.actual_end_time != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = FormatterUtils
									.format_Date(row1.actual_end_time, "yyyy-MM-dd HH:mm:ss");

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 67;

						if (row1.actual_units != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = String
									.valueOf(row1.actual_units);

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 68;

						if (row1.actual_duration != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = FormatterUtils
									.format_Date(row1.actual_duration, "yyyy-MM-dd HH:mm:ss");

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 69;

						if (row1.service_billed_date_id != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = String
									.valueOf(row1.service_billed_date_id);

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 70;

						if (row1.in_process_units_batched != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = String
									.valueOf(row1.in_process_units_batched);

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 71;

						if (row1.note_duration != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = FormatterUtils
									.format_Date(row1.note_duration, "yyyy-MM-dd HH:mm:ss");

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 72;

						if (row1.note_end_time != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = FormatterUtils
									.format_Date(row1.note_end_time, "yyyy-MM-dd HH:mm:ss");

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 73;

						if (row1.note_start_time != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = FormatterUtils
									.format_Date(row1.note_start_time, "yyyy-MM-dd HH:mm:ss");

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 74;

						if (row1.rate_type != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = row1.rate_type;

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 75;

						if (row1.first_encounter != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = String
									.valueOf(true == row1.first_encounter ? "1" : "0");

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 76;

						if (row1.units_calculated != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = String
									.valueOf(row1.units_calculated);

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 77;

						if (row1.clqnote_has_child != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = String
									.valueOf(true == row1.clqnote_has_child ? "1" : "0");

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 78;

						if (row1.missed_shift_id != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = String
									.valueOf(row1.missed_shift_id);

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 79;

						if (row1.missed_shift_units != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = String
									.valueOf(row1.missed_shift_units);

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 80;

						if (row1.billed_units != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = String
									.valueOf(row1.billed_units);

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 81;

						if (row1.transaction_type != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = row1.transaction_type;

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 82;

						if (row1.transaction_date_id != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = String
									.valueOf(row1.transaction_date_id);

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						csvWriter_tBigQueryOutput_2_tBQOB.writeNextEnhance(row_tBigQueryOutput_2_tBQOB, "");
						nb_line_tBigQueryOutput_2_tBQOB++;

						tos_count_tBigQueryOutput_2_tBQOB++;

						/**
						 * [tBigQueryOutput_2_tBQOB main ] stop
						 */

						/**
						 * [tBigQueryOutput_2_tBQOB process_data_begin ] start
						 */

						currentVirtualComponent = "tBigQueryOutput_2";

						currentComponent = "tBigQueryOutput_2_tBQOB";

						/**
						 * [tBigQueryOutput_2_tBQOB process_data_begin ] stop
						 */

						/**
						 * [tBigQueryOutput_2_tBQOB process_data_end ] start
						 */

						currentVirtualComponent = "tBigQueryOutput_2";

						currentComponent = "tBigQueryOutput_2_tBQOB";

						/**
						 * [tBigQueryOutput_2_tBQOB process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 process_data_end ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 end ] start
						 */

						currentComponent = "tDBInput_2";

					}
				} finally {
					if (rs_tDBInput_2 != null) {
						rs_tDBInput_2.close();
					}
					if (stmt_tDBInput_2 != null) {
						stmt_tDBInput_2.close();
					}
					if (conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {

						conn_tDBInput_2.commit();

						conn_tDBInput_2.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}
				globalMap.put("tDBInput_2_NB_LINE", nb_line_tDBInput_2);

				ok_Hash.put("tDBInput_2", true);
				end_Hash.put("tDBInput_2", System.currentTimeMillis());

				/**
				 * [tDBInput_2 end ] stop
				 */

				/**
				 * [tBigQueryOutput_2_tBQOB end ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_2";

				currentComponent = "tBigQueryOutput_2_tBQOB";

				if (csvWriter_tBigQueryOutput_2_tBQOB != null) {
					csvWriter_tBigQueryOutput_2_tBQOB.close();
				}
				resourceMap.put("finish_tBigQueryOutput_2_tBQOB", true);
				globalMap.put("tBigQueryOutput_2_tBQOB_NB_LINE", nb_line_tBigQueryOutput_2_tBQOB);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tBigQueryOutput_2_tBQOB", true);
				end_Hash.put("tBigQueryOutput_2_tBQOB", System.currentTimeMillis());

				/**
				 * [tBigQueryOutput_2_tBQOB end ] stop
				 */

				/**
				 * [tBigQueryOutput_2_tBQBE begin ] start
				 */

				ok_Hash.put("tBigQueryOutput_2_tBQBE", false);
				start_Hash.put("tBigQueryOutput_2_tBQBE", System.currentTimeMillis());

				currentVirtualComponent = "tBigQueryOutput_2";

				currentComponent = "tBigQueryOutput_2_tBQBE";

				int tos_count_tBigQueryOutput_2_tBQBE = 0;

				/* ----START-CREATING-CLIENT (Cloud API)---- */

				com.google.auth.oauth2.GoogleCredentials credentials_tBigQueryOutput_2;
				java.io.File credentialsFile_tBigQueryOutput_2 = new java.io.File(
						"/Users/jsun/Documents/WCIWork/OnTarget/code/otmirror-060322-9471bb896012.json");
				try (java.io.FileInputStream credentialsStream_tBigQueryOutput_2 = new java.io.FileInputStream(
						credentialsFile_tBigQueryOutput_2)) {
					credentials_tBigQueryOutput_2 = com.google.auth.oauth2.ServiceAccountCredentials
							.fromStream(credentialsStream_tBigQueryOutput_2);
				}

				com.google.cloud.bigquery.BigQuery bigquery_tBigQueryOutput_2 = com.google.cloud.bigquery.BigQueryOptions
						.newBuilder().setCredentials(credentials_tBigQueryOutput_2).setProjectId("otmirror-060322")
						.build().getService();

				/* ----END-CREATING-CLIENT (Cloud API)---- */

				long nb_line_tBigQueryOutput_2 = 0;

				com.google.auth.Credentials credential_tBigQueryOutput_2 = null;
				try {
					credential_tBigQueryOutput_2 = com.google.auth.oauth2.GoogleCredentials
							.fromStream(new java.io.FileInputStream(
									"/Users/jsun/Documents/WCIWork/OnTarget/code/otmirror-060322-9471bb896012.json"));
				} catch (IOException e_tBigQueryOutput_2) {
					globalMap.put("tBigQueryOutput_2_ERROR_MESSAGE", e_tBigQueryOutput_2.getMessage());
				}
				com.google.cloud.storage.Storage storage_tBigQueryOutput_2 = com.google.cloud.storage.StorageOptions
						.newBuilder().setCredentials(credential_tBigQueryOutput_2).build().getService();

				java.io.File file_tBigQueryOutput_2 = new java.io.File(
						"/Applications/TOSDI-8.0.1/studio/workspace/schedule_data.avro");

				com.google.cloud.storage.BlobInfo blobInfo_tBigQueryOutput_2 = com.google.cloud.storage.BlobInfo
						.newBuilder("dw-tmp", file_tBigQueryOutput_2.getName()).build();
				storage_tBigQueryOutput_2.create(blobInfo_tBigQueryOutput_2,
						java.nio.file.Files.readAllBytes(file_tBigQueryOutput_2.toPath()));

				/* ----END-UPLOADING-FILE---- */

				/* ----START-CREATING-JOB (Cloud API)---- */
				com.google.cloud.bigquery.TableId tableId_tBigQueryOutput_2 = com.google.cloud.bigquery.TableId
						.of("otmirror-060322", "DW", "fact_transactions_2");
				com.google.cloud.bigquery.LoadJobConfiguration.Builder loadJobBuilder_tBigQueryOutput_2 = com.google.cloud.bigquery.LoadJobConfiguration
						.newBuilder(tableId_tBigQueryOutput_2, "gs://dw-tmp/schedule_data.avro");

				boolean dropTable_tBigQueryOutput_2 = false;

				if (dropTable_tBigQueryOutput_2
						&& bigquery_tBigQueryOutput_2.getTable(tableId_tBigQueryOutput_2) != null) {
					boolean deleted = bigquery_tBigQueryOutput_2.delete(tableId_tBigQueryOutput_2);
					if (deleted) {

					} else {
						throw new RuntimeException("Unable to delete table " + tableId_tBigQueryOutput_2);
					}
				}

				if (bigquery_tBigQueryOutput_2.getTable(tableId_tBigQueryOutput_2) == null) {
					java.util.List<com.google.cloud.bigquery.Field> fields_tBigQueryOutput_2 = new java.util.ArrayList<>();

					com.google.cloud.bigquery.Field field_0 = com.google.cloud.bigquery.Field
							.newBuilder("client_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_0);

					com.google.cloud.bigquery.Field field_1 = com.google.cloud.bigquery.Field
							.newBuilder("supervisor_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_1);

					com.google.cloud.bigquery.Field field_2 = com.google.cloud.bigquery.Field
							.newBuilder("client_cost_center_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_2);

					com.google.cloud.bigquery.Field field_3 = com.google.cloud.bigquery.Field
							.newBuilder("employee_cost_center_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_3);

					com.google.cloud.bigquery.Field field_4 = com.google.cloud.bigquery.Field
							.newBuilder("employee_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_4);

					com.google.cloud.bigquery.Field field_5 = com.google.cloud.bigquery.Field
							.newBuilder("ar_payer_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_5);

					com.google.cloud.bigquery.Field field_6 = com.google.cloud.bigquery.Field
							.newBuilder("department_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_6);

					com.google.cloud.bigquery.Field field_7 = com.google.cloud.bigquery.Field
							.newBuilder("service_cost_center_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_7);

					com.google.cloud.bigquery.Field field_8 = com.google.cloud.bigquery.Field
							.newBuilder("site_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_8);

					com.google.cloud.bigquery.Field field_9 = com.google.cloud.bigquery.Field
							.newBuilder("school_district_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_9);

					com.google.cloud.bigquery.Field field_10 = com.google.cloud.bigquery.Field
							.newBuilder("authorization_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_10);

					com.google.cloud.bigquery.Field field_11 = com.google.cloud.bigquery.Field
							.newBuilder("authorized_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_11);

					com.google.cloud.bigquery.Field field_12 = com.google.cloud.bigquery.Field
							.newBuilder("service_authorization_approval",
									com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_12);

					com.google.cloud.bigquery.Field field_13 = com.google.cloud.bigquery.Field
							.newBuilder("service_authorization_date_id",
									com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_13);

					com.google.cloud.bigquery.Field field_14 = com.google.cloud.bigquery.Field
							.newBuilder("Service_Authorization_Expired",
									com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_14);

					com.google.cloud.bigquery.Field field_15 = com.google.cloud.bigquery.Field
							.newBuilder("service_authorization_description",
									com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_15);

					com.google.cloud.bigquery.Field field_16 = com.google.cloud.bigquery.Field
							.newBuilder("company_name", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_16);

					com.google.cloud.bigquery.Field field_17 = com.google.cloud.bigquery.Field
							.newBuilder("service_abbreviation", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_17);

					com.google.cloud.bigquery.Field field_18 = com.google.cloud.bigquery.Field
							.newBuilder("service_code", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_18);

					com.google.cloud.bigquery.Field field_19 = com.google.cloud.bigquery.Field
							.newBuilder("authorized_start_date_id", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_19);

					com.google.cloud.bigquery.Field field_20 = com.google.cloud.bigquery.Field
							.newBuilder("authorized_end_date_id", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_20);

					com.google.cloud.bigquery.Field field_21 = com.google.cloud.bigquery.Field
							.newBuilder("authorization_start_date_id",
									com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_21);

					com.google.cloud.bigquery.Field field_22 = com.google.cloud.bigquery.Field
							.newBuilder("authorization_end_date_id", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_22);

					com.google.cloud.bigquery.Field field_23 = com.google.cloud.bigquery.Field
							.newBuilder("service_program", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_23);

					com.google.cloud.bigquery.Field field_24 = com.google.cloud.bigquery.Field
							.newBuilder("service_place", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_24);

					com.google.cloud.bigquery.Field field_25 = com.google.cloud.bigquery.Field
							.newBuilder("service_is_sum_and_round", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_25);

					com.google.cloud.bigquery.Field field_26 = com.google.cloud.bigquery.Field
							.newBuilder("validate_to_schedules", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_26);

					com.google.cloud.bigquery.Field field_27 = com.google.cloud.bigquery.Field
							.newBuilder("service_minimum_minutes", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_27);

					com.google.cloud.bigquery.Field field_28 = com.google.cloud.bigquery.Field
							.newBuilder("service_units_per_hour", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_28);

					com.google.cloud.bigquery.Field field_29 = com.google.cloud.bigquery.Field
							.newBuilder("service_max_units_total", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_29);

					com.google.cloud.bigquery.Field field_30 = com.google.cloud.bigquery.Field
							.newBuilder("service_auth_max_units_total",
									com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_30);

					com.google.cloud.bigquery.Field field_31 = com.google.cloud.bigquery.Field
							.newBuilder("auth_level_validation", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_31);

					com.google.cloud.bigquery.Field field_32 = com.google.cloud.bigquery.Field
							.newBuilder("total_units_authorized", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_32);

					com.google.cloud.bigquery.Field field_33 = com.google.cloud.bigquery.Field
							.newBuilder("current_rate", com.google.cloud.bigquery.LegacySQLTypeName.FLOAT)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_33);

					com.google.cloud.bigquery.Field field_34 = com.google.cloud.bigquery.Field
							.newBuilder("caregiver_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_34);

					com.google.cloud.bigquery.Field field_35 = com.google.cloud.bigquery.Field
							.newBuilder("inv_stg_service_date_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_35);

					com.google.cloud.bigquery.Field field_36 = com.google.cloud.bigquery.Field
							.newBuilder("in_schedule_note_service_date_id",
									com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_36);

					com.google.cloud.bigquery.Field field_37 = com.google.cloud.bigquery.Field
							.newBuilder("note_date_of_service_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_37);

					com.google.cloud.bigquery.Field field_38 = com.google.cloud.bigquery.Field
							.newBuilder("in_actual_note_service_date_id",
									com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_38);

					com.google.cloud.bigquery.Field field_39 = com.google.cloud.bigquery.Field
							.newBuilder("schedule_duration", com.google.cloud.bigquery.LegacySQLTypeName.TIMESTAMP)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_39);

					com.google.cloud.bigquery.Field field_40 = com.google.cloud.bigquery.Field
							.newBuilder("schedule_start_date_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_40);

					com.google.cloud.bigquery.Field field_41 = com.google.cloud.bigquery.Field
							.newBuilder("schedule_end_date_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_41);

					com.google.cloud.bigquery.Field field_42 = com.google.cloud.bigquery.Field
							.newBuilder("schedule_start_time", com.google.cloud.bigquery.LegacySQLTypeName.TIMESTAMP)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_42);

					com.google.cloud.bigquery.Field field_43 = com.google.cloud.bigquery.Field
							.newBuilder("schedule_end_time", com.google.cloud.bigquery.LegacySQLTypeName.TIMESTAMP)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_43);

					com.google.cloud.bigquery.Field field_44 = com.google.cloud.bigquery.Field
							.newBuilder("schedule_units", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_44);

					com.google.cloud.bigquery.Field field_45 = com.google.cloud.bigquery.Field
							.newBuilder("schedule_status", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_45);

					com.google.cloud.bigquery.Field field_46 = com.google.cloud.bigquery.Field
							.newBuilder("actual_start_date_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_46);

					com.google.cloud.bigquery.Field field_47 = com.google.cloud.bigquery.Field
							.newBuilder("actual_end_date_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_47);

					com.google.cloud.bigquery.Field field_48 = com.google.cloud.bigquery.Field
							.newBuilder("billing_attending_NPI", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_48);

					com.google.cloud.bigquery.Field field_49 = com.google.cloud.bigquery.Field
							.newBuilder("actual_imported", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_49);

					com.google.cloud.bigquery.Field field_50 = com.google.cloud.bigquery.Field
							.newBuilder("actual_hold_pay", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_50);

					com.google.cloud.bigquery.Field field_51 = com.google.cloud.bigquery.Field
							.newBuilder("actual_hold_bill", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_51);

					com.google.cloud.bigquery.Field field_52 = com.google.cloud.bigquery.Field
							.newBuilder("actual_time_sheet_approved",
									com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_52);

					com.google.cloud.bigquery.Field field_53 = com.google.cloud.bigquery.Field
							.newBuilder("actual_note_approved_bl", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_53);

					com.google.cloud.bigquery.Field field_54 = com.google.cloud.bigquery.Field
							.newBuilder("actual_note_approved_pr", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_54);

					com.google.cloud.bigquery.Field field_55 = com.google.cloud.bigquery.Field
							.newBuilder("actual_status_BL", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_55);

					com.google.cloud.bigquery.Field field_56 = com.google.cloud.bigquery.Field
							.newBuilder("actual_emp_pay_type", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_56);

					com.google.cloud.bigquery.Field field_57 = com.google.cloud.bigquery.Field
							.newBuilder("ineligible_for_billing", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_57);

					com.google.cloud.bigquery.Field field_58 = com.google.cloud.bigquery.Field
							.newBuilder("actual_adjustment", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_58);

					com.google.cloud.bigquery.Field field_59 = com.google.cloud.bigquery.Field
							.newBuilder("actual_check_date_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_59);

					com.google.cloud.bigquery.Field field_60 = com.google.cloud.bigquery.Field
							.newBuilder("actual_last_check_date_id",
									com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_60);

					com.google.cloud.bigquery.Field field_61 = com.google.cloud.bigquery.Field
							.newBuilder("actual_paid", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_61);

					com.google.cloud.bigquery.Field field_62 = com.google.cloud.bigquery.Field
							.newBuilder("ineligible_for_payroll", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_62);

					com.google.cloud.bigquery.Field field_63 = com.google.cloud.bigquery.Field
							.newBuilder("actual_invoice_number", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_63);

					com.google.cloud.bigquery.Field field_64 = com.google.cloud.bigquery.Field
							.newBuilder("actual_billed", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_64);

					com.google.cloud.bigquery.Field field_65 = com.google.cloud.bigquery.Field
							.newBuilder("actual_start_time", com.google.cloud.bigquery.LegacySQLTypeName.TIMESTAMP)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_65);

					com.google.cloud.bigquery.Field field_66 = com.google.cloud.bigquery.Field
							.newBuilder("actual_end_time", com.google.cloud.bigquery.LegacySQLTypeName.TIMESTAMP)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_66);

					com.google.cloud.bigquery.Field field_67 = com.google.cloud.bigquery.Field
							.newBuilder("actual_units", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_67);

					com.google.cloud.bigquery.Field field_68 = com.google.cloud.bigquery.Field
							.newBuilder("actual_duration", com.google.cloud.bigquery.LegacySQLTypeName.TIMESTAMP)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_68);

					com.google.cloud.bigquery.Field field_69 = com.google.cloud.bigquery.Field
							.newBuilder("service_billed_date_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_69);

					com.google.cloud.bigquery.Field field_70 = com.google.cloud.bigquery.Field
							.newBuilder("in_process_units_batched", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_70);

					com.google.cloud.bigquery.Field field_71 = com.google.cloud.bigquery.Field
							.newBuilder("note_duration", com.google.cloud.bigquery.LegacySQLTypeName.TIMESTAMP)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_71);

					com.google.cloud.bigquery.Field field_72 = com.google.cloud.bigquery.Field
							.newBuilder("note_end_time", com.google.cloud.bigquery.LegacySQLTypeName.TIMESTAMP)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_72);

					com.google.cloud.bigquery.Field field_73 = com.google.cloud.bigquery.Field
							.newBuilder("note_start_time", com.google.cloud.bigquery.LegacySQLTypeName.TIMESTAMP)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_73);

					com.google.cloud.bigquery.Field field_74 = com.google.cloud.bigquery.Field
							.newBuilder("rate_type", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_74);

					com.google.cloud.bigquery.Field field_75 = com.google.cloud.bigquery.Field
							.newBuilder("first_encounter", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_75);

					com.google.cloud.bigquery.Field field_76 = com.google.cloud.bigquery.Field
							.newBuilder("units_calculated", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_76);

					com.google.cloud.bigquery.Field field_77 = com.google.cloud.bigquery.Field
							.newBuilder("clqnote_has_child", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_77);

					com.google.cloud.bigquery.Field field_78 = com.google.cloud.bigquery.Field
							.newBuilder("missed_shift_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_78);

					com.google.cloud.bigquery.Field field_79 = com.google.cloud.bigquery.Field
							.newBuilder("missed_shift_units", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_79);

					com.google.cloud.bigquery.Field field_80 = com.google.cloud.bigquery.Field
							.newBuilder("billed_units", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_80);

					com.google.cloud.bigquery.Field field_81 = com.google.cloud.bigquery.Field
							.newBuilder("transaction_type", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_81);

					com.google.cloud.bigquery.Field field_82 = com.google.cloud.bigquery.Field
							.newBuilder("transaction_date_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_82);

					com.google.cloud.bigquery.Schema schema_tBigQueryOutput_2 = com.google.cloud.bigquery.Schema
							.of(fields_tBigQueryOutput_2);
					com.google.cloud.bigquery.TableInfo tableInfo_tBigQueryOutput_2 = com.google.cloud.bigquery.TableInfo
							.newBuilder(tableId_tBigQueryOutput_2,
									com.google.cloud.bigquery.StandardTableDefinition.of(schema_tBigQueryOutput_2))
							.build();
					com.google.cloud.bigquery.Table table_tBigQueryOutput_2 = bigquery_tBigQueryOutput_2
							.create(tableInfo_tBigQueryOutput_2);
					loadJobBuilder_tBigQueryOutput_2.setSchema(schema_tBigQueryOutput_2);
					loadJobBuilder_tBigQueryOutput_2
							.setCreateDisposition(com.google.cloud.bigquery.JobInfo.CreateDisposition.CREATE_IF_NEEDED);

				} else {
					loadJobBuilder_tBigQueryOutput_2
							.setCreateDisposition(com.google.cloud.bigquery.JobInfo.CreateDisposition.CREATE_NEVER);
				}

				loadJobBuilder_tBigQueryOutput_2
						.setWriteDisposition(com.google.cloud.bigquery.JobInfo.WriteDisposition.WRITE_TRUNCATE);
				loadJobBuilder_tBigQueryOutput_2.setDestinationTable(tableId_tBigQueryOutput_2);
				com.google.cloud.bigquery.CsvOptions.Builder csvOptions_tBigQueryOutput_2 = com.google.cloud.bigquery.CsvOptions
						.newBuilder();
				csvOptions_tBigQueryOutput_2.setAllowQuotedNewLines(true);
				csvOptions_tBigQueryOutput_2.setSkipLeadingRows(0);

				csvOptions_tBigQueryOutput_2.setFieldDelimiter(",");

				loadJobBuilder_tBigQueryOutput_2.setFormatOptions(csvOptions_tBigQueryOutput_2.build());
				loadJobBuilder_tBigQueryOutput_2.setNullMarker("\\N");
				com.google.cloud.bigquery.Job job_tBigQueryOutput_2 = bigquery_tBigQueryOutput_2
						.create(com.google.cloud.bigquery.JobInfo.of(loadJobBuilder_tBigQueryOutput_2.build()));
				job_tBigQueryOutput_2 = job_tBigQueryOutput_2
						.waitFor(com.google.cloud.RetryOption.initialRetryDelay(org.threeten.bp.Duration.ofSeconds(1)));
				com.google.gson.Gson gsonObject_tBigQueryOutput_2 = new com.google.gson.Gson();
				if (job_tBigQueryOutput_2 != null && job_tBigQueryOutput_2.getStatus().getError() == null) {
					globalMap.put("tBigQueryOutput_2_JOBID", job_tBigQueryOutput_2.getJobId().getJob());
					globalMap.put("tBigQueryOutput_2_STATISTICS",
							gsonObject_tBigQueryOutput_2.toJson(job_tBigQueryOutput_2.getStatistics()));

				} else {
					if (job_tBigQueryOutput_2 == null) {
						throw new RuntimeException("Job no longer exists");
					}
					globalMap.put("tBigQueryOutput_2_JOBID", job_tBigQueryOutput_2.getJobId().getJob());
					globalMap.put("tBigQueryOutput_2_STATISTICS",
							gsonObject_tBigQueryOutput_2.toJson(job_tBigQueryOutput_2.getStatistics()));
					List<com.google.cloud.bigquery.BigQueryError> errorList = job_tBigQueryOutput_2.getStatus()
							.getExecutionErrors();
					throw new RuntimeException("Job failed: " + errorList.get(errorList.size() - 1));
				}

				/* ----END-CREATING-JOB (Cloud API)---- */

				/**
				 * [tBigQueryOutput_2_tBQBE begin ] stop
				 */

				/**
				 * [tBigQueryOutput_2_tBQBE main ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_2";

				currentComponent = "tBigQueryOutput_2_tBQBE";

				tos_count_tBigQueryOutput_2_tBQBE++;

				/**
				 * [tBigQueryOutput_2_tBQBE main ] stop
				 */

				/**
				 * [tBigQueryOutput_2_tBQBE process_data_begin ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_2";

				currentComponent = "tBigQueryOutput_2_tBQBE";

				/**
				 * [tBigQueryOutput_2_tBQBE process_data_begin ] stop
				 */

				/**
				 * [tBigQueryOutput_2_tBQBE process_data_end ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_2";

				currentComponent = "tBigQueryOutput_2_tBQBE";

				/**
				 * [tBigQueryOutput_2_tBQBE process_data_end ] stop
				 */

				/**
				 * [tBigQueryOutput_2_tBQBE end ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_2";

				currentComponent = "tBigQueryOutput_2_tBQBE";

				ok_Hash.put("tBigQueryOutput_2_tBQBE", true);
				end_Hash.put("tBigQueryOutput_2_tBQBE", System.currentTimeMillis());

				/**
				 * [tBigQueryOutput_2_tBQBE end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_2 finally ] start
				 */

				currentComponent = "tDBInput_2";

				/**
				 * [tDBInput_2 finally ] stop
				 */

				/**
				 * [tBigQueryOutput_2_tBQOB finally ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_2";

				currentComponent = "tBigQueryOutput_2_tBQOB";

				if (resourceMap.get("finish_tBigQueryOutput_2_tBQOB") == null) {
					if (resourceMap.get("csvWriter_tBigQueryOutput_2_tBQOB") != null) {
						((com.talend.csv.CSVWriter) resourceMap.get("csvWriter_tBigQueryOutput_2_tBQOB")).close();
					}
				}

				/**
				 * [tBigQueryOutput_2_tBQOB finally ] stop
				 */

				/**
				 * [tBigQueryOutput_2_tBQBE finally ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_2";

				currentComponent = "tBigQueryOutput_2_tBQBE";

				/**
				 * [tBigQueryOutput_2_tBQBE finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	protected PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final load_fact_full load_fact_fullClass = new load_fact_full();

		int exitCode = load_fact_fullClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}
		boolean inOSGi = routines.system.BundleUtils.inOSGi();

		if (inOSGi) {
			java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

			if (jobProperties != null && jobProperties.get("context") != null) {
				contextStr = (String) jobProperties.get("context");
			}
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = load_fact_full.class.getClassLoader()
					.getResourceAsStream("ontarget/load_fact_full_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = load_fact_full.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				try {
					// defaultProps is in order to keep the original context value
					if (context != null && context.isEmpty()) {
						defaultProps.load(inContext);
						context = new ContextProperties(defaultProps);
					}
				} finally {
					inContext.close();
				}
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tDBInput_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_2) {
			globalMap.put("tDBInput_2_SUBPROCESS_STATE", -1);

			e_tDBInput_2.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println(
					(endUsedMemory - startUsedMemory) + " bytes memory increase when running : load_fact_full");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;

		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 205263 characters generated by Talend Open Studio for Data Integration on the
 * July 18, 2022 at 3:43:36 PM CDT
 ************************************************************************************************/