// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package ontarget.load_dim_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.TalendDate;
import routines.Relational;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: load_dim Purpose: load dimension table<br>
 * Description: this job loads all dimension tables for BigQuery <br>
 * 
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status
 */
public class load_dim implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

		// if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if (NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "load_dim";
	private final String projectName = "ONTARGET";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	public void setDataSourceReferences(List serviceReferences) throws Exception {

		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();

		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils
				.getServices(serviceReferences, javax.sql.DataSource.class).entrySet()) {
			dataSources.put(entry.getKey(), entry.getValue());
			talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					load_dim.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(load_dim.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tBigQueryOutput_1_tBQOB_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tBigQueryOutput_1_tBQBE_error(exception, errorComponent, globalMap);

	}

	public void tBigQueryOutput_1_tBQBE_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tBigQueryOutput_2_tBQOB_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tBigQueryOutput_2_tBQBE_error(exception, errorComponent, globalMap);

	}

	public void tBigQueryOutput_2_tBQBE_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tBigQueryOutput_3_tBQOB_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tBigQueryOutput_3_tBQBE_error(exception, errorComponent, globalMap);

	}

	public void tBigQueryOutput_3_tBQBE_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tBigQueryOutput_4_tBQOB_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tBigQueryOutput_4_tBQBE_error(exception, errorComponent, globalMap);

	}

	public void tBigQueryOutput_4_tBQBE_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tBigQueryOutput_5_tBQOB_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tBigQueryOutput_5_tBQBE_error(exception, errorComponent, globalMap);

	}

	public void tBigQueryOutput_5_tBQBE_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tBigQueryOutput_6_tBQOB_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tBigQueryOutput_6_tBQBE_error(exception, errorComponent, globalMap);

	}

	public void tBigQueryOutput_6_tBQBE_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tBigQueryOutput_7_tBQOB_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tBigQueryOutput_7_tBQBE_error(exception, errorComponent, globalMap);

	}

	public void tBigQueryOutput_7_tBQBE_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tBigQueryOutput_8_tBQOB_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tBigQueryOutput_8_tBQBE_error(exception, errorComponent, globalMap);

	}

	public void tBigQueryOutput_8_tBQBE_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tBigQueryOutput_9_tBQOB_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tBigQueryOutput_9_tBQBE_error(exception, errorComponent, globalMap);

	}

	public void tBigQueryOutput_9_tBQBE_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_4_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_5_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_6_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_7_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_8_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_9_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_ONTARGET_load_dim = new byte[0];
		static byte[] commonByteArray_ONTARGET_load_dim = new byte[0];

		public String DW_ID;

		public String getDW_ID() {
			return this.DW_ID;
		}

		public String SRC_ERP_SCHEMA;

		public String getSRC_ERP_SCHEMA() {
			return this.SRC_ERP_SCHEMA;
		}

		public String SRC_ERP_ID;

		public String getSRC_ERP_ID() {
			return this.SRC_ERP_ID;
		}

		public Integer school_district_id;

		public Integer getSchool_district_id() {
			return this.school_district_id;
		}

		public Integer client_cost_center_id;

		public Integer getClient_cost_center_id() {
			return this.client_cost_center_id;
		}

		public String First_Name;

		public String getFirst_Name() {
			return this.First_Name;
		}

		public String Middle_Name;

		public String getMiddle_Name() {
			return this.Middle_Name;
		}

		public String Last_Name;

		public String getLast_Name() {
			return this.Last_Name;
		}

		public Boolean Inactive;

		public Boolean getInactive() {
			return this.Inactive;
		}

		public String Address_1;

		public String getAddress_1() {
			return this.Address_1;
		}

		public String Address_2;

		public String getAddress_2() {
			return this.Address_2;
		}

		public String City;

		public String getCity() {
			return this.City;
		}

		public String State;

		public String getState() {
			return this.State;
		}

		public String Zip_Code;

		public String getZip_Code() {
			return this.Zip_Code;
		}

		public Integer Date_Of_Birth;

		public Integer getDate_Of_Birth() {
			return this.Date_Of_Birth;
		}

		public Boolean family_interview_required;

		public Boolean getFamily_interview_required() {
			return this.family_interview_required;
		}

		public String caregiver_summary;

		public String getCaregiver_summary() {
			return this.caregiver_summary;
		}

		public String personal_care_support;

		public String getPersonal_care_support() {
			return this.personal_care_support;
		}

		public String behaviral_support;

		public String getBehaviral_support() {
			return this.behaviral_support;
		}

		public String gender;

		public String getGender() {
			return this.gender;
		}

		public String lifting_required;

		public String getLifting_required() {
			return this.lifting_required;
		}

		public Long last_insert_ts;

		public Long getLast_insert_ts() {
			return this.last_insert_ts;
		}

		public Long last_update_ts;

		public Long getLast_update_ts() {
			return this.last_update_ts;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ONTARGET_load_dim.length) {
					if (length < 1024 && commonByteArray_ONTARGET_load_dim.length == 0) {
						commonByteArray_ONTARGET_load_dim = new byte[1024];
					} else {
						commonByteArray_ONTARGET_load_dim = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ONTARGET_load_dim, 0, length);
				strReturn = new String(commonByteArray_ONTARGET_load_dim, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ONTARGET_load_dim.length) {
					if (length < 1024 && commonByteArray_ONTARGET_load_dim.length == 0) {
						commonByteArray_ONTARGET_load_dim = new byte[1024];
					} else {
						commonByteArray_ONTARGET_load_dim = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_ONTARGET_load_dim, 0, length);
				strReturn = new String(commonByteArray_ONTARGET_load_dim, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ONTARGET_load_dim) {

				try {

					int length = 0;

					this.DW_ID = readString(dis);

					this.SRC_ERP_SCHEMA = readString(dis);

					this.SRC_ERP_ID = readString(dis);

					this.school_district_id = readInteger(dis);

					this.client_cost_center_id = readInteger(dis);

					this.First_Name = readString(dis);

					this.Middle_Name = readString(dis);

					this.Last_Name = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Inactive = null;
					} else {
						this.Inactive = dis.readBoolean();
					}

					this.Address_1 = readString(dis);

					this.Address_2 = readString(dis);

					this.City = readString(dis);

					this.State = readString(dis);

					this.Zip_Code = readString(dis);

					this.Date_Of_Birth = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.family_interview_required = null;
					} else {
						this.family_interview_required = dis.readBoolean();
					}

					this.caregiver_summary = readString(dis);

					this.personal_care_support = readString(dis);

					this.behaviral_support = readString(dis);

					this.gender = readString(dis);

					this.lifting_required = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.last_insert_ts = null;
					} else {
						this.last_insert_ts = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.last_update_ts = null;
					} else {
						this.last_update_ts = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ONTARGET_load_dim) {

				try {

					int length = 0;

					this.DW_ID = readString(dis);

					this.SRC_ERP_SCHEMA = readString(dis);

					this.SRC_ERP_ID = readString(dis);

					this.school_district_id = readInteger(dis);

					this.client_cost_center_id = readInteger(dis);

					this.First_Name = readString(dis);

					this.Middle_Name = readString(dis);

					this.Last_Name = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Inactive = null;
					} else {
						this.Inactive = dis.readBoolean();
					}

					this.Address_1 = readString(dis);

					this.Address_2 = readString(dis);

					this.City = readString(dis);

					this.State = readString(dis);

					this.Zip_Code = readString(dis);

					this.Date_Of_Birth = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.family_interview_required = null;
					} else {
						this.family_interview_required = dis.readBoolean();
					}

					this.caregiver_summary = readString(dis);

					this.personal_care_support = readString(dis);

					this.behaviral_support = readString(dis);

					this.gender = readString(dis);

					this.lifting_required = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.last_insert_ts = null;
					} else {
						this.last_insert_ts = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.last_update_ts = null;
					} else {
						this.last_update_ts = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.DW_ID, dos);

				// String

				writeString(this.SRC_ERP_SCHEMA, dos);

				// String

				writeString(this.SRC_ERP_ID, dos);

				// Integer

				writeInteger(this.school_district_id, dos);

				// Integer

				writeInteger(this.client_cost_center_id, dos);

				// String

				writeString(this.First_Name, dos);

				// String

				writeString(this.Middle_Name, dos);

				// String

				writeString(this.Last_Name, dos);

				// Boolean

				if (this.Inactive == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.Inactive);
				}

				// String

				writeString(this.Address_1, dos);

				// String

				writeString(this.Address_2, dos);

				// String

				writeString(this.City, dos);

				// String

				writeString(this.State, dos);

				// String

				writeString(this.Zip_Code, dos);

				// Integer

				writeInteger(this.Date_Of_Birth, dos);

				// Boolean

				if (this.family_interview_required == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.family_interview_required);
				}

				// String

				writeString(this.caregiver_summary, dos);

				// String

				writeString(this.personal_care_support, dos);

				// String

				writeString(this.behaviral_support, dos);

				// String

				writeString(this.gender, dos);

				// String

				writeString(this.lifting_required, dos);

				// Long

				if (this.last_insert_ts == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.last_insert_ts);
				}

				// Long

				if (this.last_update_ts == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.last_update_ts);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.DW_ID, dos);

				// String

				writeString(this.SRC_ERP_SCHEMA, dos);

				// String

				writeString(this.SRC_ERP_ID, dos);

				// Integer

				writeInteger(this.school_district_id, dos);

				// Integer

				writeInteger(this.client_cost_center_id, dos);

				// String

				writeString(this.First_Name, dos);

				// String

				writeString(this.Middle_Name, dos);

				// String

				writeString(this.Last_Name, dos);

				// Boolean

				if (this.Inactive == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.Inactive);
				}

				// String

				writeString(this.Address_1, dos);

				// String

				writeString(this.Address_2, dos);

				// String

				writeString(this.City, dos);

				// String

				writeString(this.State, dos);

				// String

				writeString(this.Zip_Code, dos);

				// Integer

				writeInteger(this.Date_Of_Birth, dos);

				// Boolean

				if (this.family_interview_required == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.family_interview_required);
				}

				// String

				writeString(this.caregiver_summary, dos);

				// String

				writeString(this.personal_care_support, dos);

				// String

				writeString(this.behaviral_support, dos);

				// String

				writeString(this.gender, dos);

				// String

				writeString(this.lifting_required, dos);

				// Long

				if (this.last_insert_ts == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.last_insert_ts);
				}

				// Long

				if (this.last_update_ts == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.last_update_ts);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("DW_ID=" + DW_ID);
			sb.append(",SRC_ERP_SCHEMA=" + SRC_ERP_SCHEMA);
			sb.append(",SRC_ERP_ID=" + SRC_ERP_ID);
			sb.append(",school_district_id=" + String.valueOf(school_district_id));
			sb.append(",client_cost_center_id=" + String.valueOf(client_cost_center_id));
			sb.append(",First_Name=" + First_Name);
			sb.append(",Middle_Name=" + Middle_Name);
			sb.append(",Last_Name=" + Last_Name);
			sb.append(",Inactive=" + String.valueOf(Inactive));
			sb.append(",Address_1=" + Address_1);
			sb.append(",Address_2=" + Address_2);
			sb.append(",City=" + City);
			sb.append(",State=" + State);
			sb.append(",Zip_Code=" + Zip_Code);
			sb.append(",Date_Of_Birth=" + String.valueOf(Date_Of_Birth));
			sb.append(",family_interview_required=" + String.valueOf(family_interview_required));
			sb.append(",caregiver_summary=" + caregiver_summary);
			sb.append(",personal_care_support=" + personal_care_support);
			sb.append(",behaviral_support=" + behaviral_support);
			sb.append(",gender=" + gender);
			sb.append(",lifting_required=" + lifting_required);
			sb.append(",last_insert_ts=" + String.valueOf(last_insert_ts));
			sb.append(",last_update_ts=" + String.valueOf(last_update_ts));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();

				/**
				 * [tBigQueryOutput_1_tBQOB begin ] start
				 */

				ok_Hash.put("tBigQueryOutput_1_tBQOB", false);
				start_Hash.put("tBigQueryOutput_1_tBQOB", System.currentTimeMillis());

				currentVirtualComponent = "tBigQueryOutput_1";

				currentComponent = "tBigQueryOutput_1_tBQOB";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tBigQueryOutput_1_tBQOB = 0;

				int nb_line_tBigQueryOutput_1_tBQOB = 0;
				String rowSeparator_tBigQueryOutput_1_tBQOB = "\n";
				String fieldSeparator_tBigQueryOutput_1_tBQOB = ",";
				char escapeChar_tBigQueryOutput_1_tBQOB = "\\".charAt(0);
				char textEnclosure_tBigQueryOutput_1_tBQOB = "\"".charAt(0);

				escapeChar_tBigQueryOutput_1_tBQOB = textEnclosure_tBigQueryOutput_1_tBQOB;

				if (escapeChar_tBigQueryOutput_1_tBQOB == '\\') {
				} else if (escapeChar_tBigQueryOutput_1_tBQOB == textEnclosure_tBigQueryOutput_1_tBQOB) {
				} else {
					throw new RuntimeException("The escape mode only support the '\\' or double text enclosure.");
				}

				java.io.File file_tBigQueryOutput_1_tBQOB = new java.io.File(
						"/Applications/TOSDI-8.0.1/studio/workspace/client_data.avro");

				file_tBigQueryOutput_1_tBQOB.getParentFile().mkdirs();

				com.talend.csv.CSVWriter csvWriter_tBigQueryOutput_1_tBQOB = new com.talend.csv.CSVWriter(
						new java.io.BufferedWriter(new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(file_tBigQueryOutput_1_tBQOB, false), "ISO-8859-15")));
				resourceMap.put("csvWriter_tBigQueryOutput_1_tBQOB", csvWriter_tBigQueryOutput_1_tBQOB);
				csvWriter_tBigQueryOutput_1_tBQOB.setSeparator(fieldSeparator_tBigQueryOutput_1_tBQOB.charAt(0));

				csvWriter_tBigQueryOutput_1_tBQOB.setLineEnd(rowSeparator_tBigQueryOutput_1_tBQOB);
				csvWriter_tBigQueryOutput_1_tBQOB.setEscapeChar(escapeChar_tBigQueryOutput_1_tBQOB);
				csvWriter_tBigQueryOutput_1_tBQOB.setQuoteChar(textEnclosure_tBigQueryOutput_1_tBQOB);
				csvWriter_tBigQueryOutput_1_tBQOB.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.AUTO);

				/**
				 * [tBigQueryOutput_1_tBQOB begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = "postgres";

				final String decryptedPassword_tDBInput_1 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:4fN6XGGILqobP5NHVxp4APKTyyiaoBJNf9WyvqG4xJgfV1I0Bgc=");

				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;

				String url_tDBInput_1 = "jdbc:postgresql://" + "localhost" + ":" + "5431" + "/" + "OnTarget";

				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1, dbUser_tDBInput_1,
						dbPwd_tDBInput_1);

				conn_tDBInput_1.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

				String dbquery_tDBInput_1 = "select cast(md5('smallmiracle_dim_client_'||cast(client.id as varchar(10))) as varchar(100)) as DW_ID, \n        'smallm"
						+ "iracle' as SRC_ERP_SCHEMA,\n        cast(client.id as varchar(10)) as SRC_ERP_ID,\n        cast(coalesce(client.schooldist"
						+ "rictid,-1) as int) as school_district_id,\n        cast(coalesce(client.prbuscostcenterid,-1) as int) as client_cost_cent"
						+ "er_id,\n        client.namefirst as First_Name,\n        client.namemi as Middle_Name,\n        client.namelast as Last_Nam"
						+ "e,\n        client.inactive as Inactive,\n        client.address1 as Address_1,\n        client.address2 as Address_2,\n    "
						+ "    client.city as City,\n        client.State as State,\n        client.zipcode as Zip_Code,\n        cast(to_char(date(cl"
						+ "ient.DOB),'YYYYMMDD') as int) as Date_Of_Birth,\n        client.familyinterviewrequired as family_interview_required,\n   "
						+ "     client.caregiversummary as caregiver_summary,\n        psupport.description as personal_care_support,\n        bsuppo"
						+ "rt.description as behavioral_support,\n        cgender.description as gender,\n        clifting.description as lifting_req"
						+ "uired,\n        cast(to_char((current_timestamp)::TIMESTAMP,'yyyymmddhhmiss') as BigInt) as last_insert_ts,\n        cast("
						+ "19000101000000 as bigint) as last_update_ts\n        from smallmiracle.clclient client\n        LEFT JOIN smallmiracle.clc"
						+ "aregiverpersonalcaresupport psupport ON client.clcaregiverpersonalcaresupportid = psupport.id\n        LEFT JOIN smallmir"
						+ "acle.clcaregiverbehavioralsupport bsupport ON client.clcaregiverbehavioralsupportid = bsupport.id\n        LEFT JOIN smal"
						+ "lmiracle.clcaregivergender cgender ON client.clcaregivergenderid = cgender.id\n        LEFT JOIN smallmiracle.clcaregiver"
						+ "lifting clifting ON client.clcaregiverliftingid = clifting.id";

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							row1.DW_ID = null;
						} else {

							row1.DW_ID = routines.system.JDBCUtil.getString(rs_tDBInput_1, 1, false);
						}
						if (colQtyInRs_tDBInput_1 < 2) {
							row1.SRC_ERP_SCHEMA = null;
						} else {

							row1.SRC_ERP_SCHEMA = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
						}
						if (colQtyInRs_tDBInput_1 < 3) {
							row1.SRC_ERP_ID = null;
						} else {

							row1.SRC_ERP_ID = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, false);
						}
						if (colQtyInRs_tDBInput_1 < 4) {
							row1.school_district_id = null;
						} else {

							row1.school_district_id = rs_tDBInput_1.getInt(4);
							if (rs_tDBInput_1.wasNull()) {
								row1.school_district_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 5) {
							row1.client_cost_center_id = null;
						} else {

							row1.client_cost_center_id = rs_tDBInput_1.getInt(5);
							if (rs_tDBInput_1.wasNull()) {
								row1.client_cost_center_id = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 6) {
							row1.First_Name = null;
						} else {

							row1.First_Name = routines.system.JDBCUtil.getString(rs_tDBInput_1, 6, false);
						}
						if (colQtyInRs_tDBInput_1 < 7) {
							row1.Middle_Name = null;
						} else {

							row1.Middle_Name = routines.system.JDBCUtil.getString(rs_tDBInput_1, 7, false);
						}
						if (colQtyInRs_tDBInput_1 < 8) {
							row1.Last_Name = null;
						} else {

							row1.Last_Name = routines.system.JDBCUtil.getString(rs_tDBInput_1, 8, false);
						}
						if (colQtyInRs_tDBInput_1 < 9) {
							row1.Inactive = null;
						} else {

							row1.Inactive = rs_tDBInput_1.getBoolean(9);
							if (rs_tDBInput_1.wasNull()) {
								row1.Inactive = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 10) {
							row1.Address_1 = null;
						} else {

							row1.Address_1 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 10, false);
						}
						if (colQtyInRs_tDBInput_1 < 11) {
							row1.Address_2 = null;
						} else {

							row1.Address_2 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 11, false);
						}
						if (colQtyInRs_tDBInput_1 < 12) {
							row1.City = null;
						} else {

							row1.City = routines.system.JDBCUtil.getString(rs_tDBInput_1, 12, false);
						}
						if (colQtyInRs_tDBInput_1 < 13) {
							row1.State = null;
						} else {

							row1.State = routines.system.JDBCUtil.getString(rs_tDBInput_1, 13, false);
						}
						if (colQtyInRs_tDBInput_1 < 14) {
							row1.Zip_Code = null;
						} else {

							row1.Zip_Code = routines.system.JDBCUtil.getString(rs_tDBInput_1, 14, false);
						}
						if (colQtyInRs_tDBInput_1 < 15) {
							row1.Date_Of_Birth = null;
						} else {

							row1.Date_Of_Birth = rs_tDBInput_1.getInt(15);
							if (rs_tDBInput_1.wasNull()) {
								row1.Date_Of_Birth = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 16) {
							row1.family_interview_required = null;
						} else {

							row1.family_interview_required = rs_tDBInput_1.getBoolean(16);
							if (rs_tDBInput_1.wasNull()) {
								row1.family_interview_required = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 17) {
							row1.caregiver_summary = null;
						} else {

							row1.caregiver_summary = routines.system.JDBCUtil.getString(rs_tDBInput_1, 17, false);
						}
						if (colQtyInRs_tDBInput_1 < 18) {
							row1.personal_care_support = null;
						} else {

							row1.personal_care_support = routines.system.JDBCUtil.getString(rs_tDBInput_1, 18, false);
						}
						if (colQtyInRs_tDBInput_1 < 19) {
							row1.behaviral_support = null;
						} else {

							row1.behaviral_support = routines.system.JDBCUtil.getString(rs_tDBInput_1, 19, false);
						}
						if (colQtyInRs_tDBInput_1 < 20) {
							row1.gender = null;
						} else {

							row1.gender = routines.system.JDBCUtil.getString(rs_tDBInput_1, 20, false);
						}
						if (colQtyInRs_tDBInput_1 < 21) {
							row1.lifting_required = null;
						} else {

							row1.lifting_required = routines.system.JDBCUtil.getString(rs_tDBInput_1, 21, false);
						}
						if (colQtyInRs_tDBInput_1 < 22) {
							row1.last_insert_ts = null;
						} else {

							row1.last_insert_ts = rs_tDBInput_1.getLong(22);
							if (rs_tDBInput_1.wasNull()) {
								row1.last_insert_ts = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 23) {
							row1.last_update_ts = null;
						} else {

							row1.last_update_ts = rs_tDBInput_1.getLong(23);
							if (rs_tDBInput_1.wasNull()) {
								row1.last_update_ts = null;
							}
						}

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tBigQueryOutput_1_tBQOB main ] start
						 */

						currentVirtualComponent = "tBigQueryOutput_1";

						currentComponent = "tBigQueryOutput_1_tBQOB";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row1"

							);
						}

						String[] row_tBigQueryOutput_1_tBQOB = new String[23];
						java.util.Arrays.fill(row_tBigQueryOutput_1_tBQOB, "\\N");

						int curColumnIndex_tBigQueryOutput_1_tBQOB = 0;

						curColumnIndex_tBigQueryOutput_1_tBQOB = 0;

						if (row1.DW_ID != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = row1.DW_ID;

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 1;

						if (row1.SRC_ERP_SCHEMA != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = row1.SRC_ERP_SCHEMA;

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 2;

						if (row1.SRC_ERP_ID != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = row1.SRC_ERP_ID;

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 3;

						if (row1.school_district_id != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = String
									.valueOf(row1.school_district_id);

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 4;

						if (row1.client_cost_center_id != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = String
									.valueOf(row1.client_cost_center_id);

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 5;

						if (row1.First_Name != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = row1.First_Name;

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 6;

						if (row1.Middle_Name != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = row1.Middle_Name;

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 7;

						if (row1.Last_Name != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = row1.Last_Name;

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 8;

						if (row1.Inactive != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = String
									.valueOf(true == row1.Inactive ? "1" : "0");

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 9;

						if (row1.Address_1 != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = row1.Address_1;

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 10;

						if (row1.Address_2 != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = row1.Address_2;

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 11;

						if (row1.City != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = row1.City;

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 12;

						if (row1.State != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = row1.State;

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 13;

						if (row1.Zip_Code != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = row1.Zip_Code;

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 14;

						if (row1.Date_Of_Birth != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = String
									.valueOf(row1.Date_Of_Birth);

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 15;

						if (row1.family_interview_required != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = String
									.valueOf(true == row1.family_interview_required ? "1" : "0");

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 16;

						if (row1.caregiver_summary != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = row1.caregiver_summary;

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 17;

						if (row1.personal_care_support != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = row1.personal_care_support;

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 18;

						if (row1.behaviral_support != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = row1.behaviral_support;

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 19;

						if (row1.gender != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = row1.gender;

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 20;

						if (row1.lifting_required != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = row1.lifting_required;

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 21;

						if (row1.last_insert_ts != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = String
									.valueOf(row1.last_insert_ts);

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_1_tBQOB = 22;

						if (row1.last_update_ts != null) {

							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = String
									.valueOf(row1.last_update_ts);

						} else {
							row_tBigQueryOutput_1_tBQOB[curColumnIndex_tBigQueryOutput_1_tBQOB] = "\\N";
						}

						csvWriter_tBigQueryOutput_1_tBQOB.writeNextEnhance(row_tBigQueryOutput_1_tBQOB, "");
						nb_line_tBigQueryOutput_1_tBQOB++;

						tos_count_tBigQueryOutput_1_tBQOB++;

						/**
						 * [tBigQueryOutput_1_tBQOB main ] stop
						 */

						/**
						 * [tBigQueryOutput_1_tBQOB process_data_begin ] start
						 */

						currentVirtualComponent = "tBigQueryOutput_1";

						currentComponent = "tBigQueryOutput_1_tBQOB";

						/**
						 * [tBigQueryOutput_1_tBQOB process_data_begin ] stop
						 */

						/**
						 * [tBigQueryOutput_1_tBQOB process_data_end ] start
						 */

						currentVirtualComponent = "tBigQueryOutput_1";

						currentComponent = "tBigQueryOutput_1_tBQOB";

						/**
						 * [tBigQueryOutput_1_tBQOB process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					if (rs_tDBInput_1 != null) {
						rs_tDBInput_1.close();
					}
					if (stmt_tDBInput_1 != null) {
						stmt_tDBInput_1.close();
					}
					if (conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {

						conn_tDBInput_1.commit();

						conn_tDBInput_1.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}
				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tBigQueryOutput_1_tBQOB end ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_1";

				currentComponent = "tBigQueryOutput_1_tBQOB";

				if (csvWriter_tBigQueryOutput_1_tBQOB != null) {
					csvWriter_tBigQueryOutput_1_tBQOB.close();
				}
				resourceMap.put("finish_tBigQueryOutput_1_tBQOB", true);
				globalMap.put("tBigQueryOutput_1_tBQOB_NB_LINE", nb_line_tBigQueryOutput_1_tBQOB);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tBigQueryOutput_1_tBQOB", true);
				end_Hash.put("tBigQueryOutput_1_tBQOB", System.currentTimeMillis());

				/**
				 * [tBigQueryOutput_1_tBQOB end ] stop
				 */

				/**
				 * [tBigQueryOutput_1_tBQBE begin ] start
				 */

				ok_Hash.put("tBigQueryOutput_1_tBQBE", false);
				start_Hash.put("tBigQueryOutput_1_tBQBE", System.currentTimeMillis());

				currentVirtualComponent = "tBigQueryOutput_1";

				currentComponent = "tBigQueryOutput_1_tBQBE";

				int tos_count_tBigQueryOutput_1_tBQBE = 0;

				/* ----START-CREATING-CLIENT (Cloud API)---- */

				com.google.auth.oauth2.GoogleCredentials credentials_tBigQueryOutput_1;
				java.io.File credentialsFile_tBigQueryOutput_1 = new java.io.File(
						"/Users/jsun/Documents/WCIWork/OnTarget/code/otmirror-060322-9471bb896012.json");
				try (java.io.FileInputStream credentialsStream_tBigQueryOutput_1 = new java.io.FileInputStream(
						credentialsFile_tBigQueryOutput_1)) {
					credentials_tBigQueryOutput_1 = com.google.auth.oauth2.ServiceAccountCredentials
							.fromStream(credentialsStream_tBigQueryOutput_1);
				}

				com.google.cloud.bigquery.BigQuery bigquery_tBigQueryOutput_1 = com.google.cloud.bigquery.BigQueryOptions
						.newBuilder().setCredentials(credentials_tBigQueryOutput_1).setProjectId("otmirror-060322")
						.build().getService();

				/* ----END-CREATING-CLIENT (Cloud API)---- */

				long nb_line_tBigQueryOutput_1 = 0;

				com.google.auth.Credentials credential_tBigQueryOutput_1 = null;
				try {
					credential_tBigQueryOutput_1 = com.google.auth.oauth2.GoogleCredentials
							.fromStream(new java.io.FileInputStream(
									"/Users/jsun/Documents/WCIWork/OnTarget/code/otmirror-060322-9471bb896012.json"));
				} catch (IOException e_tBigQueryOutput_1) {
					globalMap.put("tBigQueryOutput_1_ERROR_MESSAGE", e_tBigQueryOutput_1.getMessage());
				}
				com.google.cloud.storage.Storage storage_tBigQueryOutput_1 = com.google.cloud.storage.StorageOptions
						.newBuilder().setCredentials(credential_tBigQueryOutput_1).build().getService();

				java.io.File file_tBigQueryOutput_1 = new java.io.File(
						"/Applications/TOSDI-8.0.1/studio/workspace/client_data.avro");

				com.google.cloud.storage.BlobInfo blobInfo_tBigQueryOutput_1 = com.google.cloud.storage.BlobInfo
						.newBuilder("dw-tmp", file_tBigQueryOutput_1.getName()).build();
				storage_tBigQueryOutput_1.create(blobInfo_tBigQueryOutput_1,
						java.nio.file.Files.readAllBytes(file_tBigQueryOutput_1.toPath()));

				/* ----END-UPLOADING-FILE---- */

				/* ----START-CREATING-JOB (Cloud API)---- */
				com.google.cloud.bigquery.TableId tableId_tBigQueryOutput_1 = com.google.cloud.bigquery.TableId
						.of("otmirror-060322", "DW", "dim_client");
				com.google.cloud.bigquery.LoadJobConfiguration.Builder loadJobBuilder_tBigQueryOutput_1 = com.google.cloud.bigquery.LoadJobConfiguration
						.newBuilder(tableId_tBigQueryOutput_1, "gs://dw-tmp/client_data.avro");

				boolean dropTable_tBigQueryOutput_1 = false;

				if (dropTable_tBigQueryOutput_1
						&& bigquery_tBigQueryOutput_1.getTable(tableId_tBigQueryOutput_1) != null) {
					boolean deleted = bigquery_tBigQueryOutput_1.delete(tableId_tBigQueryOutput_1);
					if (deleted) {

					} else {
						throw new RuntimeException("Unable to delete table " + tableId_tBigQueryOutput_1);
					}
				}

				if (bigquery_tBigQueryOutput_1.getTable(tableId_tBigQueryOutput_1) == null) {
					java.util.List<com.google.cloud.bigquery.Field> fields_tBigQueryOutput_1 = new java.util.ArrayList<>();

					com.google.cloud.bigquery.Field field_0 = com.google.cloud.bigquery.Field
							.newBuilder("DW_ID", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_0);

					com.google.cloud.bigquery.Field field_1 = com.google.cloud.bigquery.Field
							.newBuilder("SRC_ERP_SCHEMA", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_1);

					com.google.cloud.bigquery.Field field_2 = com.google.cloud.bigquery.Field
							.newBuilder("SRC_ERP_ID", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_2);

					com.google.cloud.bigquery.Field field_3 = com.google.cloud.bigquery.Field
							.newBuilder("school_district_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_3);

					com.google.cloud.bigquery.Field field_4 = com.google.cloud.bigquery.Field
							.newBuilder("client_cost_center_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_4);

					com.google.cloud.bigquery.Field field_5 = com.google.cloud.bigquery.Field
							.newBuilder("First_Name", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_5);

					com.google.cloud.bigquery.Field field_6 = com.google.cloud.bigquery.Field
							.newBuilder("Middle_Name", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_6);

					com.google.cloud.bigquery.Field field_7 = com.google.cloud.bigquery.Field
							.newBuilder("Last_Name", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_7);

					com.google.cloud.bigquery.Field field_8 = com.google.cloud.bigquery.Field
							.newBuilder("Inactive", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_8);

					com.google.cloud.bigquery.Field field_9 = com.google.cloud.bigquery.Field
							.newBuilder("Address_1", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_9);

					com.google.cloud.bigquery.Field field_10 = com.google.cloud.bigquery.Field
							.newBuilder("Address_2", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_10);

					com.google.cloud.bigquery.Field field_11 = com.google.cloud.bigquery.Field
							.newBuilder("City", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_11);

					com.google.cloud.bigquery.Field field_12 = com.google.cloud.bigquery.Field
							.newBuilder("State", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_12);

					com.google.cloud.bigquery.Field field_13 = com.google.cloud.bigquery.Field
							.newBuilder("Zip_Code", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_13);

					com.google.cloud.bigquery.Field field_14 = com.google.cloud.bigquery.Field
							.newBuilder("Date_Of_Birth", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_14);

					com.google.cloud.bigquery.Field field_15 = com.google.cloud.bigquery.Field
							.newBuilder("family_interview_required",
									com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_15);

					com.google.cloud.bigquery.Field field_16 = com.google.cloud.bigquery.Field
							.newBuilder("caregiver_summary", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_16);

					com.google.cloud.bigquery.Field field_17 = com.google.cloud.bigquery.Field
							.newBuilder("personal_care_support", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_17);

					com.google.cloud.bigquery.Field field_18 = com.google.cloud.bigquery.Field
							.newBuilder("behaviral_support", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_18);

					com.google.cloud.bigquery.Field field_19 = com.google.cloud.bigquery.Field
							.newBuilder("gender", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_19);

					com.google.cloud.bigquery.Field field_20 = com.google.cloud.bigquery.Field
							.newBuilder("lifting_required", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_20);

					com.google.cloud.bigquery.Field field_21 = com.google.cloud.bigquery.Field
							.newBuilder("last_insert_ts", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_21);

					com.google.cloud.bigquery.Field field_22 = com.google.cloud.bigquery.Field
							.newBuilder("last_update_ts", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_1.add(field_22);

					com.google.cloud.bigquery.Schema schema_tBigQueryOutput_1 = com.google.cloud.bigquery.Schema
							.of(fields_tBigQueryOutput_1);
					com.google.cloud.bigquery.TableInfo tableInfo_tBigQueryOutput_1 = com.google.cloud.bigquery.TableInfo
							.newBuilder(tableId_tBigQueryOutput_1,
									com.google.cloud.bigquery.StandardTableDefinition.of(schema_tBigQueryOutput_1))
							.build();
					com.google.cloud.bigquery.Table table_tBigQueryOutput_1 = bigquery_tBigQueryOutput_1
							.create(tableInfo_tBigQueryOutput_1);
					loadJobBuilder_tBigQueryOutput_1.setSchema(schema_tBigQueryOutput_1);
					loadJobBuilder_tBigQueryOutput_1
							.setCreateDisposition(com.google.cloud.bigquery.JobInfo.CreateDisposition.CREATE_IF_NEEDED);

				} else {
					loadJobBuilder_tBigQueryOutput_1
							.setCreateDisposition(com.google.cloud.bigquery.JobInfo.CreateDisposition.CREATE_NEVER);
				}

				loadJobBuilder_tBigQueryOutput_1
						.setWriteDisposition(com.google.cloud.bigquery.JobInfo.WriteDisposition.WRITE_TRUNCATE);
				loadJobBuilder_tBigQueryOutput_1.setDestinationTable(tableId_tBigQueryOutput_1);
				com.google.cloud.bigquery.CsvOptions.Builder csvOptions_tBigQueryOutput_1 = com.google.cloud.bigquery.CsvOptions
						.newBuilder();
				csvOptions_tBigQueryOutput_1.setAllowQuotedNewLines(true);
				csvOptions_tBigQueryOutput_1.setSkipLeadingRows(0);

				csvOptions_tBigQueryOutput_1.setFieldDelimiter(",");

				loadJobBuilder_tBigQueryOutput_1.setFormatOptions(csvOptions_tBigQueryOutput_1.build());
				loadJobBuilder_tBigQueryOutput_1.setNullMarker("\\N");
				com.google.cloud.bigquery.Job job_tBigQueryOutput_1 = bigquery_tBigQueryOutput_1
						.create(com.google.cloud.bigquery.JobInfo.of(loadJobBuilder_tBigQueryOutput_1.build()));
				job_tBigQueryOutput_1 = job_tBigQueryOutput_1
						.waitFor(com.google.cloud.RetryOption.initialRetryDelay(org.threeten.bp.Duration.ofSeconds(1)));
				com.google.gson.Gson gsonObject_tBigQueryOutput_1 = new com.google.gson.Gson();
				if (job_tBigQueryOutput_1 != null && job_tBigQueryOutput_1.getStatus().getError() == null) {
					globalMap.put("tBigQueryOutput_1_JOBID", job_tBigQueryOutput_1.getJobId().getJob());
					globalMap.put("tBigQueryOutput_1_STATISTICS",
							gsonObject_tBigQueryOutput_1.toJson(job_tBigQueryOutput_1.getStatistics()));

				} else {
					if (job_tBigQueryOutput_1 == null) {
						throw new RuntimeException("Job no longer exists");
					}
					globalMap.put("tBigQueryOutput_1_JOBID", job_tBigQueryOutput_1.getJobId().getJob());
					globalMap.put("tBigQueryOutput_1_STATISTICS",
							gsonObject_tBigQueryOutput_1.toJson(job_tBigQueryOutput_1.getStatistics()));
					List<com.google.cloud.bigquery.BigQueryError> errorList = job_tBigQueryOutput_1.getStatus()
							.getExecutionErrors();
					throw new RuntimeException("Job failed: " + errorList.get(errorList.size() - 1));
				}

				/* ----END-CREATING-JOB (Cloud API)---- */

				/**
				 * [tBigQueryOutput_1_tBQBE begin ] stop
				 */

				/**
				 * [tBigQueryOutput_1_tBQBE main ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_1";

				currentComponent = "tBigQueryOutput_1_tBQBE";

				tos_count_tBigQueryOutput_1_tBQBE++;

				/**
				 * [tBigQueryOutput_1_tBQBE main ] stop
				 */

				/**
				 * [tBigQueryOutput_1_tBQBE process_data_begin ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_1";

				currentComponent = "tBigQueryOutput_1_tBQBE";

				/**
				 * [tBigQueryOutput_1_tBQBE process_data_begin ] stop
				 */

				/**
				 * [tBigQueryOutput_1_tBQBE process_data_end ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_1";

				currentComponent = "tBigQueryOutput_1_tBQBE";

				/**
				 * [tBigQueryOutput_1_tBQBE process_data_end ] stop
				 */

				/**
				 * [tBigQueryOutput_1_tBQBE end ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_1";

				currentComponent = "tBigQueryOutput_1_tBQBE";

				ok_Hash.put("tBigQueryOutput_1_tBQBE", true);
				end_Hash.put("tBigQueryOutput_1_tBQBE", System.currentTimeMillis());

				/**
				 * [tBigQueryOutput_1_tBQBE end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_1:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
			}

			tDBInput_2Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tBigQueryOutput_1_tBQOB finally ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_1";

				currentComponent = "tBigQueryOutput_1_tBQOB";

				if (resourceMap.get("finish_tBigQueryOutput_1_tBQOB") == null) {
					if (resourceMap.get("csvWriter_tBigQueryOutput_1_tBQOB") != null) {
						((com.talend.csv.CSVWriter) resourceMap.get("csvWriter_tBigQueryOutput_1_tBQOB")).close();
					}
				}

				/**
				 * [tBigQueryOutput_1_tBQOB finally ] stop
				 */

				/**
				 * [tBigQueryOutput_1_tBQBE finally ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_1";

				currentComponent = "tBigQueryOutput_1_tBQBE";

				/**
				 * [tBigQueryOutput_1_tBQBE finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_ONTARGET_load_dim = new byte[0];
		static byte[] commonByteArray_ONTARGET_load_dim = new byte[0];

		public String DW_ID;

		public String getDW_ID() {
			return this.DW_ID;
		}

		public String SRC_ERP_SCHEMA;

		public String getSRC_ERP_SCHEMA() {
			return this.SRC_ERP_SCHEMA;
		}

		public Integer SRC_ERP_ID;

		public Integer getSRC_ERP_ID() {
			return this.SRC_ERP_ID;
		}

		public String Payer_Code;

		public String getPayer_Code() {
			return this.Payer_Code;
		}

		public String Payer_Name;

		public String getPayer_Name() {
			return this.Payer_Name;
		}

		public String Payer_Address_1;

		public String getPayer_Address_1() {
			return this.Payer_Address_1;
		}

		public String Payer_Address_2;

		public String getPayer_Address_2() {
			return this.Payer_Address_2;
		}

		public String Payer_City;

		public String getPayer_City() {
			return this.Payer_City;
		}

		public String Payer_State;

		public String getPayer_State() {
			return this.Payer_State;
		}

		public String Payer_Zip_Code;

		public String getPayer_Zip_Code() {
			return this.Payer_Zip_Code;
		}

		public String Payer_Phone_Number;

		public String getPayer_Phone_Number() {
			return this.Payer_Phone_Number;
		}

		public String Payer_Contact_Name;

		public String getPayer_Contact_Name() {
			return this.Payer_Contact_Name;
		}

		public Long last_insert_ts;

		public Long getLast_insert_ts() {
			return this.last_insert_ts;
		}

		public Long last_update_ts;

		public Long getLast_update_ts() {
			return this.last_update_ts;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ONTARGET_load_dim.length) {
					if (length < 1024 && commonByteArray_ONTARGET_load_dim.length == 0) {
						commonByteArray_ONTARGET_load_dim = new byte[1024];
					} else {
						commonByteArray_ONTARGET_load_dim = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ONTARGET_load_dim, 0, length);
				strReturn = new String(commonByteArray_ONTARGET_load_dim, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ONTARGET_load_dim.length) {
					if (length < 1024 && commonByteArray_ONTARGET_load_dim.length == 0) {
						commonByteArray_ONTARGET_load_dim = new byte[1024];
					} else {
						commonByteArray_ONTARGET_load_dim = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_ONTARGET_load_dim, 0, length);
				strReturn = new String(commonByteArray_ONTARGET_load_dim, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ONTARGET_load_dim) {

				try {

					int length = 0;

					this.DW_ID = readString(dis);

					this.SRC_ERP_SCHEMA = readString(dis);

					this.SRC_ERP_ID = readInteger(dis);

					this.Payer_Code = readString(dis);

					this.Payer_Name = readString(dis);

					this.Payer_Address_1 = readString(dis);

					this.Payer_Address_2 = readString(dis);

					this.Payer_City = readString(dis);

					this.Payer_State = readString(dis);

					this.Payer_Zip_Code = readString(dis);

					this.Payer_Phone_Number = readString(dis);

					this.Payer_Contact_Name = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.last_insert_ts = null;
					} else {
						this.last_insert_ts = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.last_update_ts = null;
					} else {
						this.last_update_ts = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ONTARGET_load_dim) {

				try {

					int length = 0;

					this.DW_ID = readString(dis);

					this.SRC_ERP_SCHEMA = readString(dis);

					this.SRC_ERP_ID = readInteger(dis);

					this.Payer_Code = readString(dis);

					this.Payer_Name = readString(dis);

					this.Payer_Address_1 = readString(dis);

					this.Payer_Address_2 = readString(dis);

					this.Payer_City = readString(dis);

					this.Payer_State = readString(dis);

					this.Payer_Zip_Code = readString(dis);

					this.Payer_Phone_Number = readString(dis);

					this.Payer_Contact_Name = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.last_insert_ts = null;
					} else {
						this.last_insert_ts = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.last_update_ts = null;
					} else {
						this.last_update_ts = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.DW_ID, dos);

				// String

				writeString(this.SRC_ERP_SCHEMA, dos);

				// Integer

				writeInteger(this.SRC_ERP_ID, dos);

				// String

				writeString(this.Payer_Code, dos);

				// String

				writeString(this.Payer_Name, dos);

				// String

				writeString(this.Payer_Address_1, dos);

				// String

				writeString(this.Payer_Address_2, dos);

				// String

				writeString(this.Payer_City, dos);

				// String

				writeString(this.Payer_State, dos);

				// String

				writeString(this.Payer_Zip_Code, dos);

				// String

				writeString(this.Payer_Phone_Number, dos);

				// String

				writeString(this.Payer_Contact_Name, dos);

				// Long

				if (this.last_insert_ts == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.last_insert_ts);
				}

				// Long

				if (this.last_update_ts == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.last_update_ts);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.DW_ID, dos);

				// String

				writeString(this.SRC_ERP_SCHEMA, dos);

				// Integer

				writeInteger(this.SRC_ERP_ID, dos);

				// String

				writeString(this.Payer_Code, dos);

				// String

				writeString(this.Payer_Name, dos);

				// String

				writeString(this.Payer_Address_1, dos);

				// String

				writeString(this.Payer_Address_2, dos);

				// String

				writeString(this.Payer_City, dos);

				// String

				writeString(this.Payer_State, dos);

				// String

				writeString(this.Payer_Zip_Code, dos);

				// String

				writeString(this.Payer_Phone_Number, dos);

				// String

				writeString(this.Payer_Contact_Name, dos);

				// Long

				if (this.last_insert_ts == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.last_insert_ts);
				}

				// Long

				if (this.last_update_ts == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.last_update_ts);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("DW_ID=" + DW_ID);
			sb.append(",SRC_ERP_SCHEMA=" + SRC_ERP_SCHEMA);
			sb.append(",SRC_ERP_ID=" + String.valueOf(SRC_ERP_ID));
			sb.append(",Payer_Code=" + Payer_Code);
			sb.append(",Payer_Name=" + Payer_Name);
			sb.append(",Payer_Address_1=" + Payer_Address_1);
			sb.append(",Payer_Address_2=" + Payer_Address_2);
			sb.append(",Payer_City=" + Payer_City);
			sb.append(",Payer_State=" + Payer_State);
			sb.append(",Payer_Zip_Code=" + Payer_Zip_Code);
			sb.append(",Payer_Phone_Number=" + Payer_Phone_Number);
			sb.append(",Payer_Contact_Name=" + Payer_Contact_Name);
			sb.append(",last_insert_ts=" + String.valueOf(last_insert_ts));
			sb.append(",last_update_ts=" + String.valueOf(last_update_ts));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tBigQueryOutput_2_tBQOB begin ] start
				 */

				ok_Hash.put("tBigQueryOutput_2_tBQOB", false);
				start_Hash.put("tBigQueryOutput_2_tBQOB", System.currentTimeMillis());

				currentVirtualComponent = "tBigQueryOutput_2";

				currentComponent = "tBigQueryOutput_2_tBQOB";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tBigQueryOutput_2_tBQOB = 0;

				int nb_line_tBigQueryOutput_2_tBQOB = 0;
				String rowSeparator_tBigQueryOutput_2_tBQOB = "\n";
				String fieldSeparator_tBigQueryOutput_2_tBQOB = ",";
				char escapeChar_tBigQueryOutput_2_tBQOB = "\\".charAt(0);
				char textEnclosure_tBigQueryOutput_2_tBQOB = "\"".charAt(0);

				escapeChar_tBigQueryOutput_2_tBQOB = textEnclosure_tBigQueryOutput_2_tBQOB;

				if (escapeChar_tBigQueryOutput_2_tBQOB == '\\') {
				} else if (escapeChar_tBigQueryOutput_2_tBQOB == textEnclosure_tBigQueryOutput_2_tBQOB) {
				} else {
					throw new RuntimeException("The escape mode only support the '\\' or double text enclosure.");
				}

				java.io.File file_tBigQueryOutput_2_tBQOB = new java.io.File(
						"/Applications/TOSDI-8.0.1/studio/workspace/payer_data.avro");

				file_tBigQueryOutput_2_tBQOB.getParentFile().mkdirs();

				com.talend.csv.CSVWriter csvWriter_tBigQueryOutput_2_tBQOB = new com.talend.csv.CSVWriter(
						new java.io.BufferedWriter(new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(file_tBigQueryOutput_2_tBQOB, false), "ISO-8859-15")));
				resourceMap.put("csvWriter_tBigQueryOutput_2_tBQOB", csvWriter_tBigQueryOutput_2_tBQOB);
				csvWriter_tBigQueryOutput_2_tBQOB.setSeparator(fieldSeparator_tBigQueryOutput_2_tBQOB.charAt(0));

				csvWriter_tBigQueryOutput_2_tBQOB.setLineEnd(rowSeparator_tBigQueryOutput_2_tBQOB);
				csvWriter_tBigQueryOutput_2_tBQOB.setEscapeChar(escapeChar_tBigQueryOutput_2_tBQOB);
				csvWriter_tBigQueryOutput_2_tBQOB.setQuoteChar(textEnclosure_tBigQueryOutput_2_tBQOB);
				csvWriter_tBigQueryOutput_2_tBQOB.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.AUTO);

				/**
				 * [tBigQueryOutput_2_tBQOB begin ] stop
				 */

				/**
				 * [tDBInput_2 begin ] start
				 */

				ok_Hash.put("tDBInput_2", false);
				start_Hash.put("tDBInput_2", System.currentTimeMillis());

				currentComponent = "tDBInput_2";

				int tos_count_tDBInput_2 = 0;

				int nb_line_tDBInput_2 = 0;
				java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBInput_2 = java.lang.Class.forName(driverClass_tDBInput_2);
				String dbUser_tDBInput_2 = "postgres";

				final String decryptedPassword_tDBInput_2 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:qpXwRAD5b1OcUgu2oHJg8o3CY1IwGcKsdQQwni7du1IlxyE+Ee0=");

				String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;

				String url_tDBInput_2 = "jdbc:postgresql://" + "localhost" + ":" + "5431" + "/" + "OnTarget";

				conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2, dbUser_tDBInput_2,
						dbPwd_tDBInput_2);

				conn_tDBInput_2.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

				String dbquery_tDBInput_2 = "SELECT cast(md5('smallmiracle_dim_client_'||cast(id as varchar(10))) as varchar(50)) as DW_ID,\n        'smallmiracle' a"
						+ "s SRC_ERP_SCHEMA,\n        id as SRC_ERP_ID,\n        payercode as Payer_Code, \n        payername as Payer_Name, \n        "
						+ "address1 as Payer_Address_1, \n        address2 as Payer_Address_2, \n        city as Payer_City, \n        state as Payer_"
						+ "State, \n        zipcode as Payer_Zip_Code, \n        phonenumber as Payer_Phone_Number, \n        contactname as Payer_Con"
						+ "tact_Name,\n        cast(to_char((current_timestamp)::TIMESTAMP,'yyyymmddhhmiss') as BigInt) as last_insert_ts,\n        c"
						+ "ast(19000101000000 as bigint) as last_update_ts\n        FROM smallmiracle.arpayer";

				globalMap.put("tDBInput_2_QUERY", dbquery_tDBInput_2);
				java.sql.ResultSet rs_tDBInput_2 = null;

				try {
					rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
					java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
					int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

					String tmpContent_tDBInput_2 = null;

					while (rs_tDBInput_2.next()) {
						nb_line_tDBInput_2++;

						if (colQtyInRs_tDBInput_2 < 1) {
							row2.DW_ID = null;
						} else {

							row2.DW_ID = routines.system.JDBCUtil.getString(rs_tDBInput_2, 1, false);
						}
						if (colQtyInRs_tDBInput_2 < 2) {
							row2.SRC_ERP_SCHEMA = null;
						} else {

							row2.SRC_ERP_SCHEMA = routines.system.JDBCUtil.getString(rs_tDBInput_2, 2, false);
						}
						if (colQtyInRs_tDBInput_2 < 3) {
							row2.SRC_ERP_ID = null;
						} else {

							row2.SRC_ERP_ID = rs_tDBInput_2.getInt(3);
							if (rs_tDBInput_2.wasNull()) {
								row2.SRC_ERP_ID = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 4) {
							row2.Payer_Code = null;
						} else {

							row2.Payer_Code = routines.system.JDBCUtil.getString(rs_tDBInput_2, 4, false);
						}
						if (colQtyInRs_tDBInput_2 < 5) {
							row2.Payer_Name = null;
						} else {

							row2.Payer_Name = routines.system.JDBCUtil.getString(rs_tDBInput_2, 5, false);
						}
						if (colQtyInRs_tDBInput_2 < 6) {
							row2.Payer_Address_1 = null;
						} else {

							row2.Payer_Address_1 = routines.system.JDBCUtil.getString(rs_tDBInput_2, 6, false);
						}
						if (colQtyInRs_tDBInput_2 < 7) {
							row2.Payer_Address_2 = null;
						} else {

							row2.Payer_Address_2 = routines.system.JDBCUtil.getString(rs_tDBInput_2, 7, false);
						}
						if (colQtyInRs_tDBInput_2 < 8) {
							row2.Payer_City = null;
						} else {

							row2.Payer_City = routines.system.JDBCUtil.getString(rs_tDBInput_2, 8, false);
						}
						if (colQtyInRs_tDBInput_2 < 9) {
							row2.Payer_State = null;
						} else {

							row2.Payer_State = routines.system.JDBCUtil.getString(rs_tDBInput_2, 9, false);
						}
						if (colQtyInRs_tDBInput_2 < 10) {
							row2.Payer_Zip_Code = null;
						} else {

							row2.Payer_Zip_Code = routines.system.JDBCUtil.getString(rs_tDBInput_2, 10, false);
						}
						if (colQtyInRs_tDBInput_2 < 11) {
							row2.Payer_Phone_Number = null;
						} else {

							row2.Payer_Phone_Number = routines.system.JDBCUtil.getString(rs_tDBInput_2, 11, false);
						}
						if (colQtyInRs_tDBInput_2 < 12) {
							row2.Payer_Contact_Name = null;
						} else {

							row2.Payer_Contact_Name = routines.system.JDBCUtil.getString(rs_tDBInput_2, 12, false);
						}
						if (colQtyInRs_tDBInput_2 < 13) {
							row2.last_insert_ts = null;
						} else {

							row2.last_insert_ts = rs_tDBInput_2.getLong(13);
							if (rs_tDBInput_2.wasNull()) {
								row2.last_insert_ts = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 14) {
							row2.last_update_ts = null;
						} else {

							row2.last_update_ts = rs_tDBInput_2.getLong(14);
							if (rs_tDBInput_2.wasNull()) {
								row2.last_update_ts = null;
							}
						}

						/**
						 * [tDBInput_2 begin ] stop
						 */

						/**
						 * [tDBInput_2 main ] start
						 */

						currentComponent = "tDBInput_2";

						tos_count_tDBInput_2++;

						/**
						 * [tDBInput_2 main ] stop
						 */

						/**
						 * [tDBInput_2 process_data_begin ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_begin ] stop
						 */

						/**
						 * [tBigQueryOutput_2_tBQOB main ] start
						 */

						currentVirtualComponent = "tBigQueryOutput_2";

						currentComponent = "tBigQueryOutput_2_tBQOB";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row2"

							);
						}

						String[] row_tBigQueryOutput_2_tBQOB = new String[14];
						java.util.Arrays.fill(row_tBigQueryOutput_2_tBQOB, "\\N");

						int curColumnIndex_tBigQueryOutput_2_tBQOB = 0;

						curColumnIndex_tBigQueryOutput_2_tBQOB = 0;

						if (row2.DW_ID != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = row2.DW_ID;

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 1;

						if (row2.SRC_ERP_SCHEMA != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = row2.SRC_ERP_SCHEMA;

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 2;

						if (row2.SRC_ERP_ID != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = String
									.valueOf(row2.SRC_ERP_ID);

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 3;

						if (row2.Payer_Code != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = row2.Payer_Code;

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 4;

						if (row2.Payer_Name != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = row2.Payer_Name;

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 5;

						if (row2.Payer_Address_1 != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = row2.Payer_Address_1;

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 6;

						if (row2.Payer_Address_2 != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = row2.Payer_Address_2;

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 7;

						if (row2.Payer_City != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = row2.Payer_City;

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 8;

						if (row2.Payer_State != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = row2.Payer_State;

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 9;

						if (row2.Payer_Zip_Code != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = row2.Payer_Zip_Code;

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 10;

						if (row2.Payer_Phone_Number != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = row2.Payer_Phone_Number;

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 11;

						if (row2.Payer_Contact_Name != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = row2.Payer_Contact_Name;

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 12;

						if (row2.last_insert_ts != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = String
									.valueOf(row2.last_insert_ts);

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_2_tBQOB = 13;

						if (row2.last_update_ts != null) {

							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = String
									.valueOf(row2.last_update_ts);

						} else {
							row_tBigQueryOutput_2_tBQOB[curColumnIndex_tBigQueryOutput_2_tBQOB] = "\\N";
						}

						csvWriter_tBigQueryOutput_2_tBQOB.writeNextEnhance(row_tBigQueryOutput_2_tBQOB, "");
						nb_line_tBigQueryOutput_2_tBQOB++;

						tos_count_tBigQueryOutput_2_tBQOB++;

						/**
						 * [tBigQueryOutput_2_tBQOB main ] stop
						 */

						/**
						 * [tBigQueryOutput_2_tBQOB process_data_begin ] start
						 */

						currentVirtualComponent = "tBigQueryOutput_2";

						currentComponent = "tBigQueryOutput_2_tBQOB";

						/**
						 * [tBigQueryOutput_2_tBQOB process_data_begin ] stop
						 */

						/**
						 * [tBigQueryOutput_2_tBQOB process_data_end ] start
						 */

						currentVirtualComponent = "tBigQueryOutput_2";

						currentComponent = "tBigQueryOutput_2_tBQOB";

						/**
						 * [tBigQueryOutput_2_tBQOB process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 process_data_end ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 end ] start
						 */

						currentComponent = "tDBInput_2";

					}
				} finally {
					if (rs_tDBInput_2 != null) {
						rs_tDBInput_2.close();
					}
					if (stmt_tDBInput_2 != null) {
						stmt_tDBInput_2.close();
					}
					if (conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {

						conn_tDBInput_2.commit();

						conn_tDBInput_2.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}
				globalMap.put("tDBInput_2_NB_LINE", nb_line_tDBInput_2);

				ok_Hash.put("tDBInput_2", true);
				end_Hash.put("tDBInput_2", System.currentTimeMillis());

				/**
				 * [tDBInput_2 end ] stop
				 */

				/**
				 * [tBigQueryOutput_2_tBQOB end ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_2";

				currentComponent = "tBigQueryOutput_2_tBQOB";

				if (csvWriter_tBigQueryOutput_2_tBQOB != null) {
					csvWriter_tBigQueryOutput_2_tBQOB.close();
				}
				resourceMap.put("finish_tBigQueryOutput_2_tBQOB", true);
				globalMap.put("tBigQueryOutput_2_tBQOB_NB_LINE", nb_line_tBigQueryOutput_2_tBQOB);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tBigQueryOutput_2_tBQOB", true);
				end_Hash.put("tBigQueryOutput_2_tBQOB", System.currentTimeMillis());

				/**
				 * [tBigQueryOutput_2_tBQOB end ] stop
				 */

				/**
				 * [tBigQueryOutput_2_tBQBE begin ] start
				 */

				ok_Hash.put("tBigQueryOutput_2_tBQBE", false);
				start_Hash.put("tBigQueryOutput_2_tBQBE", System.currentTimeMillis());

				currentVirtualComponent = "tBigQueryOutput_2";

				currentComponent = "tBigQueryOutput_2_tBQBE";

				int tos_count_tBigQueryOutput_2_tBQBE = 0;

				/* ----START-CREATING-CLIENT (Cloud API)---- */

				com.google.auth.oauth2.GoogleCredentials credentials_tBigQueryOutput_2;
				java.io.File credentialsFile_tBigQueryOutput_2 = new java.io.File(
						"/Users/jsun/Documents/WCIWork/OnTarget/code/otmirror-060322-9471bb896012.json");
				try (java.io.FileInputStream credentialsStream_tBigQueryOutput_2 = new java.io.FileInputStream(
						credentialsFile_tBigQueryOutput_2)) {
					credentials_tBigQueryOutput_2 = com.google.auth.oauth2.ServiceAccountCredentials
							.fromStream(credentialsStream_tBigQueryOutput_2);
				}

				com.google.cloud.bigquery.BigQuery bigquery_tBigQueryOutput_2 = com.google.cloud.bigquery.BigQueryOptions
						.newBuilder().setCredentials(credentials_tBigQueryOutput_2).setProjectId("otmirror-060322")
						.build().getService();

				/* ----END-CREATING-CLIENT (Cloud API)---- */

				long nb_line_tBigQueryOutput_2 = 0;

				com.google.auth.Credentials credential_tBigQueryOutput_2 = null;
				try {
					credential_tBigQueryOutput_2 = com.google.auth.oauth2.GoogleCredentials
							.fromStream(new java.io.FileInputStream(
									"/Users/jsun/Documents/WCIWork/OnTarget/code/otmirror-060322-9471bb896012.json"));
				} catch (IOException e_tBigQueryOutput_2) {
					globalMap.put("tBigQueryOutput_2_ERROR_MESSAGE", e_tBigQueryOutput_2.getMessage());
				}
				com.google.cloud.storage.Storage storage_tBigQueryOutput_2 = com.google.cloud.storage.StorageOptions
						.newBuilder().setCredentials(credential_tBigQueryOutput_2).build().getService();

				java.io.File file_tBigQueryOutput_2 = new java.io.File(
						"/Applications/TOSDI-8.0.1/studio/workspace/payer_data.avro");

				com.google.cloud.storage.BlobInfo blobInfo_tBigQueryOutput_2 = com.google.cloud.storage.BlobInfo
						.newBuilder("dw-tmp", file_tBigQueryOutput_2.getName()).build();
				storage_tBigQueryOutput_2.create(blobInfo_tBigQueryOutput_2,
						java.nio.file.Files.readAllBytes(file_tBigQueryOutput_2.toPath()));

				/* ----END-UPLOADING-FILE---- */

				/* ----START-CREATING-JOB (Cloud API)---- */
				com.google.cloud.bigquery.TableId tableId_tBigQueryOutput_2 = com.google.cloud.bigquery.TableId
						.of("otmirror-060322", "DW", "dim_ar_payer");
				com.google.cloud.bigquery.LoadJobConfiguration.Builder loadJobBuilder_tBigQueryOutput_2 = com.google.cloud.bigquery.LoadJobConfiguration
						.newBuilder(tableId_tBigQueryOutput_2, "gs://dw-tmp/payer_data.avro");

				boolean dropTable_tBigQueryOutput_2 = false;

				if (dropTable_tBigQueryOutput_2
						&& bigquery_tBigQueryOutput_2.getTable(tableId_tBigQueryOutput_2) != null) {
					boolean deleted = bigquery_tBigQueryOutput_2.delete(tableId_tBigQueryOutput_2);
					if (deleted) {

					} else {
						throw new RuntimeException("Unable to delete table " + tableId_tBigQueryOutput_2);
					}
				}

				if (bigquery_tBigQueryOutput_2.getTable(tableId_tBigQueryOutput_2) == null) {
					java.util.List<com.google.cloud.bigquery.Field> fields_tBigQueryOutput_2 = new java.util.ArrayList<>();

					com.google.cloud.bigquery.Field field_0 = com.google.cloud.bigquery.Field
							.newBuilder("DW_ID", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_0);

					com.google.cloud.bigquery.Field field_1 = com.google.cloud.bigquery.Field
							.newBuilder("SRC_ERP_SCHEMA", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_1);

					com.google.cloud.bigquery.Field field_2 = com.google.cloud.bigquery.Field
							.newBuilder("SRC_ERP_ID", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_2);

					com.google.cloud.bigquery.Field field_3 = com.google.cloud.bigquery.Field
							.newBuilder("Payer_Code", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_3);

					com.google.cloud.bigquery.Field field_4 = com.google.cloud.bigquery.Field
							.newBuilder("Payer_Name", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_4);

					com.google.cloud.bigquery.Field field_5 = com.google.cloud.bigquery.Field
							.newBuilder("Payer_Address_1", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_5);

					com.google.cloud.bigquery.Field field_6 = com.google.cloud.bigquery.Field
							.newBuilder("Payer_Address_2", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_6);

					com.google.cloud.bigquery.Field field_7 = com.google.cloud.bigquery.Field
							.newBuilder("Payer_City", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_7);

					com.google.cloud.bigquery.Field field_8 = com.google.cloud.bigquery.Field
							.newBuilder("Payer_State", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_8);

					com.google.cloud.bigquery.Field field_9 = com.google.cloud.bigquery.Field
							.newBuilder("Payer_Zip_Code", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_9);

					com.google.cloud.bigquery.Field field_10 = com.google.cloud.bigquery.Field
							.newBuilder("Payer_Phone_Number", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_10);

					com.google.cloud.bigquery.Field field_11 = com.google.cloud.bigquery.Field
							.newBuilder("Payer_Contact_Name", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_11);

					com.google.cloud.bigquery.Field field_12 = com.google.cloud.bigquery.Field
							.newBuilder("last_insert_ts", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_12);

					com.google.cloud.bigquery.Field field_13 = com.google.cloud.bigquery.Field
							.newBuilder("last_update_ts", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_2.add(field_13);

					com.google.cloud.bigquery.Schema schema_tBigQueryOutput_2 = com.google.cloud.bigquery.Schema
							.of(fields_tBigQueryOutput_2);
					com.google.cloud.bigquery.TableInfo tableInfo_tBigQueryOutput_2 = com.google.cloud.bigquery.TableInfo
							.newBuilder(tableId_tBigQueryOutput_2,
									com.google.cloud.bigquery.StandardTableDefinition.of(schema_tBigQueryOutput_2))
							.build();
					com.google.cloud.bigquery.Table table_tBigQueryOutput_2 = bigquery_tBigQueryOutput_2
							.create(tableInfo_tBigQueryOutput_2);
					loadJobBuilder_tBigQueryOutput_2.setSchema(schema_tBigQueryOutput_2);
					loadJobBuilder_tBigQueryOutput_2
							.setCreateDisposition(com.google.cloud.bigquery.JobInfo.CreateDisposition.CREATE_IF_NEEDED);

				} else {
					loadJobBuilder_tBigQueryOutput_2
							.setCreateDisposition(com.google.cloud.bigquery.JobInfo.CreateDisposition.CREATE_NEVER);
				}

				loadJobBuilder_tBigQueryOutput_2
						.setWriteDisposition(com.google.cloud.bigquery.JobInfo.WriteDisposition.WRITE_TRUNCATE);
				loadJobBuilder_tBigQueryOutput_2.setDestinationTable(tableId_tBigQueryOutput_2);
				com.google.cloud.bigquery.CsvOptions.Builder csvOptions_tBigQueryOutput_2 = com.google.cloud.bigquery.CsvOptions
						.newBuilder();
				csvOptions_tBigQueryOutput_2.setAllowQuotedNewLines(true);
				csvOptions_tBigQueryOutput_2.setSkipLeadingRows(0);

				csvOptions_tBigQueryOutput_2.setFieldDelimiter(",");

				loadJobBuilder_tBigQueryOutput_2.setFormatOptions(csvOptions_tBigQueryOutput_2.build());
				loadJobBuilder_tBigQueryOutput_2.setNullMarker("\\N");
				com.google.cloud.bigquery.Job job_tBigQueryOutput_2 = bigquery_tBigQueryOutput_2
						.create(com.google.cloud.bigquery.JobInfo.of(loadJobBuilder_tBigQueryOutput_2.build()));
				job_tBigQueryOutput_2 = job_tBigQueryOutput_2
						.waitFor(com.google.cloud.RetryOption.initialRetryDelay(org.threeten.bp.Duration.ofSeconds(1)));
				com.google.gson.Gson gsonObject_tBigQueryOutput_2 = new com.google.gson.Gson();
				if (job_tBigQueryOutput_2 != null && job_tBigQueryOutput_2.getStatus().getError() == null) {
					globalMap.put("tBigQueryOutput_2_JOBID", job_tBigQueryOutput_2.getJobId().getJob());
					globalMap.put("tBigQueryOutput_2_STATISTICS",
							gsonObject_tBigQueryOutput_2.toJson(job_tBigQueryOutput_2.getStatistics()));

				} else {
					if (job_tBigQueryOutput_2 == null) {
						throw new RuntimeException("Job no longer exists");
					}
					globalMap.put("tBigQueryOutput_2_JOBID", job_tBigQueryOutput_2.getJobId().getJob());
					globalMap.put("tBigQueryOutput_2_STATISTICS",
							gsonObject_tBigQueryOutput_2.toJson(job_tBigQueryOutput_2.getStatistics()));
					List<com.google.cloud.bigquery.BigQueryError> errorList = job_tBigQueryOutput_2.getStatus()
							.getExecutionErrors();
					throw new RuntimeException("Job failed: " + errorList.get(errorList.size() - 1));
				}

				/* ----END-CREATING-JOB (Cloud API)---- */

				/**
				 * [tBigQueryOutput_2_tBQBE begin ] stop
				 */

				/**
				 * [tBigQueryOutput_2_tBQBE main ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_2";

				currentComponent = "tBigQueryOutput_2_tBQBE";

				tos_count_tBigQueryOutput_2_tBQBE++;

				/**
				 * [tBigQueryOutput_2_tBQBE main ] stop
				 */

				/**
				 * [tBigQueryOutput_2_tBQBE process_data_begin ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_2";

				currentComponent = "tBigQueryOutput_2_tBQBE";

				/**
				 * [tBigQueryOutput_2_tBQBE process_data_begin ] stop
				 */

				/**
				 * [tBigQueryOutput_2_tBQBE process_data_end ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_2";

				currentComponent = "tBigQueryOutput_2_tBQBE";

				/**
				 * [tBigQueryOutput_2_tBQBE process_data_end ] stop
				 */

				/**
				 * [tBigQueryOutput_2_tBQBE end ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_2";

				currentComponent = "tBigQueryOutput_2_tBQBE";

				ok_Hash.put("tBigQueryOutput_2_tBQBE", true);
				end_Hash.put("tBigQueryOutput_2_tBQBE", System.currentTimeMillis());

				/**
				 * [tBigQueryOutput_2_tBQBE end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_2:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
			}

			tDBInput_3Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_2 finally ] start
				 */

				currentComponent = "tDBInput_2";

				/**
				 * [tDBInput_2 finally ] stop
				 */

				/**
				 * [tBigQueryOutput_2_tBQOB finally ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_2";

				currentComponent = "tBigQueryOutput_2_tBQOB";

				if (resourceMap.get("finish_tBigQueryOutput_2_tBQOB") == null) {
					if (resourceMap.get("csvWriter_tBigQueryOutput_2_tBQOB") != null) {
						((com.talend.csv.CSVWriter) resourceMap.get("csvWriter_tBigQueryOutput_2_tBQOB")).close();
					}
				}

				/**
				 * [tBigQueryOutput_2_tBQOB finally ] stop
				 */

				/**
				 * [tBigQueryOutput_2_tBQBE finally ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_2";

				currentComponent = "tBigQueryOutput_2_tBQBE";

				/**
				 * [tBigQueryOutput_2_tBQBE finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_ONTARGET_load_dim = new byte[0];
		static byte[] commonByteArray_ONTARGET_load_dim = new byte[0];

		public String DW_ID;

		public String getDW_ID() {
			return this.DW_ID;
		}

		public String SRC_ERP_SCHEMA;

		public String getSRC_ERP_SCHEMA() {
			return this.SRC_ERP_SCHEMA;
		}

		public Integer SRC_ERP_ID;

		public Integer getSRC_ERP_ID() {
			return this.SRC_ERP_ID;
		}

		public String CC_Department_Code;

		public String getCC_Department_Code() {
			return this.CC_Department_Code;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public String CC_State_Code;

		public String getCC_State_Code() {
			return this.CC_State_Code;
		}

		public Boolean inactive;

		public Boolean getInactive() {
			return this.inactive;
		}

		public String CC_Address;

		public String getCC_Address() {
			return this.CC_Address;
		}

		public String CC_City;

		public String getCC_City() {
			return this.CC_City;
		}

		public String CC_State;

		public String getCC_State() {
			return this.CC_State;
		}

		public String CC_Zip;

		public String getCC_Zip() {
			return this.CC_Zip;
		}

		public Long last_insert_ts;

		public Long getLast_insert_ts() {
			return this.last_insert_ts;
		}

		public Long last_update_ts;

		public Long getLast_update_ts() {
			return this.last_update_ts;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ONTARGET_load_dim.length) {
					if (length < 1024 && commonByteArray_ONTARGET_load_dim.length == 0) {
						commonByteArray_ONTARGET_load_dim = new byte[1024];
					} else {
						commonByteArray_ONTARGET_load_dim = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ONTARGET_load_dim, 0, length);
				strReturn = new String(commonByteArray_ONTARGET_load_dim, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ONTARGET_load_dim.length) {
					if (length < 1024 && commonByteArray_ONTARGET_load_dim.length == 0) {
						commonByteArray_ONTARGET_load_dim = new byte[1024];
					} else {
						commonByteArray_ONTARGET_load_dim = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_ONTARGET_load_dim, 0, length);
				strReturn = new String(commonByteArray_ONTARGET_load_dim, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ONTARGET_load_dim) {

				try {

					int length = 0;

					this.DW_ID = readString(dis);

					this.SRC_ERP_SCHEMA = readString(dis);

					this.SRC_ERP_ID = readInteger(dis);

					this.CC_Department_Code = readString(dis);

					this.description = readString(dis);

					this.CC_State_Code = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.inactive = null;
					} else {
						this.inactive = dis.readBoolean();
					}

					this.CC_Address = readString(dis);

					this.CC_City = readString(dis);

					this.CC_State = readString(dis);

					this.CC_Zip = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.last_insert_ts = null;
					} else {
						this.last_insert_ts = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.last_update_ts = null;
					} else {
						this.last_update_ts = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ONTARGET_load_dim) {

				try {

					int length = 0;

					this.DW_ID = readString(dis);

					this.SRC_ERP_SCHEMA = readString(dis);

					this.SRC_ERP_ID = readInteger(dis);

					this.CC_Department_Code = readString(dis);

					this.description = readString(dis);

					this.CC_State_Code = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.inactive = null;
					} else {
						this.inactive = dis.readBoolean();
					}

					this.CC_Address = readString(dis);

					this.CC_City = readString(dis);

					this.CC_State = readString(dis);

					this.CC_Zip = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.last_insert_ts = null;
					} else {
						this.last_insert_ts = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.last_update_ts = null;
					} else {
						this.last_update_ts = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.DW_ID, dos);

				// String

				writeString(this.SRC_ERP_SCHEMA, dos);

				// Integer

				writeInteger(this.SRC_ERP_ID, dos);

				// String

				writeString(this.CC_Department_Code, dos);

				// String

				writeString(this.description, dos);

				// String

				writeString(this.CC_State_Code, dos);

				// Boolean

				if (this.inactive == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.inactive);
				}

				// String

				writeString(this.CC_Address, dos);

				// String

				writeString(this.CC_City, dos);

				// String

				writeString(this.CC_State, dos);

				// String

				writeString(this.CC_Zip, dos);

				// Long

				if (this.last_insert_ts == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.last_insert_ts);
				}

				// Long

				if (this.last_update_ts == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.last_update_ts);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.DW_ID, dos);

				// String

				writeString(this.SRC_ERP_SCHEMA, dos);

				// Integer

				writeInteger(this.SRC_ERP_ID, dos);

				// String

				writeString(this.CC_Department_Code, dos);

				// String

				writeString(this.description, dos);

				// String

				writeString(this.CC_State_Code, dos);

				// Boolean

				if (this.inactive == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.inactive);
				}

				// String

				writeString(this.CC_Address, dos);

				// String

				writeString(this.CC_City, dos);

				// String

				writeString(this.CC_State, dos);

				// String

				writeString(this.CC_Zip, dos);

				// Long

				if (this.last_insert_ts == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.last_insert_ts);
				}

				// Long

				if (this.last_update_ts == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.last_update_ts);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("DW_ID=" + DW_ID);
			sb.append(",SRC_ERP_SCHEMA=" + SRC_ERP_SCHEMA);
			sb.append(",SRC_ERP_ID=" + String.valueOf(SRC_ERP_ID));
			sb.append(",CC_Department_Code=" + CC_Department_Code);
			sb.append(",description=" + description);
			sb.append(",CC_State_Code=" + CC_State_Code);
			sb.append(",inactive=" + String.valueOf(inactive));
			sb.append(",CC_Address=" + CC_Address);
			sb.append(",CC_City=" + CC_City);
			sb.append(",CC_State=" + CC_State);
			sb.append(",CC_Zip=" + CC_Zip);
			sb.append(",last_insert_ts=" + String.valueOf(last_insert_ts));
			sb.append(",last_update_ts=" + String.valueOf(last_update_ts));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();

				/**
				 * [tBigQueryOutput_3_tBQOB begin ] start
				 */

				ok_Hash.put("tBigQueryOutput_3_tBQOB", false);
				start_Hash.put("tBigQueryOutput_3_tBQOB", System.currentTimeMillis());

				currentVirtualComponent = "tBigQueryOutput_3";

				currentComponent = "tBigQueryOutput_3_tBQOB";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tBigQueryOutput_3_tBQOB = 0;

				int nb_line_tBigQueryOutput_3_tBQOB = 0;
				String rowSeparator_tBigQueryOutput_3_tBQOB = "\n";
				String fieldSeparator_tBigQueryOutput_3_tBQOB = ",";
				char escapeChar_tBigQueryOutput_3_tBQOB = "\\".charAt(0);
				char textEnclosure_tBigQueryOutput_3_tBQOB = "\"".charAt(0);

				escapeChar_tBigQueryOutput_3_tBQOB = textEnclosure_tBigQueryOutput_3_tBQOB;

				if (escapeChar_tBigQueryOutput_3_tBQOB == '\\') {
				} else if (escapeChar_tBigQueryOutput_3_tBQOB == textEnclosure_tBigQueryOutput_3_tBQOB) {
				} else {
					throw new RuntimeException("The escape mode only support the '\\' or double text enclosure.");
				}

				java.io.File file_tBigQueryOutput_3_tBQOB = new java.io.File(
						"/Applications/TOSDI-8.0.1/studio/workspace/cost_center_data.avro");

				file_tBigQueryOutput_3_tBQOB.getParentFile().mkdirs();

				com.talend.csv.CSVWriter csvWriter_tBigQueryOutput_3_tBQOB = new com.talend.csv.CSVWriter(
						new java.io.BufferedWriter(new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(file_tBigQueryOutput_3_tBQOB, false), "ISO-8859-15")));
				resourceMap.put("csvWriter_tBigQueryOutput_3_tBQOB", csvWriter_tBigQueryOutput_3_tBQOB);
				csvWriter_tBigQueryOutput_3_tBQOB.setSeparator(fieldSeparator_tBigQueryOutput_3_tBQOB.charAt(0));

				csvWriter_tBigQueryOutput_3_tBQOB.setLineEnd(rowSeparator_tBigQueryOutput_3_tBQOB);
				csvWriter_tBigQueryOutput_3_tBQOB.setEscapeChar(escapeChar_tBigQueryOutput_3_tBQOB);
				csvWriter_tBigQueryOutput_3_tBQOB.setQuoteChar(textEnclosure_tBigQueryOutput_3_tBQOB);
				csvWriter_tBigQueryOutput_3_tBQOB.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.AUTO);

				/**
				 * [tBigQueryOutput_3_tBQOB begin ] stop
				 */

				/**
				 * [tDBInput_3 begin ] start
				 */

				ok_Hash.put("tDBInput_3", false);
				start_Hash.put("tDBInput_3", System.currentTimeMillis());

				currentComponent = "tDBInput_3";

				int tos_count_tDBInput_3 = 0;

				int nb_line_tDBInput_3 = 0;
				java.sql.Connection conn_tDBInput_3 = null;
				String driverClass_tDBInput_3 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBInput_3 = java.lang.Class.forName(driverClass_tDBInput_3);
				String dbUser_tDBInput_3 = "postgres";

				final String decryptedPassword_tDBInput_3 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:sjz1ksct1x6gzfH4vi7pHHsWv63Pwaj86gfwGKdOdFGsaiqnaTc=");

				String dbPwd_tDBInput_3 = decryptedPassword_tDBInput_3;

				String url_tDBInput_3 = "jdbc:postgresql://" + "localhost" + ":" + "5431" + "/" + "OnTarget";

				conn_tDBInput_3 = java.sql.DriverManager.getConnection(url_tDBInput_3, dbUser_tDBInput_3,
						dbPwd_tDBInput_3);

				conn_tDBInput_3.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

				String dbquery_tDBInput_3 = "select cast(md5('smallmiracle_dim_client_'||cast(id as varchar(10))) as varchar(50)) as DW_ID,\n        'smallmiracle' a"
						+ "s SRC_ERP_SCHEMA, \n        id as SRC_ERP_ID,\n        deptcode as CC_Department_Code,\n        description,\n        statec"
						+ "ode as CC_State_Code,\n        inactivecostcenter  as inactive,\n        worksiteaddress as CC_Address,\n        worksiteci"
						+ "ty  as CC_City,\n        worksitestate as CC_State,\n        worksitezip as CC_Zip,\n        cast(to_char((current_timestam"
						+ "p)::TIMESTAMP,'yyyymmddhhmiss') as BigInt) as last_insert_ts,\n        cast(19000101000000 as bigint) as last_update_ts\n "
						+ "       from smallmiracle.PRBusCostCenter";

				globalMap.put("tDBInput_3_QUERY", dbquery_tDBInput_3);
				java.sql.ResultSet rs_tDBInput_3 = null;

				try {
					rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
					java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
					int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

					String tmpContent_tDBInput_3 = null;

					while (rs_tDBInput_3.next()) {
						nb_line_tDBInput_3++;

						if (colQtyInRs_tDBInput_3 < 1) {
							row3.DW_ID = null;
						} else {

							row3.DW_ID = routines.system.JDBCUtil.getString(rs_tDBInput_3, 1, false);
						}
						if (colQtyInRs_tDBInput_3 < 2) {
							row3.SRC_ERP_SCHEMA = null;
						} else {

							row3.SRC_ERP_SCHEMA = routines.system.JDBCUtil.getString(rs_tDBInput_3, 2, false);
						}
						if (colQtyInRs_tDBInput_3 < 3) {
							row3.SRC_ERP_ID = null;
						} else {

							row3.SRC_ERP_ID = rs_tDBInput_3.getInt(3);
							if (rs_tDBInput_3.wasNull()) {
								row3.SRC_ERP_ID = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 4) {
							row3.CC_Department_Code = null;
						} else {

							row3.CC_Department_Code = routines.system.JDBCUtil.getString(rs_tDBInput_3, 4, false);
						}
						if (colQtyInRs_tDBInput_3 < 5) {
							row3.description = null;
						} else {

							row3.description = routines.system.JDBCUtil.getString(rs_tDBInput_3, 5, false);
						}
						if (colQtyInRs_tDBInput_3 < 6) {
							row3.CC_State_Code = null;
						} else {

							row3.CC_State_Code = routines.system.JDBCUtil.getString(rs_tDBInput_3, 6, false);
						}
						if (colQtyInRs_tDBInput_3 < 7) {
							row3.inactive = null;
						} else {

							row3.inactive = rs_tDBInput_3.getBoolean(7);
							if (rs_tDBInput_3.wasNull()) {
								row3.inactive = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 8) {
							row3.CC_Address = null;
						} else {

							row3.CC_Address = routines.system.JDBCUtil.getString(rs_tDBInput_3, 8, false);
						}
						if (colQtyInRs_tDBInput_3 < 9) {
							row3.CC_City = null;
						} else {

							row3.CC_City = routines.system.JDBCUtil.getString(rs_tDBInput_3, 9, false);
						}
						if (colQtyInRs_tDBInput_3 < 10) {
							row3.CC_State = null;
						} else {

							row3.CC_State = routines.system.JDBCUtil.getString(rs_tDBInput_3, 10, false);
						}
						if (colQtyInRs_tDBInput_3 < 11) {
							row3.CC_Zip = null;
						} else {

							row3.CC_Zip = routines.system.JDBCUtil.getString(rs_tDBInput_3, 11, false);
						}
						if (colQtyInRs_tDBInput_3 < 12) {
							row3.last_insert_ts = null;
						} else {

							row3.last_insert_ts = rs_tDBInput_3.getLong(12);
							if (rs_tDBInput_3.wasNull()) {
								row3.last_insert_ts = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 13) {
							row3.last_update_ts = null;
						} else {

							row3.last_update_ts = rs_tDBInput_3.getLong(13);
							if (rs_tDBInput_3.wasNull()) {
								row3.last_update_ts = null;
							}
						}

						/**
						 * [tDBInput_3 begin ] stop
						 */

						/**
						 * [tDBInput_3 main ] start
						 */

						currentComponent = "tDBInput_3";

						tos_count_tDBInput_3++;

						/**
						 * [tDBInput_3 main ] stop
						 */

						/**
						 * [tDBInput_3 process_data_begin ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_begin ] stop
						 */

						/**
						 * [tBigQueryOutput_3_tBQOB main ] start
						 */

						currentVirtualComponent = "tBigQueryOutput_3";

						currentComponent = "tBigQueryOutput_3_tBQOB";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row3"

							);
						}

						String[] row_tBigQueryOutput_3_tBQOB = new String[13];
						java.util.Arrays.fill(row_tBigQueryOutput_3_tBQOB, "\\N");

						int curColumnIndex_tBigQueryOutput_3_tBQOB = 0;

						curColumnIndex_tBigQueryOutput_3_tBQOB = 0;

						if (row3.DW_ID != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = row3.DW_ID;

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 1;

						if (row3.SRC_ERP_SCHEMA != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = row3.SRC_ERP_SCHEMA;

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 2;

						if (row3.SRC_ERP_ID != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = String
									.valueOf(row3.SRC_ERP_ID);

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 3;

						if (row3.CC_Department_Code != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = row3.CC_Department_Code;

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 4;

						if (row3.description != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = row3.description;

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 5;

						if (row3.CC_State_Code != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = row3.CC_State_Code;

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 6;

						if (row3.inactive != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = String
									.valueOf(true == row3.inactive ? "1" : "0");

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 7;

						if (row3.CC_Address != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = row3.CC_Address;

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 8;

						if (row3.CC_City != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = row3.CC_City;

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 9;

						if (row3.CC_State != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = row3.CC_State;

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 10;

						if (row3.CC_Zip != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = row3.CC_Zip;

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 11;

						if (row3.last_insert_ts != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = String
									.valueOf(row3.last_insert_ts);

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_3_tBQOB = 12;

						if (row3.last_update_ts != null) {

							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = String
									.valueOf(row3.last_update_ts);

						} else {
							row_tBigQueryOutput_3_tBQOB[curColumnIndex_tBigQueryOutput_3_tBQOB] = "\\N";
						}

						csvWriter_tBigQueryOutput_3_tBQOB.writeNextEnhance(row_tBigQueryOutput_3_tBQOB, "");
						nb_line_tBigQueryOutput_3_tBQOB++;

						tos_count_tBigQueryOutput_3_tBQOB++;

						/**
						 * [tBigQueryOutput_3_tBQOB main ] stop
						 */

						/**
						 * [tBigQueryOutput_3_tBQOB process_data_begin ] start
						 */

						currentVirtualComponent = "tBigQueryOutput_3";

						currentComponent = "tBigQueryOutput_3_tBQOB";

						/**
						 * [tBigQueryOutput_3_tBQOB process_data_begin ] stop
						 */

						/**
						 * [tBigQueryOutput_3_tBQOB process_data_end ] start
						 */

						currentVirtualComponent = "tBigQueryOutput_3";

						currentComponent = "tBigQueryOutput_3_tBQOB";

						/**
						 * [tBigQueryOutput_3_tBQOB process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 process_data_end ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 end ] start
						 */

						currentComponent = "tDBInput_3";

					}
				} finally {
					if (rs_tDBInput_3 != null) {
						rs_tDBInput_3.close();
					}
					if (stmt_tDBInput_3 != null) {
						stmt_tDBInput_3.close();
					}
					if (conn_tDBInput_3 != null && !conn_tDBInput_3.isClosed()) {

						conn_tDBInput_3.commit();

						conn_tDBInput_3.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}
				globalMap.put("tDBInput_3_NB_LINE", nb_line_tDBInput_3);

				ok_Hash.put("tDBInput_3", true);
				end_Hash.put("tDBInput_3", System.currentTimeMillis());

				/**
				 * [tDBInput_3 end ] stop
				 */

				/**
				 * [tBigQueryOutput_3_tBQOB end ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_3";

				currentComponent = "tBigQueryOutput_3_tBQOB";

				if (csvWriter_tBigQueryOutput_3_tBQOB != null) {
					csvWriter_tBigQueryOutput_3_tBQOB.close();
				}
				resourceMap.put("finish_tBigQueryOutput_3_tBQOB", true);
				globalMap.put("tBigQueryOutput_3_tBQOB_NB_LINE", nb_line_tBigQueryOutput_3_tBQOB);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tBigQueryOutput_3_tBQOB", true);
				end_Hash.put("tBigQueryOutput_3_tBQOB", System.currentTimeMillis());

				/**
				 * [tBigQueryOutput_3_tBQOB end ] stop
				 */

				/**
				 * [tBigQueryOutput_3_tBQBE begin ] start
				 */

				ok_Hash.put("tBigQueryOutput_3_tBQBE", false);
				start_Hash.put("tBigQueryOutput_3_tBQBE", System.currentTimeMillis());

				currentVirtualComponent = "tBigQueryOutput_3";

				currentComponent = "tBigQueryOutput_3_tBQBE";

				int tos_count_tBigQueryOutput_3_tBQBE = 0;

				/* ----START-CREATING-CLIENT (Cloud API)---- */

				com.google.auth.oauth2.GoogleCredentials credentials_tBigQueryOutput_3;
				java.io.File credentialsFile_tBigQueryOutput_3 = new java.io.File(
						"/Users/jsun/Documents/WCIWork/OnTarget/code/otmirror-060322-9471bb896012.json");
				try (java.io.FileInputStream credentialsStream_tBigQueryOutput_3 = new java.io.FileInputStream(
						credentialsFile_tBigQueryOutput_3)) {
					credentials_tBigQueryOutput_3 = com.google.auth.oauth2.ServiceAccountCredentials
							.fromStream(credentialsStream_tBigQueryOutput_3);
				}

				com.google.cloud.bigquery.BigQuery bigquery_tBigQueryOutput_3 = com.google.cloud.bigquery.BigQueryOptions
						.newBuilder().setCredentials(credentials_tBigQueryOutput_3).setProjectId("otmirror-060322")
						.build().getService();

				/* ----END-CREATING-CLIENT (Cloud API)---- */

				long nb_line_tBigQueryOutput_3 = 0;

				com.google.auth.Credentials credential_tBigQueryOutput_3 = null;
				try {
					credential_tBigQueryOutput_3 = com.google.auth.oauth2.GoogleCredentials
							.fromStream(new java.io.FileInputStream(
									"/Users/jsun/Documents/WCIWork/OnTarget/code/otmirror-060322-9471bb896012.json"));
				} catch (IOException e_tBigQueryOutput_3) {
					globalMap.put("tBigQueryOutput_3_ERROR_MESSAGE", e_tBigQueryOutput_3.getMessage());
				}
				com.google.cloud.storage.Storage storage_tBigQueryOutput_3 = com.google.cloud.storage.StorageOptions
						.newBuilder().setCredentials(credential_tBigQueryOutput_3).build().getService();

				java.io.File file_tBigQueryOutput_3 = new java.io.File(
						"/Applications/TOSDI-8.0.1/studio/workspace/cost_center_data.avro");

				com.google.cloud.storage.BlobInfo blobInfo_tBigQueryOutput_3 = com.google.cloud.storage.BlobInfo
						.newBuilder("dw-tmp", file_tBigQueryOutput_3.getName()).build();
				storage_tBigQueryOutput_3.create(blobInfo_tBigQueryOutput_3,
						java.nio.file.Files.readAllBytes(file_tBigQueryOutput_3.toPath()));

				/* ----END-UPLOADING-FILE---- */

				/* ----START-CREATING-JOB (Cloud API)---- */
				com.google.cloud.bigquery.TableId tableId_tBigQueryOutput_3 = com.google.cloud.bigquery.TableId
						.of("otmirror-060322", "DW", "dim_cost_center");
				com.google.cloud.bigquery.LoadJobConfiguration.Builder loadJobBuilder_tBigQueryOutput_3 = com.google.cloud.bigquery.LoadJobConfiguration
						.newBuilder(tableId_tBigQueryOutput_3, "gs://dw-tmp/cost_center_data.avro");

				boolean dropTable_tBigQueryOutput_3 = false;

				if (dropTable_tBigQueryOutput_3
						&& bigquery_tBigQueryOutput_3.getTable(tableId_tBigQueryOutput_3) != null) {
					boolean deleted = bigquery_tBigQueryOutput_3.delete(tableId_tBigQueryOutput_3);
					if (deleted) {

					} else {
						throw new RuntimeException("Unable to delete table " + tableId_tBigQueryOutput_3);
					}
				}

				if (bigquery_tBigQueryOutput_3.getTable(tableId_tBigQueryOutput_3) == null) {
					java.util.List<com.google.cloud.bigquery.Field> fields_tBigQueryOutput_3 = new java.util.ArrayList<>();

					com.google.cloud.bigquery.Field field_0 = com.google.cloud.bigquery.Field
							.newBuilder("DW_ID", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_0);

					com.google.cloud.bigquery.Field field_1 = com.google.cloud.bigquery.Field
							.newBuilder("SRC_ERP_SCHEMA", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_1);

					com.google.cloud.bigquery.Field field_2 = com.google.cloud.bigquery.Field
							.newBuilder("SRC_ERP_ID", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_2);

					com.google.cloud.bigquery.Field field_3 = com.google.cloud.bigquery.Field
							.newBuilder("CC_Department_Code", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_3);

					com.google.cloud.bigquery.Field field_4 = com.google.cloud.bigquery.Field
							.newBuilder("description", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_4);

					com.google.cloud.bigquery.Field field_5 = com.google.cloud.bigquery.Field
							.newBuilder("CC_State_Code", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_5);

					com.google.cloud.bigquery.Field field_6 = com.google.cloud.bigquery.Field
							.newBuilder("inactive", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_6);

					com.google.cloud.bigquery.Field field_7 = com.google.cloud.bigquery.Field
							.newBuilder("CC_Address", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_7);

					com.google.cloud.bigquery.Field field_8 = com.google.cloud.bigquery.Field
							.newBuilder("CC_City", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_8);

					com.google.cloud.bigquery.Field field_9 = com.google.cloud.bigquery.Field
							.newBuilder("CC_State", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_9);

					com.google.cloud.bigquery.Field field_10 = com.google.cloud.bigquery.Field
							.newBuilder("CC_Zip", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_10);

					com.google.cloud.bigquery.Field field_11 = com.google.cloud.bigquery.Field
							.newBuilder("last_insert_ts", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_11);

					com.google.cloud.bigquery.Field field_12 = com.google.cloud.bigquery.Field
							.newBuilder("last_update_ts", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_3.add(field_12);

					com.google.cloud.bigquery.Schema schema_tBigQueryOutput_3 = com.google.cloud.bigquery.Schema
							.of(fields_tBigQueryOutput_3);
					com.google.cloud.bigquery.TableInfo tableInfo_tBigQueryOutput_3 = com.google.cloud.bigquery.TableInfo
							.newBuilder(tableId_tBigQueryOutput_3,
									com.google.cloud.bigquery.StandardTableDefinition.of(schema_tBigQueryOutput_3))
							.build();
					com.google.cloud.bigquery.Table table_tBigQueryOutput_3 = bigquery_tBigQueryOutput_3
							.create(tableInfo_tBigQueryOutput_3);
					loadJobBuilder_tBigQueryOutput_3.setSchema(schema_tBigQueryOutput_3);
					loadJobBuilder_tBigQueryOutput_3
							.setCreateDisposition(com.google.cloud.bigquery.JobInfo.CreateDisposition.CREATE_IF_NEEDED);

				} else {
					loadJobBuilder_tBigQueryOutput_3
							.setCreateDisposition(com.google.cloud.bigquery.JobInfo.CreateDisposition.CREATE_NEVER);
				}

				loadJobBuilder_tBigQueryOutput_3
						.setWriteDisposition(com.google.cloud.bigquery.JobInfo.WriteDisposition.WRITE_TRUNCATE);
				loadJobBuilder_tBigQueryOutput_3.setDestinationTable(tableId_tBigQueryOutput_3);
				com.google.cloud.bigquery.CsvOptions.Builder csvOptions_tBigQueryOutput_3 = com.google.cloud.bigquery.CsvOptions
						.newBuilder();
				csvOptions_tBigQueryOutput_3.setAllowQuotedNewLines(true);
				csvOptions_tBigQueryOutput_3.setSkipLeadingRows(0);

				csvOptions_tBigQueryOutput_3.setFieldDelimiter(",");

				loadJobBuilder_tBigQueryOutput_3.setFormatOptions(csvOptions_tBigQueryOutput_3.build());
				loadJobBuilder_tBigQueryOutput_3.setNullMarker("\\N");
				com.google.cloud.bigquery.Job job_tBigQueryOutput_3 = bigquery_tBigQueryOutput_3
						.create(com.google.cloud.bigquery.JobInfo.of(loadJobBuilder_tBigQueryOutput_3.build()));
				job_tBigQueryOutput_3 = job_tBigQueryOutput_3
						.waitFor(com.google.cloud.RetryOption.initialRetryDelay(org.threeten.bp.Duration.ofSeconds(1)));
				com.google.gson.Gson gsonObject_tBigQueryOutput_3 = new com.google.gson.Gson();
				if (job_tBigQueryOutput_3 != null && job_tBigQueryOutput_3.getStatus().getError() == null) {
					globalMap.put("tBigQueryOutput_3_JOBID", job_tBigQueryOutput_3.getJobId().getJob());
					globalMap.put("tBigQueryOutput_3_STATISTICS",
							gsonObject_tBigQueryOutput_3.toJson(job_tBigQueryOutput_3.getStatistics()));

				} else {
					if (job_tBigQueryOutput_3 == null) {
						throw new RuntimeException("Job no longer exists");
					}
					globalMap.put("tBigQueryOutput_3_JOBID", job_tBigQueryOutput_3.getJobId().getJob());
					globalMap.put("tBigQueryOutput_3_STATISTICS",
							gsonObject_tBigQueryOutput_3.toJson(job_tBigQueryOutput_3.getStatistics()));
					List<com.google.cloud.bigquery.BigQueryError> errorList = job_tBigQueryOutput_3.getStatus()
							.getExecutionErrors();
					throw new RuntimeException("Job failed: " + errorList.get(errorList.size() - 1));
				}

				/* ----END-CREATING-JOB (Cloud API)---- */

				/**
				 * [tBigQueryOutput_3_tBQBE begin ] stop
				 */

				/**
				 * [tBigQueryOutput_3_tBQBE main ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_3";

				currentComponent = "tBigQueryOutput_3_tBQBE";

				tos_count_tBigQueryOutput_3_tBQBE++;

				/**
				 * [tBigQueryOutput_3_tBQBE main ] stop
				 */

				/**
				 * [tBigQueryOutput_3_tBQBE process_data_begin ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_3";

				currentComponent = "tBigQueryOutput_3_tBQBE";

				/**
				 * [tBigQueryOutput_3_tBQBE process_data_begin ] stop
				 */

				/**
				 * [tBigQueryOutput_3_tBQBE process_data_end ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_3";

				currentComponent = "tBigQueryOutput_3_tBQBE";

				/**
				 * [tBigQueryOutput_3_tBQBE process_data_end ] stop
				 */

				/**
				 * [tBigQueryOutput_3_tBQBE end ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_3";

				currentComponent = "tBigQueryOutput_3_tBQBE";

				ok_Hash.put("tBigQueryOutput_3_tBQBE", true);
				end_Hash.put("tBigQueryOutput_3_tBQBE", System.currentTimeMillis());

				/**
				 * [tBigQueryOutput_3_tBQBE end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_3:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
			}

			tDBInput_4Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_3 finally ] start
				 */

				currentComponent = "tDBInput_3";

				/**
				 * [tDBInput_3 finally ] stop
				 */

				/**
				 * [tBigQueryOutput_3_tBQOB finally ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_3";

				currentComponent = "tBigQueryOutput_3_tBQOB";

				if (resourceMap.get("finish_tBigQueryOutput_3_tBQOB") == null) {
					if (resourceMap.get("csvWriter_tBigQueryOutput_3_tBQOB") != null) {
						((com.talend.csv.CSVWriter) resourceMap.get("csvWriter_tBigQueryOutput_3_tBQOB")).close();
					}
				}

				/**
				 * [tBigQueryOutput_3_tBQOB finally ] stop
				 */

				/**
				 * [tBigQueryOutput_3_tBQBE finally ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_3";

				currentComponent = "tBigQueryOutput_3_tBQBE";

				/**
				 * [tBigQueryOutput_3_tBQBE finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_ONTARGET_load_dim = new byte[0];
		static byte[] commonByteArray_ONTARGET_load_dim = new byte[0];

		public String DW_ID;

		public String getDW_ID() {
			return this.DW_ID;
		}

		public String SRC_ERP_SCHEMA;

		public String getSRC_ERP_SCHEMA() {
			return this.SRC_ERP_SCHEMA;
		}

		public Integer SRC_ERP_ID;

		public Integer getSRC_ERP_ID() {
			return this.SRC_ERP_ID;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public Long last_insert_ts;

		public Long getLast_insert_ts() {
			return this.last_insert_ts;
		}

		public Long last_update_ts;

		public Long getLast_update_ts() {
			return this.last_update_ts;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ONTARGET_load_dim.length) {
					if (length < 1024 && commonByteArray_ONTARGET_load_dim.length == 0) {
						commonByteArray_ONTARGET_load_dim = new byte[1024];
					} else {
						commonByteArray_ONTARGET_load_dim = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ONTARGET_load_dim, 0, length);
				strReturn = new String(commonByteArray_ONTARGET_load_dim, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ONTARGET_load_dim.length) {
					if (length < 1024 && commonByteArray_ONTARGET_load_dim.length == 0) {
						commonByteArray_ONTARGET_load_dim = new byte[1024];
					} else {
						commonByteArray_ONTARGET_load_dim = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_ONTARGET_load_dim, 0, length);
				strReturn = new String(commonByteArray_ONTARGET_load_dim, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ONTARGET_load_dim) {

				try {

					int length = 0;

					this.DW_ID = readString(dis);

					this.SRC_ERP_SCHEMA = readString(dis);

					this.SRC_ERP_ID = readInteger(dis);

					this.description = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.last_insert_ts = null;
					} else {
						this.last_insert_ts = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.last_update_ts = null;
					} else {
						this.last_update_ts = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ONTARGET_load_dim) {

				try {

					int length = 0;

					this.DW_ID = readString(dis);

					this.SRC_ERP_SCHEMA = readString(dis);

					this.SRC_ERP_ID = readInteger(dis);

					this.description = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.last_insert_ts = null;
					} else {
						this.last_insert_ts = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.last_update_ts = null;
					} else {
						this.last_update_ts = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.DW_ID, dos);

				// String

				writeString(this.SRC_ERP_SCHEMA, dos);

				// Integer

				writeInteger(this.SRC_ERP_ID, dos);

				// String

				writeString(this.description, dos);

				// Long

				if (this.last_insert_ts == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.last_insert_ts);
				}

				// Long

				if (this.last_update_ts == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.last_update_ts);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.DW_ID, dos);

				// String

				writeString(this.SRC_ERP_SCHEMA, dos);

				// Integer

				writeInteger(this.SRC_ERP_ID, dos);

				// String

				writeString(this.description, dos);

				// Long

				if (this.last_insert_ts == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.last_insert_ts);
				}

				// Long

				if (this.last_update_ts == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.last_update_ts);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("DW_ID=" + DW_ID);
			sb.append(",SRC_ERP_SCHEMA=" + SRC_ERP_SCHEMA);
			sb.append(",SRC_ERP_ID=" + String.valueOf(SRC_ERP_ID));
			sb.append(",description=" + description);
			sb.append(",last_insert_ts=" + String.valueOf(last_insert_ts));
			sb.append(",last_update_ts=" + String.valueOf(last_update_ts));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();

				/**
				 * [tBigQueryOutput_4_tBQOB begin ] start
				 */

				ok_Hash.put("tBigQueryOutput_4_tBQOB", false);
				start_Hash.put("tBigQueryOutput_4_tBQOB", System.currentTimeMillis());

				currentVirtualComponent = "tBigQueryOutput_4";

				currentComponent = "tBigQueryOutput_4_tBQOB";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row4");
				}

				int tos_count_tBigQueryOutput_4_tBQOB = 0;

				int nb_line_tBigQueryOutput_4_tBQOB = 0;
				String rowSeparator_tBigQueryOutput_4_tBQOB = "\n";
				String fieldSeparator_tBigQueryOutput_4_tBQOB = ",";
				char escapeChar_tBigQueryOutput_4_tBQOB = "\\".charAt(0);
				char textEnclosure_tBigQueryOutput_4_tBQOB = "\"".charAt(0);

				escapeChar_tBigQueryOutput_4_tBQOB = textEnclosure_tBigQueryOutput_4_tBQOB;

				if (escapeChar_tBigQueryOutput_4_tBQOB == '\\') {
				} else if (escapeChar_tBigQueryOutput_4_tBQOB == textEnclosure_tBigQueryOutput_4_tBQOB) {
				} else {
					throw new RuntimeException("The escape mode only support the '\\' or double text enclosure.");
				}

				java.io.File file_tBigQueryOutput_4_tBQOB = new java.io.File(
						"/Applications/TOSDI-8.0.1/studio/workspace/department_data.avro");

				file_tBigQueryOutput_4_tBQOB.getParentFile().mkdirs();

				com.talend.csv.CSVWriter csvWriter_tBigQueryOutput_4_tBQOB = new com.talend.csv.CSVWriter(
						new java.io.BufferedWriter(new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(file_tBigQueryOutput_4_tBQOB, false), "ISO-8859-15")));
				resourceMap.put("csvWriter_tBigQueryOutput_4_tBQOB", csvWriter_tBigQueryOutput_4_tBQOB);
				csvWriter_tBigQueryOutput_4_tBQOB.setSeparator(fieldSeparator_tBigQueryOutput_4_tBQOB.charAt(0));

				csvWriter_tBigQueryOutput_4_tBQOB.setLineEnd(rowSeparator_tBigQueryOutput_4_tBQOB);
				csvWriter_tBigQueryOutput_4_tBQOB.setEscapeChar(escapeChar_tBigQueryOutput_4_tBQOB);
				csvWriter_tBigQueryOutput_4_tBQOB.setQuoteChar(textEnclosure_tBigQueryOutput_4_tBQOB);
				csvWriter_tBigQueryOutput_4_tBQOB.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.AUTO);

				/**
				 * [tBigQueryOutput_4_tBQOB begin ] stop
				 */

				/**
				 * [tDBInput_4 begin ] start
				 */

				ok_Hash.put("tDBInput_4", false);
				start_Hash.put("tDBInput_4", System.currentTimeMillis());

				currentComponent = "tDBInput_4";

				int tos_count_tDBInput_4 = 0;

				int nb_line_tDBInput_4 = 0;
				java.sql.Connection conn_tDBInput_4 = null;
				String driverClass_tDBInput_4 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBInput_4 = java.lang.Class.forName(driverClass_tDBInput_4);
				String dbUser_tDBInput_4 = "postgres";

				final String decryptedPassword_tDBInput_4 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:RybawLipRo6h+NSwTNjz4jhh097blGQx2kBklHjgd1sls/Sbaus=");

				String dbPwd_tDBInput_4 = decryptedPassword_tDBInput_4;

				String url_tDBInput_4 = "jdbc:postgresql://" + "localhost" + ":" + "5431" + "/" + "OnTarget";

				conn_tDBInput_4 = java.sql.DriverManager.getConnection(url_tDBInput_4, dbUser_tDBInput_4,
						dbPwd_tDBInput_4);

				conn_tDBInput_4.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

				String dbquery_tDBInput_4 = "select cast(md5('smallmiracle_dim_client_'||cast(id as varchar(10))) as varchar(50)) as DW_ID,\n        'smallmiracle' a"
						+ "s SRC_ERP_SCHEMA,\n        id as SRC_ERP_ID,\n        description,\n        cast(to_char((current_timestamp)::TIMESTAMP,'yy"
						+ "yymmddhhmiss') as BigInt) as last_insert_ts,\n        cast(19000101000000 as bigint) as last_update_ts\n        from small"
						+ "miracle.prbusdepartment";

				globalMap.put("tDBInput_4_QUERY", dbquery_tDBInput_4);
				java.sql.ResultSet rs_tDBInput_4 = null;

				try {
					rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
					java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
					int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

					String tmpContent_tDBInput_4 = null;

					while (rs_tDBInput_4.next()) {
						nb_line_tDBInput_4++;

						if (colQtyInRs_tDBInput_4 < 1) {
							row4.DW_ID = null;
						} else {

							row4.DW_ID = routines.system.JDBCUtil.getString(rs_tDBInput_4, 1, false);
						}
						if (colQtyInRs_tDBInput_4 < 2) {
							row4.SRC_ERP_SCHEMA = null;
						} else {

							row4.SRC_ERP_SCHEMA = routines.system.JDBCUtil.getString(rs_tDBInput_4, 2, false);
						}
						if (colQtyInRs_tDBInput_4 < 3) {
							row4.SRC_ERP_ID = null;
						} else {

							row4.SRC_ERP_ID = rs_tDBInput_4.getInt(3);
							if (rs_tDBInput_4.wasNull()) {
								row4.SRC_ERP_ID = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 4) {
							row4.description = null;
						} else {

							row4.description = routines.system.JDBCUtil.getString(rs_tDBInput_4, 4, false);
						}
						if (colQtyInRs_tDBInput_4 < 5) {
							row4.last_insert_ts = null;
						} else {

							row4.last_insert_ts = rs_tDBInput_4.getLong(5);
							if (rs_tDBInput_4.wasNull()) {
								row4.last_insert_ts = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 6) {
							row4.last_update_ts = null;
						} else {

							row4.last_update_ts = rs_tDBInput_4.getLong(6);
							if (rs_tDBInput_4.wasNull()) {
								row4.last_update_ts = null;
							}
						}

						/**
						 * [tDBInput_4 begin ] stop
						 */

						/**
						 * [tDBInput_4 main ] start
						 */

						currentComponent = "tDBInput_4";

						tos_count_tDBInput_4++;

						/**
						 * [tDBInput_4 main ] stop
						 */

						/**
						 * [tDBInput_4 process_data_begin ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_begin ] stop
						 */

						/**
						 * [tBigQueryOutput_4_tBQOB main ] start
						 */

						currentVirtualComponent = "tBigQueryOutput_4";

						currentComponent = "tBigQueryOutput_4_tBQOB";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row4"

							);
						}

						String[] row_tBigQueryOutput_4_tBQOB = new String[6];
						java.util.Arrays.fill(row_tBigQueryOutput_4_tBQOB, "\\N");

						int curColumnIndex_tBigQueryOutput_4_tBQOB = 0;

						curColumnIndex_tBigQueryOutput_4_tBQOB = 0;

						if (row4.DW_ID != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = row4.DW_ID;

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 1;

						if (row4.SRC_ERP_SCHEMA != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = row4.SRC_ERP_SCHEMA;

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 2;

						if (row4.SRC_ERP_ID != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = String
									.valueOf(row4.SRC_ERP_ID);

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 3;

						if (row4.description != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = row4.description;

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 4;

						if (row4.last_insert_ts != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = String
									.valueOf(row4.last_insert_ts);

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_4_tBQOB = 5;

						if (row4.last_update_ts != null) {

							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = String
									.valueOf(row4.last_update_ts);

						} else {
							row_tBigQueryOutput_4_tBQOB[curColumnIndex_tBigQueryOutput_4_tBQOB] = "\\N";
						}

						csvWriter_tBigQueryOutput_4_tBQOB.writeNextEnhance(row_tBigQueryOutput_4_tBQOB, "");
						nb_line_tBigQueryOutput_4_tBQOB++;

						tos_count_tBigQueryOutput_4_tBQOB++;

						/**
						 * [tBigQueryOutput_4_tBQOB main ] stop
						 */

						/**
						 * [tBigQueryOutput_4_tBQOB process_data_begin ] start
						 */

						currentVirtualComponent = "tBigQueryOutput_4";

						currentComponent = "tBigQueryOutput_4_tBQOB";

						/**
						 * [tBigQueryOutput_4_tBQOB process_data_begin ] stop
						 */

						/**
						 * [tBigQueryOutput_4_tBQOB process_data_end ] start
						 */

						currentVirtualComponent = "tBigQueryOutput_4";

						currentComponent = "tBigQueryOutput_4_tBQOB";

						/**
						 * [tBigQueryOutput_4_tBQOB process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 process_data_end ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 end ] start
						 */

						currentComponent = "tDBInput_4";

					}
				} finally {
					if (rs_tDBInput_4 != null) {
						rs_tDBInput_4.close();
					}
					if (stmt_tDBInput_4 != null) {
						stmt_tDBInput_4.close();
					}
					if (conn_tDBInput_4 != null && !conn_tDBInput_4.isClosed()) {

						conn_tDBInput_4.commit();

						conn_tDBInput_4.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}
				globalMap.put("tDBInput_4_NB_LINE", nb_line_tDBInput_4);

				ok_Hash.put("tDBInput_4", true);
				end_Hash.put("tDBInput_4", System.currentTimeMillis());

				/**
				 * [tDBInput_4 end ] stop
				 */

				/**
				 * [tBigQueryOutput_4_tBQOB end ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_4";

				currentComponent = "tBigQueryOutput_4_tBQOB";

				if (csvWriter_tBigQueryOutput_4_tBQOB != null) {
					csvWriter_tBigQueryOutput_4_tBQOB.close();
				}
				resourceMap.put("finish_tBigQueryOutput_4_tBQOB", true);
				globalMap.put("tBigQueryOutput_4_tBQOB_NB_LINE", nb_line_tBigQueryOutput_4_tBQOB);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row4");
				}

				ok_Hash.put("tBigQueryOutput_4_tBQOB", true);
				end_Hash.put("tBigQueryOutput_4_tBQOB", System.currentTimeMillis());

				/**
				 * [tBigQueryOutput_4_tBQOB end ] stop
				 */

				/**
				 * [tBigQueryOutput_4_tBQBE begin ] start
				 */

				ok_Hash.put("tBigQueryOutput_4_tBQBE", false);
				start_Hash.put("tBigQueryOutput_4_tBQBE", System.currentTimeMillis());

				currentVirtualComponent = "tBigQueryOutput_4";

				currentComponent = "tBigQueryOutput_4_tBQBE";

				int tos_count_tBigQueryOutput_4_tBQBE = 0;

				/* ----START-CREATING-CLIENT (Cloud API)---- */

				com.google.auth.oauth2.GoogleCredentials credentials_tBigQueryOutput_4;
				java.io.File credentialsFile_tBigQueryOutput_4 = new java.io.File(
						"/Users/jsun/Documents/WCIWork/OnTarget/code/otmirror-060322-9471bb896012.json");
				try (java.io.FileInputStream credentialsStream_tBigQueryOutput_4 = new java.io.FileInputStream(
						credentialsFile_tBigQueryOutput_4)) {
					credentials_tBigQueryOutput_4 = com.google.auth.oauth2.ServiceAccountCredentials
							.fromStream(credentialsStream_tBigQueryOutput_4);
				}

				com.google.cloud.bigquery.BigQuery bigquery_tBigQueryOutput_4 = com.google.cloud.bigquery.BigQueryOptions
						.newBuilder().setCredentials(credentials_tBigQueryOutput_4).setProjectId("otmirror-060322")
						.build().getService();

				/* ----END-CREATING-CLIENT (Cloud API)---- */

				long nb_line_tBigQueryOutput_4 = 0;

				com.google.auth.Credentials credential_tBigQueryOutput_4 = null;
				try {
					credential_tBigQueryOutput_4 = com.google.auth.oauth2.GoogleCredentials
							.fromStream(new java.io.FileInputStream(
									"/Users/jsun/Documents/WCIWork/OnTarget/code/otmirror-060322-9471bb896012.json"));
				} catch (IOException e_tBigQueryOutput_4) {
					globalMap.put("tBigQueryOutput_4_ERROR_MESSAGE", e_tBigQueryOutput_4.getMessage());
				}
				com.google.cloud.storage.Storage storage_tBigQueryOutput_4 = com.google.cloud.storage.StorageOptions
						.newBuilder().setCredentials(credential_tBigQueryOutput_4).build().getService();

				java.io.File file_tBigQueryOutput_4 = new java.io.File(
						"/Applications/TOSDI-8.0.1/studio/workspace/department_data.avro");

				com.google.cloud.storage.BlobInfo blobInfo_tBigQueryOutput_4 = com.google.cloud.storage.BlobInfo
						.newBuilder("dw-tmp", file_tBigQueryOutput_4.getName()).build();
				storage_tBigQueryOutput_4.create(blobInfo_tBigQueryOutput_4,
						java.nio.file.Files.readAllBytes(file_tBigQueryOutput_4.toPath()));

				/* ----END-UPLOADING-FILE---- */

				/* ----START-CREATING-JOB (Cloud API)---- */
				com.google.cloud.bigquery.TableId tableId_tBigQueryOutput_4 = com.google.cloud.bigquery.TableId
						.of("otmirror-060322", "DW", "dim_department");
				com.google.cloud.bigquery.LoadJobConfiguration.Builder loadJobBuilder_tBigQueryOutput_4 = com.google.cloud.bigquery.LoadJobConfiguration
						.newBuilder(tableId_tBigQueryOutput_4, "gs://dw-tmp/department_data.avro");

				boolean dropTable_tBigQueryOutput_4 = false;

				if (dropTable_tBigQueryOutput_4
						&& bigquery_tBigQueryOutput_4.getTable(tableId_tBigQueryOutput_4) != null) {
					boolean deleted = bigquery_tBigQueryOutput_4.delete(tableId_tBigQueryOutput_4);
					if (deleted) {

					} else {
						throw new RuntimeException("Unable to delete table " + tableId_tBigQueryOutput_4);
					}
				}

				if (bigquery_tBigQueryOutput_4.getTable(tableId_tBigQueryOutput_4) == null) {
					java.util.List<com.google.cloud.bigquery.Field> fields_tBigQueryOutput_4 = new java.util.ArrayList<>();

					com.google.cloud.bigquery.Field field_0 = com.google.cloud.bigquery.Field
							.newBuilder("DW_ID", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_0);

					com.google.cloud.bigquery.Field field_1 = com.google.cloud.bigquery.Field
							.newBuilder("SRC_ERP_SCHEMA", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_1);

					com.google.cloud.bigquery.Field field_2 = com.google.cloud.bigquery.Field
							.newBuilder("SRC_ERP_ID", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_2);

					com.google.cloud.bigquery.Field field_3 = com.google.cloud.bigquery.Field
							.newBuilder("description", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_3);

					com.google.cloud.bigquery.Field field_4 = com.google.cloud.bigquery.Field
							.newBuilder("last_insert_ts", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_4);

					com.google.cloud.bigquery.Field field_5 = com.google.cloud.bigquery.Field
							.newBuilder("last_update_ts", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_4.add(field_5);

					com.google.cloud.bigquery.Schema schema_tBigQueryOutput_4 = com.google.cloud.bigquery.Schema
							.of(fields_tBigQueryOutput_4);
					com.google.cloud.bigquery.TableInfo tableInfo_tBigQueryOutput_4 = com.google.cloud.bigquery.TableInfo
							.newBuilder(tableId_tBigQueryOutput_4,
									com.google.cloud.bigquery.StandardTableDefinition.of(schema_tBigQueryOutput_4))
							.build();
					com.google.cloud.bigquery.Table table_tBigQueryOutput_4 = bigquery_tBigQueryOutput_4
							.create(tableInfo_tBigQueryOutput_4);
					loadJobBuilder_tBigQueryOutput_4.setSchema(schema_tBigQueryOutput_4);
					loadJobBuilder_tBigQueryOutput_4
							.setCreateDisposition(com.google.cloud.bigquery.JobInfo.CreateDisposition.CREATE_IF_NEEDED);

				} else {
					loadJobBuilder_tBigQueryOutput_4
							.setCreateDisposition(com.google.cloud.bigquery.JobInfo.CreateDisposition.CREATE_NEVER);
				}

				loadJobBuilder_tBigQueryOutput_4
						.setWriteDisposition(com.google.cloud.bigquery.JobInfo.WriteDisposition.WRITE_TRUNCATE);
				loadJobBuilder_tBigQueryOutput_4.setDestinationTable(tableId_tBigQueryOutput_4);
				com.google.cloud.bigquery.CsvOptions.Builder csvOptions_tBigQueryOutput_4 = com.google.cloud.bigquery.CsvOptions
						.newBuilder();
				csvOptions_tBigQueryOutput_4.setAllowQuotedNewLines(true);
				csvOptions_tBigQueryOutput_4.setSkipLeadingRows(0);

				csvOptions_tBigQueryOutput_4.setFieldDelimiter(",");

				loadJobBuilder_tBigQueryOutput_4.setFormatOptions(csvOptions_tBigQueryOutput_4.build());
				loadJobBuilder_tBigQueryOutput_4.setNullMarker("\\N");
				com.google.cloud.bigquery.Job job_tBigQueryOutput_4 = bigquery_tBigQueryOutput_4
						.create(com.google.cloud.bigquery.JobInfo.of(loadJobBuilder_tBigQueryOutput_4.build()));
				job_tBigQueryOutput_4 = job_tBigQueryOutput_4
						.waitFor(com.google.cloud.RetryOption.initialRetryDelay(org.threeten.bp.Duration.ofSeconds(1)));
				com.google.gson.Gson gsonObject_tBigQueryOutput_4 = new com.google.gson.Gson();
				if (job_tBigQueryOutput_4 != null && job_tBigQueryOutput_4.getStatus().getError() == null) {
					globalMap.put("tBigQueryOutput_4_JOBID", job_tBigQueryOutput_4.getJobId().getJob());
					globalMap.put("tBigQueryOutput_4_STATISTICS",
							gsonObject_tBigQueryOutput_4.toJson(job_tBigQueryOutput_4.getStatistics()));

				} else {
					if (job_tBigQueryOutput_4 == null) {
						throw new RuntimeException("Job no longer exists");
					}
					globalMap.put("tBigQueryOutput_4_JOBID", job_tBigQueryOutput_4.getJobId().getJob());
					globalMap.put("tBigQueryOutput_4_STATISTICS",
							gsonObject_tBigQueryOutput_4.toJson(job_tBigQueryOutput_4.getStatistics()));
					List<com.google.cloud.bigquery.BigQueryError> errorList = job_tBigQueryOutput_4.getStatus()
							.getExecutionErrors();
					throw new RuntimeException("Job failed: " + errorList.get(errorList.size() - 1));
				}

				/* ----END-CREATING-JOB (Cloud API)---- */

				/**
				 * [tBigQueryOutput_4_tBQBE begin ] stop
				 */

				/**
				 * [tBigQueryOutput_4_tBQBE main ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_4";

				currentComponent = "tBigQueryOutput_4_tBQBE";

				tos_count_tBigQueryOutput_4_tBQBE++;

				/**
				 * [tBigQueryOutput_4_tBQBE main ] stop
				 */

				/**
				 * [tBigQueryOutput_4_tBQBE process_data_begin ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_4";

				currentComponent = "tBigQueryOutput_4_tBQBE";

				/**
				 * [tBigQueryOutput_4_tBQBE process_data_begin ] stop
				 */

				/**
				 * [tBigQueryOutput_4_tBQBE process_data_end ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_4";

				currentComponent = "tBigQueryOutput_4_tBQBE";

				/**
				 * [tBigQueryOutput_4_tBQBE process_data_end ] stop
				 */

				/**
				 * [tBigQueryOutput_4_tBQBE end ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_4";

				currentComponent = "tBigQueryOutput_4_tBQBE";

				ok_Hash.put("tBigQueryOutput_4_tBQBE", true);
				end_Hash.put("tBigQueryOutput_4_tBQBE", System.currentTimeMillis());

				/**
				 * [tBigQueryOutput_4_tBQBE end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_4:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
			}

			tDBInput_5Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_4 finally ] start
				 */

				currentComponent = "tDBInput_4";

				/**
				 * [tDBInput_4 finally ] stop
				 */

				/**
				 * [tBigQueryOutput_4_tBQOB finally ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_4";

				currentComponent = "tBigQueryOutput_4_tBQOB";

				if (resourceMap.get("finish_tBigQueryOutput_4_tBQOB") == null) {
					if (resourceMap.get("csvWriter_tBigQueryOutput_4_tBQOB") != null) {
						((com.talend.csv.CSVWriter) resourceMap.get("csvWriter_tBigQueryOutput_4_tBQOB")).close();
					}
				}

				/**
				 * [tBigQueryOutput_4_tBQOB finally ] stop
				 */

				/**
				 * [tBigQueryOutput_4_tBQBE finally ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_4";

				currentComponent = "tBigQueryOutput_4_tBQBE";

				/**
				 * [tBigQueryOutput_4_tBQBE finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}

	public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_ONTARGET_load_dim = new byte[0];
		static byte[] commonByteArray_ONTARGET_load_dim = new byte[0];

		public String DW_ID;

		public String getDW_ID() {
			return this.DW_ID;
		}

		public String SRC_ERP_SCHEMA;

		public String getSRC_ERP_SCHEMA() {
			return this.SRC_ERP_SCHEMA;
		}

		public Integer SRC_ERP_ID;

		public Integer getSRC_ERP_ID() {
			return this.SRC_ERP_ID;
		}

		public String code;

		public String getCode() {
			return this.code;
		}

		public String Last_Name;

		public String getLast_Name() {
			return this.Last_Name;
		}

		public String First_Middle_Name;

		public String getFirst_Middle_Name() {
			return this.First_Middle_Name;
		}

		public Boolean terminated;

		public Boolean getTerminated() {
			return this.terminated;
		}

		public Integer Date_Terminated;

		public Integer getDate_Terminated() {
			return this.Date_Terminated;
		}

		public Integer Date_Employed;

		public Integer getDate_Employed() {
			return this.Date_Employed;
		}

		public Integer Date_Of_Birth;

		public Integer getDate_Of_Birth() {
			return this.Date_Of_Birth;
		}

		public String Gender;

		public String getGender() {
			return this.Gender;
		}

		public String Work_Email_Address;

		public String getWork_Email_Address() {
			return this.Work_Email_Address;
		}

		public Integer Emp_Department_ID;

		public Integer getEmp_Department_ID() {
			return this.Emp_Department_ID;
		}

		public Boolean inactive;

		public Boolean getInactive() {
			return this.inactive;
		}

		public Integer Supervisor_Emp_ID;

		public Integer getSupervisor_Emp_ID() {
			return this.Supervisor_Emp_ID;
		}

		public Long last_insert_ts;

		public Long getLast_insert_ts() {
			return this.last_insert_ts;
		}

		public Long last_update_ts;

		public Long getLast_update_ts() {
			return this.last_update_ts;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ONTARGET_load_dim.length) {
					if (length < 1024 && commonByteArray_ONTARGET_load_dim.length == 0) {
						commonByteArray_ONTARGET_load_dim = new byte[1024];
					} else {
						commonByteArray_ONTARGET_load_dim = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ONTARGET_load_dim, 0, length);
				strReturn = new String(commonByteArray_ONTARGET_load_dim, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ONTARGET_load_dim.length) {
					if (length < 1024 && commonByteArray_ONTARGET_load_dim.length == 0) {
						commonByteArray_ONTARGET_load_dim = new byte[1024];
					} else {
						commonByteArray_ONTARGET_load_dim = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_ONTARGET_load_dim, 0, length);
				strReturn = new String(commonByteArray_ONTARGET_load_dim, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ONTARGET_load_dim) {

				try {

					int length = 0;

					this.DW_ID = readString(dis);

					this.SRC_ERP_SCHEMA = readString(dis);

					this.SRC_ERP_ID = readInteger(dis);

					this.code = readString(dis);

					this.Last_Name = readString(dis);

					this.First_Middle_Name = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.terminated = null;
					} else {
						this.terminated = dis.readBoolean();
					}

					this.Date_Terminated = readInteger(dis);

					this.Date_Employed = readInteger(dis);

					this.Date_Of_Birth = readInteger(dis);

					this.Gender = readString(dis);

					this.Work_Email_Address = readString(dis);

					this.Emp_Department_ID = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.inactive = null;
					} else {
						this.inactive = dis.readBoolean();
					}

					this.Supervisor_Emp_ID = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.last_insert_ts = null;
					} else {
						this.last_insert_ts = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.last_update_ts = null;
					} else {
						this.last_update_ts = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ONTARGET_load_dim) {

				try {

					int length = 0;

					this.DW_ID = readString(dis);

					this.SRC_ERP_SCHEMA = readString(dis);

					this.SRC_ERP_ID = readInteger(dis);

					this.code = readString(dis);

					this.Last_Name = readString(dis);

					this.First_Middle_Name = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.terminated = null;
					} else {
						this.terminated = dis.readBoolean();
					}

					this.Date_Terminated = readInteger(dis);

					this.Date_Employed = readInteger(dis);

					this.Date_Of_Birth = readInteger(dis);

					this.Gender = readString(dis);

					this.Work_Email_Address = readString(dis);

					this.Emp_Department_ID = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.inactive = null;
					} else {
						this.inactive = dis.readBoolean();
					}

					this.Supervisor_Emp_ID = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.last_insert_ts = null;
					} else {
						this.last_insert_ts = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.last_update_ts = null;
					} else {
						this.last_update_ts = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.DW_ID, dos);

				// String

				writeString(this.SRC_ERP_SCHEMA, dos);

				// Integer

				writeInteger(this.SRC_ERP_ID, dos);

				// String

				writeString(this.code, dos);

				// String

				writeString(this.Last_Name, dos);

				// String

				writeString(this.First_Middle_Name, dos);

				// Boolean

				if (this.terminated == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.terminated);
				}

				// Integer

				writeInteger(this.Date_Terminated, dos);

				// Integer

				writeInteger(this.Date_Employed, dos);

				// Integer

				writeInteger(this.Date_Of_Birth, dos);

				// String

				writeString(this.Gender, dos);

				// String

				writeString(this.Work_Email_Address, dos);

				// Integer

				writeInteger(this.Emp_Department_ID, dos);

				// Boolean

				if (this.inactive == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.inactive);
				}

				// Integer

				writeInteger(this.Supervisor_Emp_ID, dos);

				// Long

				if (this.last_insert_ts == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.last_insert_ts);
				}

				// Long

				if (this.last_update_ts == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.last_update_ts);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.DW_ID, dos);

				// String

				writeString(this.SRC_ERP_SCHEMA, dos);

				// Integer

				writeInteger(this.SRC_ERP_ID, dos);

				// String

				writeString(this.code, dos);

				// String

				writeString(this.Last_Name, dos);

				// String

				writeString(this.First_Middle_Name, dos);

				// Boolean

				if (this.terminated == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.terminated);
				}

				// Integer

				writeInteger(this.Date_Terminated, dos);

				// Integer

				writeInteger(this.Date_Employed, dos);

				// Integer

				writeInteger(this.Date_Of_Birth, dos);

				// String

				writeString(this.Gender, dos);

				// String

				writeString(this.Work_Email_Address, dos);

				// Integer

				writeInteger(this.Emp_Department_ID, dos);

				// Boolean

				if (this.inactive == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.inactive);
				}

				// Integer

				writeInteger(this.Supervisor_Emp_ID, dos);

				// Long

				if (this.last_insert_ts == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.last_insert_ts);
				}

				// Long

				if (this.last_update_ts == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.last_update_ts);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("DW_ID=" + DW_ID);
			sb.append(",SRC_ERP_SCHEMA=" + SRC_ERP_SCHEMA);
			sb.append(",SRC_ERP_ID=" + String.valueOf(SRC_ERP_ID));
			sb.append(",code=" + code);
			sb.append(",Last_Name=" + Last_Name);
			sb.append(",First_Middle_Name=" + First_Middle_Name);
			sb.append(",terminated=" + String.valueOf(terminated));
			sb.append(",Date_Terminated=" + String.valueOf(Date_Terminated));
			sb.append(",Date_Employed=" + String.valueOf(Date_Employed));
			sb.append(",Date_Of_Birth=" + String.valueOf(Date_Of_Birth));
			sb.append(",Gender=" + Gender);
			sb.append(",Work_Email_Address=" + Work_Email_Address);
			sb.append(",Emp_Department_ID=" + String.valueOf(Emp_Department_ID));
			sb.append(",inactive=" + String.valueOf(inactive));
			sb.append(",Supervisor_Emp_ID=" + String.valueOf(Supervisor_Emp_ID));
			sb.append(",last_insert_ts=" + String.valueOf(last_insert_ts));
			sb.append(",last_update_ts=" + String.valueOf(last_update_ts));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row5Struct row5 = new row5Struct();

				/**
				 * [tBigQueryOutput_5_tBQOB begin ] start
				 */

				ok_Hash.put("tBigQueryOutput_5_tBQOB", false);
				start_Hash.put("tBigQueryOutput_5_tBQOB", System.currentTimeMillis());

				currentVirtualComponent = "tBigQueryOutput_5";

				currentComponent = "tBigQueryOutput_5_tBQOB";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row5");
				}

				int tos_count_tBigQueryOutput_5_tBQOB = 0;

				int nb_line_tBigQueryOutput_5_tBQOB = 0;
				String rowSeparator_tBigQueryOutput_5_tBQOB = "\n";
				String fieldSeparator_tBigQueryOutput_5_tBQOB = ",";
				char escapeChar_tBigQueryOutput_5_tBQOB = "\\".charAt(0);
				char textEnclosure_tBigQueryOutput_5_tBQOB = "\"".charAt(0);

				escapeChar_tBigQueryOutput_5_tBQOB = textEnclosure_tBigQueryOutput_5_tBQOB;

				if (escapeChar_tBigQueryOutput_5_tBQOB == '\\') {
				} else if (escapeChar_tBigQueryOutput_5_tBQOB == textEnclosure_tBigQueryOutput_5_tBQOB) {
				} else {
					throw new RuntimeException("The escape mode only support the '\\' or double text enclosure.");
				}

				java.io.File file_tBigQueryOutput_5_tBQOB = new java.io.File(
						"/Applications/TOSDI-8.0.1/studio/workspace/employee_data.avro");

				file_tBigQueryOutput_5_tBQOB.getParentFile().mkdirs();

				com.talend.csv.CSVWriter csvWriter_tBigQueryOutput_5_tBQOB = new com.talend.csv.CSVWriter(
						new java.io.BufferedWriter(new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(file_tBigQueryOutput_5_tBQOB, false), "ISO-8859-15")));
				resourceMap.put("csvWriter_tBigQueryOutput_5_tBQOB", csvWriter_tBigQueryOutput_5_tBQOB);
				csvWriter_tBigQueryOutput_5_tBQOB.setSeparator(fieldSeparator_tBigQueryOutput_5_tBQOB.charAt(0));

				csvWriter_tBigQueryOutput_5_tBQOB.setLineEnd(rowSeparator_tBigQueryOutput_5_tBQOB);
				csvWriter_tBigQueryOutput_5_tBQOB.setEscapeChar(escapeChar_tBigQueryOutput_5_tBQOB);
				csvWriter_tBigQueryOutput_5_tBQOB.setQuoteChar(textEnclosure_tBigQueryOutput_5_tBQOB);
				csvWriter_tBigQueryOutput_5_tBQOB.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.AUTO);

				/**
				 * [tBigQueryOutput_5_tBQOB begin ] stop
				 */

				/**
				 * [tDBInput_5 begin ] start
				 */

				ok_Hash.put("tDBInput_5", false);
				start_Hash.put("tDBInput_5", System.currentTimeMillis());

				currentComponent = "tDBInput_5";

				int tos_count_tDBInput_5 = 0;

				int nb_line_tDBInput_5 = 0;
				java.sql.Connection conn_tDBInput_5 = null;
				String driverClass_tDBInput_5 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBInput_5 = java.lang.Class.forName(driverClass_tDBInput_5);
				String dbUser_tDBInput_5 = "postgres";

				final String decryptedPassword_tDBInput_5 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:goEbVmHR4NmF072MbXLeGHtGfKcj7GgYV0Gtp/ZezSfdyrEOzyU=");

				String dbPwd_tDBInput_5 = decryptedPassword_tDBInput_5;

				String url_tDBInput_5 = "jdbc:postgresql://" + "localhost" + ":" + "5431" + "/" + "OnTarget";

				conn_tDBInput_5 = java.sql.DriverManager.getConnection(url_tDBInput_5, dbUser_tDBInput_5,
						dbPwd_tDBInput_5);

				conn_tDBInput_5.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5.createStatement();

				String dbquery_tDBInput_5 = "select cast(md5('smallmiracle_dim_client_'||cast(emp.id as varchar(10))) as varchar(50)) as DW_ID,\n        'smallmiracl"
						+ "e' as SRC_ERP_SCHEMA,\n        emp.id as SRC_ERP_ID,\n        emp.code as code,\n        emp.lastname as Last_Name,\n       "
						+ " emp.firstnamemi as First_Middle_Name,\n        emp.terminated as terminated,\n        cast(to_char(date(emp.dateterminate"
						+ "d),'YYYYMMDD') as int) as Date_Terminated,\n        cast(to_char(date(emp.dateemployed),'YYYYMMDD') as int) as Date_Emplo"
						+ "yed,\n        cast(to_char(date(emp.dateofbirth),'YYYYMMDD') as int) as Date_Of_Birth,\n        emp.gender as Gender,\n    "
						+ "    empdemo.workemailaddress as Work_Email_Address,\n        cast(coalesce(empdemo.prbusdepartmentid,-1) as int) as emp_d"
						+ "epartment_id,\n        emp.inactive as inactive,\n        cast(coalesce(emp.premployeeidsupervisor,-1) as int) as Supervis"
						+ "or_Emp_ID,\n        cast(to_char((current_timestamp)::TIMESTAMP,'yyyymmddhhmiss') as BigInt) as last_insert_ts,\n        c"
						+ "ast(19000101000000 as bigint) as last_update_ts\n        from smallmiracle.premployee emp\n        left join smallmiracle."
						+ "prempdemo empdemo ON emp.id = empdemo.premployeeid";

				globalMap.put("tDBInput_5_QUERY", dbquery_tDBInput_5);
				java.sql.ResultSet rs_tDBInput_5 = null;

				try {
					rs_tDBInput_5 = stmt_tDBInput_5.executeQuery(dbquery_tDBInput_5);
					java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5.getMetaData();
					int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5.getColumnCount();

					String tmpContent_tDBInput_5 = null;

					while (rs_tDBInput_5.next()) {
						nb_line_tDBInput_5++;

						if (colQtyInRs_tDBInput_5 < 1) {
							row5.DW_ID = null;
						} else {

							row5.DW_ID = routines.system.JDBCUtil.getString(rs_tDBInput_5, 1, false);
						}
						if (colQtyInRs_tDBInput_5 < 2) {
							row5.SRC_ERP_SCHEMA = null;
						} else {

							row5.SRC_ERP_SCHEMA = routines.system.JDBCUtil.getString(rs_tDBInput_5, 2, false);
						}
						if (colQtyInRs_tDBInput_5 < 3) {
							row5.SRC_ERP_ID = null;
						} else {

							row5.SRC_ERP_ID = rs_tDBInput_5.getInt(3);
							if (rs_tDBInput_5.wasNull()) {
								row5.SRC_ERP_ID = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 4) {
							row5.code = null;
						} else {

							row5.code = routines.system.JDBCUtil.getString(rs_tDBInput_5, 4, false);
						}
						if (colQtyInRs_tDBInput_5 < 5) {
							row5.Last_Name = null;
						} else {

							row5.Last_Name = routines.system.JDBCUtil.getString(rs_tDBInput_5, 5, false);
						}
						if (colQtyInRs_tDBInput_5 < 6) {
							row5.First_Middle_Name = null;
						} else {

							row5.First_Middle_Name = routines.system.JDBCUtil.getString(rs_tDBInput_5, 6, false);
						}
						if (colQtyInRs_tDBInput_5 < 7) {
							row5.terminated = null;
						} else {

							row5.terminated = rs_tDBInput_5.getBoolean(7);
							if (rs_tDBInput_5.wasNull()) {
								row5.terminated = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 8) {
							row5.Date_Terminated = null;
						} else {

							row5.Date_Terminated = rs_tDBInput_5.getInt(8);
							if (rs_tDBInput_5.wasNull()) {
								row5.Date_Terminated = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 9) {
							row5.Date_Employed = null;
						} else {

							row5.Date_Employed = rs_tDBInput_5.getInt(9);
							if (rs_tDBInput_5.wasNull()) {
								row5.Date_Employed = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 10) {
							row5.Date_Of_Birth = null;
						} else {

							row5.Date_Of_Birth = rs_tDBInput_5.getInt(10);
							if (rs_tDBInput_5.wasNull()) {
								row5.Date_Of_Birth = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 11) {
							row5.Gender = null;
						} else {

							row5.Gender = routines.system.JDBCUtil.getString(rs_tDBInput_5, 11, false);
						}
						if (colQtyInRs_tDBInput_5 < 12) {
							row5.Work_Email_Address = null;
						} else {

							row5.Work_Email_Address = routines.system.JDBCUtil.getString(rs_tDBInput_5, 12, false);
						}
						if (colQtyInRs_tDBInput_5 < 13) {
							row5.Emp_Department_ID = null;
						} else {

							row5.Emp_Department_ID = rs_tDBInput_5.getInt(13);
							if (rs_tDBInput_5.wasNull()) {
								row5.Emp_Department_ID = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 14) {
							row5.inactive = null;
						} else {

							row5.inactive = rs_tDBInput_5.getBoolean(14);
							if (rs_tDBInput_5.wasNull()) {
								row5.inactive = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 15) {
							row5.Supervisor_Emp_ID = null;
						} else {

							row5.Supervisor_Emp_ID = rs_tDBInput_5.getInt(15);
							if (rs_tDBInput_5.wasNull()) {
								row5.Supervisor_Emp_ID = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 16) {
							row5.last_insert_ts = null;
						} else {

							row5.last_insert_ts = rs_tDBInput_5.getLong(16);
							if (rs_tDBInput_5.wasNull()) {
								row5.last_insert_ts = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 17) {
							row5.last_update_ts = null;
						} else {

							row5.last_update_ts = rs_tDBInput_5.getLong(17);
							if (rs_tDBInput_5.wasNull()) {
								row5.last_update_ts = null;
							}
						}

						/**
						 * [tDBInput_5 begin ] stop
						 */

						/**
						 * [tDBInput_5 main ] start
						 */

						currentComponent = "tDBInput_5";

						tos_count_tDBInput_5++;

						/**
						 * [tDBInput_5 main ] stop
						 */

						/**
						 * [tDBInput_5 process_data_begin ] start
						 */

						currentComponent = "tDBInput_5";

						/**
						 * [tDBInput_5 process_data_begin ] stop
						 */

						/**
						 * [tBigQueryOutput_5_tBQOB main ] start
						 */

						currentVirtualComponent = "tBigQueryOutput_5";

						currentComponent = "tBigQueryOutput_5_tBQOB";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row5"

							);
						}

						String[] row_tBigQueryOutput_5_tBQOB = new String[17];
						java.util.Arrays.fill(row_tBigQueryOutput_5_tBQOB, "\\N");

						int curColumnIndex_tBigQueryOutput_5_tBQOB = 0;

						curColumnIndex_tBigQueryOutput_5_tBQOB = 0;

						if (row5.DW_ID != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = row5.DW_ID;

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 1;

						if (row5.SRC_ERP_SCHEMA != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = row5.SRC_ERP_SCHEMA;

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 2;

						if (row5.SRC_ERP_ID != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = String
									.valueOf(row5.SRC_ERP_ID);

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 3;

						if (row5.code != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = row5.code;

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 4;

						if (row5.Last_Name != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = row5.Last_Name;

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 5;

						if (row5.First_Middle_Name != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = row5.First_Middle_Name;

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 6;

						if (row5.terminated != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = String
									.valueOf(true == row5.terminated ? "1" : "0");

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 7;

						if (row5.Date_Terminated != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = String
									.valueOf(row5.Date_Terminated);

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 8;

						if (row5.Date_Employed != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = String
									.valueOf(row5.Date_Employed);

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 9;

						if (row5.Date_Of_Birth != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = String
									.valueOf(row5.Date_Of_Birth);

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 10;

						if (row5.Gender != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = row5.Gender;

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 11;

						if (row5.Work_Email_Address != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = row5.Work_Email_Address;

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 12;

						if (row5.Emp_Department_ID != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = String
									.valueOf(row5.Emp_Department_ID);

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 13;

						if (row5.inactive != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = String
									.valueOf(true == row5.inactive ? "1" : "0");

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 14;

						if (row5.Supervisor_Emp_ID != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = String
									.valueOf(row5.Supervisor_Emp_ID);

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 15;

						if (row5.last_insert_ts != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = String
									.valueOf(row5.last_insert_ts);

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_5_tBQOB = 16;

						if (row5.last_update_ts != null) {

							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = String
									.valueOf(row5.last_update_ts);

						} else {
							row_tBigQueryOutput_5_tBQOB[curColumnIndex_tBigQueryOutput_5_tBQOB] = "\\N";
						}

						csvWriter_tBigQueryOutput_5_tBQOB.writeNextEnhance(row_tBigQueryOutput_5_tBQOB, "");
						nb_line_tBigQueryOutput_5_tBQOB++;

						tos_count_tBigQueryOutput_5_tBQOB++;

						/**
						 * [tBigQueryOutput_5_tBQOB main ] stop
						 */

						/**
						 * [tBigQueryOutput_5_tBQOB process_data_begin ] start
						 */

						currentVirtualComponent = "tBigQueryOutput_5";

						currentComponent = "tBigQueryOutput_5_tBQOB";

						/**
						 * [tBigQueryOutput_5_tBQOB process_data_begin ] stop
						 */

						/**
						 * [tBigQueryOutput_5_tBQOB process_data_end ] start
						 */

						currentVirtualComponent = "tBigQueryOutput_5";

						currentComponent = "tBigQueryOutput_5_tBQOB";

						/**
						 * [tBigQueryOutput_5_tBQOB process_data_end ] stop
						 */

						/**
						 * [tDBInput_5 process_data_end ] start
						 */

						currentComponent = "tDBInput_5";

						/**
						 * [tDBInput_5 process_data_end ] stop
						 */

						/**
						 * [tDBInput_5 end ] start
						 */

						currentComponent = "tDBInput_5";

					}
				} finally {
					if (rs_tDBInput_5 != null) {
						rs_tDBInput_5.close();
					}
					if (stmt_tDBInput_5 != null) {
						stmt_tDBInput_5.close();
					}
					if (conn_tDBInput_5 != null && !conn_tDBInput_5.isClosed()) {

						conn_tDBInput_5.commit();

						conn_tDBInput_5.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}
				globalMap.put("tDBInput_5_NB_LINE", nb_line_tDBInput_5);

				ok_Hash.put("tDBInput_5", true);
				end_Hash.put("tDBInput_5", System.currentTimeMillis());

				/**
				 * [tDBInput_5 end ] stop
				 */

				/**
				 * [tBigQueryOutput_5_tBQOB end ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_5";

				currentComponent = "tBigQueryOutput_5_tBQOB";

				if (csvWriter_tBigQueryOutput_5_tBQOB != null) {
					csvWriter_tBigQueryOutput_5_tBQOB.close();
				}
				resourceMap.put("finish_tBigQueryOutput_5_tBQOB", true);
				globalMap.put("tBigQueryOutput_5_tBQOB_NB_LINE", nb_line_tBigQueryOutput_5_tBQOB);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row5");
				}

				ok_Hash.put("tBigQueryOutput_5_tBQOB", true);
				end_Hash.put("tBigQueryOutput_5_tBQOB", System.currentTimeMillis());

				/**
				 * [tBigQueryOutput_5_tBQOB end ] stop
				 */

				/**
				 * [tBigQueryOutput_5_tBQBE begin ] start
				 */

				ok_Hash.put("tBigQueryOutput_5_tBQBE", false);
				start_Hash.put("tBigQueryOutput_5_tBQBE", System.currentTimeMillis());

				currentVirtualComponent = "tBigQueryOutput_5";

				currentComponent = "tBigQueryOutput_5_tBQBE";

				int tos_count_tBigQueryOutput_5_tBQBE = 0;

				/* ----START-CREATING-CLIENT (Cloud API)---- */

				com.google.auth.oauth2.GoogleCredentials credentials_tBigQueryOutput_5;
				java.io.File credentialsFile_tBigQueryOutput_5 = new java.io.File(
						"/Users/jsun/Documents/WCIWork/OnTarget/code/otmirror-060322-9471bb896012.json");
				try (java.io.FileInputStream credentialsStream_tBigQueryOutput_5 = new java.io.FileInputStream(
						credentialsFile_tBigQueryOutput_5)) {
					credentials_tBigQueryOutput_5 = com.google.auth.oauth2.ServiceAccountCredentials
							.fromStream(credentialsStream_tBigQueryOutput_5);
				}

				com.google.cloud.bigquery.BigQuery bigquery_tBigQueryOutput_5 = com.google.cloud.bigquery.BigQueryOptions
						.newBuilder().setCredentials(credentials_tBigQueryOutput_5).setProjectId("otmirror-060322")
						.build().getService();

				/* ----END-CREATING-CLIENT (Cloud API)---- */

				long nb_line_tBigQueryOutput_5 = 0;

				com.google.auth.Credentials credential_tBigQueryOutput_5 = null;
				try {
					credential_tBigQueryOutput_5 = com.google.auth.oauth2.GoogleCredentials
							.fromStream(new java.io.FileInputStream(
									"/Users/jsun/Documents/WCIWork/OnTarget/code/otmirror-060322-9471bb896012.json"));
				} catch (IOException e_tBigQueryOutput_5) {
					globalMap.put("tBigQueryOutput_5_ERROR_MESSAGE", e_tBigQueryOutput_5.getMessage());
				}
				com.google.cloud.storage.Storage storage_tBigQueryOutput_5 = com.google.cloud.storage.StorageOptions
						.newBuilder().setCredentials(credential_tBigQueryOutput_5).build().getService();

				java.io.File file_tBigQueryOutput_5 = new java.io.File(
						"/Applications/TOSDI-8.0.1/studio/workspace/employee_data.avro");

				com.google.cloud.storage.BlobInfo blobInfo_tBigQueryOutput_5 = com.google.cloud.storage.BlobInfo
						.newBuilder("dw-tmp", file_tBigQueryOutput_5.getName()).build();
				storage_tBigQueryOutput_5.create(blobInfo_tBigQueryOutput_5,
						java.nio.file.Files.readAllBytes(file_tBigQueryOutput_5.toPath()));

				/* ----END-UPLOADING-FILE---- */

				/* ----START-CREATING-JOB (Cloud API)---- */
				com.google.cloud.bigquery.TableId tableId_tBigQueryOutput_5 = com.google.cloud.bigquery.TableId
						.of("otmirror-060322", "DW", "dim_employee");
				com.google.cloud.bigquery.LoadJobConfiguration.Builder loadJobBuilder_tBigQueryOutput_5 = com.google.cloud.bigquery.LoadJobConfiguration
						.newBuilder(tableId_tBigQueryOutput_5, "gs://dw-tmp/employee_data.avro");

				boolean dropTable_tBigQueryOutput_5 = false;

				if (dropTable_tBigQueryOutput_5
						&& bigquery_tBigQueryOutput_5.getTable(tableId_tBigQueryOutput_5) != null) {
					boolean deleted = bigquery_tBigQueryOutput_5.delete(tableId_tBigQueryOutput_5);
					if (deleted) {

					} else {
						throw new RuntimeException("Unable to delete table " + tableId_tBigQueryOutput_5);
					}
				}

				if (bigquery_tBigQueryOutput_5.getTable(tableId_tBigQueryOutput_5) == null) {
					java.util.List<com.google.cloud.bigquery.Field> fields_tBigQueryOutput_5 = new java.util.ArrayList<>();

					com.google.cloud.bigquery.Field field_0 = com.google.cloud.bigquery.Field
							.newBuilder("DW_ID", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_0);

					com.google.cloud.bigquery.Field field_1 = com.google.cloud.bigquery.Field
							.newBuilder("SRC_ERP_SCHEMA", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_1);

					com.google.cloud.bigquery.Field field_2 = com.google.cloud.bigquery.Field
							.newBuilder("SRC_ERP_ID", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_2);

					com.google.cloud.bigquery.Field field_3 = com.google.cloud.bigquery.Field
							.newBuilder("code", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_3);

					com.google.cloud.bigquery.Field field_4 = com.google.cloud.bigquery.Field
							.newBuilder("Last_Name", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_4);

					com.google.cloud.bigquery.Field field_5 = com.google.cloud.bigquery.Field
							.newBuilder("First_Middle_Name", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_5);

					com.google.cloud.bigquery.Field field_6 = com.google.cloud.bigquery.Field
							.newBuilder("terminated", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_6);

					com.google.cloud.bigquery.Field field_7 = com.google.cloud.bigquery.Field
							.newBuilder("Date_Terminated", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_7);

					com.google.cloud.bigquery.Field field_8 = com.google.cloud.bigquery.Field
							.newBuilder("Date_Employed", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_8);

					com.google.cloud.bigquery.Field field_9 = com.google.cloud.bigquery.Field
							.newBuilder("Date_Of_Birth", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_9);

					com.google.cloud.bigquery.Field field_10 = com.google.cloud.bigquery.Field
							.newBuilder("Gender", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_10);

					com.google.cloud.bigquery.Field field_11 = com.google.cloud.bigquery.Field
							.newBuilder("Work_Email_Address", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_11);

					com.google.cloud.bigquery.Field field_12 = com.google.cloud.bigquery.Field
							.newBuilder("Emp_Department_ID", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_12);

					com.google.cloud.bigquery.Field field_13 = com.google.cloud.bigquery.Field
							.newBuilder("inactive", com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_13);

					com.google.cloud.bigquery.Field field_14 = com.google.cloud.bigquery.Field
							.newBuilder("Supervisor_Emp_ID", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_14);

					com.google.cloud.bigquery.Field field_15 = com.google.cloud.bigquery.Field
							.newBuilder("last_insert_ts", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_15);

					com.google.cloud.bigquery.Field field_16 = com.google.cloud.bigquery.Field
							.newBuilder("last_update_ts", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_5.add(field_16);

					com.google.cloud.bigquery.Schema schema_tBigQueryOutput_5 = com.google.cloud.bigquery.Schema
							.of(fields_tBigQueryOutput_5);
					com.google.cloud.bigquery.TableInfo tableInfo_tBigQueryOutput_5 = com.google.cloud.bigquery.TableInfo
							.newBuilder(tableId_tBigQueryOutput_5,
									com.google.cloud.bigquery.StandardTableDefinition.of(schema_tBigQueryOutput_5))
							.build();
					com.google.cloud.bigquery.Table table_tBigQueryOutput_5 = bigquery_tBigQueryOutput_5
							.create(tableInfo_tBigQueryOutput_5);
					loadJobBuilder_tBigQueryOutput_5.setSchema(schema_tBigQueryOutput_5);
					loadJobBuilder_tBigQueryOutput_5
							.setCreateDisposition(com.google.cloud.bigquery.JobInfo.CreateDisposition.CREATE_IF_NEEDED);

				} else {
					loadJobBuilder_tBigQueryOutput_5
							.setCreateDisposition(com.google.cloud.bigquery.JobInfo.CreateDisposition.CREATE_NEVER);
				}

				loadJobBuilder_tBigQueryOutput_5
						.setWriteDisposition(com.google.cloud.bigquery.JobInfo.WriteDisposition.WRITE_TRUNCATE);
				loadJobBuilder_tBigQueryOutput_5.setDestinationTable(tableId_tBigQueryOutput_5);
				com.google.cloud.bigquery.CsvOptions.Builder csvOptions_tBigQueryOutput_5 = com.google.cloud.bigquery.CsvOptions
						.newBuilder();
				csvOptions_tBigQueryOutput_5.setAllowQuotedNewLines(true);
				csvOptions_tBigQueryOutput_5.setSkipLeadingRows(0);

				csvOptions_tBigQueryOutput_5.setFieldDelimiter(",");

				loadJobBuilder_tBigQueryOutput_5.setFormatOptions(csvOptions_tBigQueryOutput_5.build());
				loadJobBuilder_tBigQueryOutput_5.setNullMarker("\\N");
				com.google.cloud.bigquery.Job job_tBigQueryOutput_5 = bigquery_tBigQueryOutput_5
						.create(com.google.cloud.bigquery.JobInfo.of(loadJobBuilder_tBigQueryOutput_5.build()));
				job_tBigQueryOutput_5 = job_tBigQueryOutput_5
						.waitFor(com.google.cloud.RetryOption.initialRetryDelay(org.threeten.bp.Duration.ofSeconds(1)));
				com.google.gson.Gson gsonObject_tBigQueryOutput_5 = new com.google.gson.Gson();
				if (job_tBigQueryOutput_5 != null && job_tBigQueryOutput_5.getStatus().getError() == null) {
					globalMap.put("tBigQueryOutput_5_JOBID", job_tBigQueryOutput_5.getJobId().getJob());
					globalMap.put("tBigQueryOutput_5_STATISTICS",
							gsonObject_tBigQueryOutput_5.toJson(job_tBigQueryOutput_5.getStatistics()));

				} else {
					if (job_tBigQueryOutput_5 == null) {
						throw new RuntimeException("Job no longer exists");
					}
					globalMap.put("tBigQueryOutput_5_JOBID", job_tBigQueryOutput_5.getJobId().getJob());
					globalMap.put("tBigQueryOutput_5_STATISTICS",
							gsonObject_tBigQueryOutput_5.toJson(job_tBigQueryOutput_5.getStatistics()));
					List<com.google.cloud.bigquery.BigQueryError> errorList = job_tBigQueryOutput_5.getStatus()
							.getExecutionErrors();
					throw new RuntimeException("Job failed: " + errorList.get(errorList.size() - 1));
				}

				/* ----END-CREATING-JOB (Cloud API)---- */

				/**
				 * [tBigQueryOutput_5_tBQBE begin ] stop
				 */

				/**
				 * [tBigQueryOutput_5_tBQBE main ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_5";

				currentComponent = "tBigQueryOutput_5_tBQBE";

				tos_count_tBigQueryOutput_5_tBQBE++;

				/**
				 * [tBigQueryOutput_5_tBQBE main ] stop
				 */

				/**
				 * [tBigQueryOutput_5_tBQBE process_data_begin ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_5";

				currentComponent = "tBigQueryOutput_5_tBQBE";

				/**
				 * [tBigQueryOutput_5_tBQBE process_data_begin ] stop
				 */

				/**
				 * [tBigQueryOutput_5_tBQBE process_data_end ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_5";

				currentComponent = "tBigQueryOutput_5_tBQBE";

				/**
				 * [tBigQueryOutput_5_tBQBE process_data_end ] stop
				 */

				/**
				 * [tBigQueryOutput_5_tBQBE end ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_5";

				currentComponent = "tBigQueryOutput_5_tBQBE";

				ok_Hash.put("tBigQueryOutput_5_tBQBE", true);
				end_Hash.put("tBigQueryOutput_5_tBQBE", System.currentTimeMillis());

				/**
				 * [tBigQueryOutput_5_tBQBE end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_5:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
			}

			tDBInput_6Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_5 finally ] start
				 */

				currentComponent = "tDBInput_5";

				/**
				 * [tDBInput_5 finally ] stop
				 */

				/**
				 * [tBigQueryOutput_5_tBQOB finally ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_5";

				currentComponent = "tBigQueryOutput_5_tBQOB";

				if (resourceMap.get("finish_tBigQueryOutput_5_tBQOB") == null) {
					if (resourceMap.get("csvWriter_tBigQueryOutput_5_tBQOB") != null) {
						((com.talend.csv.CSVWriter) resourceMap.get("csvWriter_tBigQueryOutput_5_tBQOB")).close();
					}
				}

				/**
				 * [tBigQueryOutput_5_tBQOB finally ] stop
				 */

				/**
				 * [tBigQueryOutput_5_tBQBE finally ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_5";

				currentComponent = "tBigQueryOutput_5_tBQBE";

				/**
				 * [tBigQueryOutput_5_tBQBE finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}

	public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_ONTARGET_load_dim = new byte[0];
		static byte[] commonByteArray_ONTARGET_load_dim = new byte[0];

		public String DW_ID;

		public String getDW_ID() {
			return this.DW_ID;
		}

		public String SRC_ERP_SCHEMA;

		public String getSRC_ERP_SCHEMA() {
			return this.SRC_ERP_SCHEMA;
		}

		public Integer SRC_ERP_ID;

		public Integer getSRC_ERP_ID() {
			return this.SRC_ERP_ID;
		}

		public String Company_Name;

		public String getCompany_Name() {
			return this.Company_Name;
		}

		public String Company_Address_1;

		public String getCompany_Address_1() {
			return this.Company_Address_1;
		}

		public String Company_Address_2;

		public String getCompany_Address_2() {
			return this.Company_Address_2;
		}

		public String Company_City;

		public String getCompany_City() {
			return this.Company_City;
		}

		public String Company_State;

		public String getCompany_State() {
			return this.Company_State;
		}

		public String Company_Zip_Code;

		public String getCompany_Zip_Code() {
			return this.Company_Zip_Code;
		}

		public String Company_Fax;

		public String getCompany_Fax() {
			return this.Company_Fax;
		}

		public String Company_Email;

		public String getCompany_Email() {
			return this.Company_Email;
		}

		public Integer Company_Code;

		public Integer getCompany_Code() {
			return this.Company_Code;
		}

		public String Company_Phone;

		public String getCompany_Phone() {
			return this.Company_Phone;
		}

		public String Company_Remit_Address_1;

		public String getCompany_Remit_Address_1() {
			return this.Company_Remit_Address_1;
		}

		public String Company_Remit_Address_2;

		public String getCompany_Remit_Address_2() {
			return this.Company_Remit_Address_2;
		}

		public String Company_Remit_City_Zip;

		public String getCompany_Remit_City_Zip() {
			return this.Company_Remit_City_Zip;
		}

		public String Company_EIN;

		public String getCompany_EIN() {
			return this.Company_EIN;
		}

		public String Company_Email_Admin;

		public String getCompany_Email_Admin() {
			return this.Company_Email_Admin;
		}

		public String Company_Time_Zone;

		public String getCompany_Time_Zone() {
			return this.Company_Time_Zone;
		}

		public Long last_insert_ts;

		public Long getLast_insert_ts() {
			return this.last_insert_ts;
		}

		public Long last_update_ts;

		public Long getLast_update_ts() {
			return this.last_update_ts;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ONTARGET_load_dim.length) {
					if (length < 1024 && commonByteArray_ONTARGET_load_dim.length == 0) {
						commonByteArray_ONTARGET_load_dim = new byte[1024];
					} else {
						commonByteArray_ONTARGET_load_dim = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ONTARGET_load_dim, 0, length);
				strReturn = new String(commonByteArray_ONTARGET_load_dim, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ONTARGET_load_dim.length) {
					if (length < 1024 && commonByteArray_ONTARGET_load_dim.length == 0) {
						commonByteArray_ONTARGET_load_dim = new byte[1024];
					} else {
						commonByteArray_ONTARGET_load_dim = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_ONTARGET_load_dim, 0, length);
				strReturn = new String(commonByteArray_ONTARGET_load_dim, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ONTARGET_load_dim) {

				try {

					int length = 0;

					this.DW_ID = readString(dis);

					this.SRC_ERP_SCHEMA = readString(dis);

					this.SRC_ERP_ID = readInteger(dis);

					this.Company_Name = readString(dis);

					this.Company_Address_1 = readString(dis);

					this.Company_Address_2 = readString(dis);

					this.Company_City = readString(dis);

					this.Company_State = readString(dis);

					this.Company_Zip_Code = readString(dis);

					this.Company_Fax = readString(dis);

					this.Company_Email = readString(dis);

					this.Company_Code = readInteger(dis);

					this.Company_Phone = readString(dis);

					this.Company_Remit_Address_1 = readString(dis);

					this.Company_Remit_Address_2 = readString(dis);

					this.Company_Remit_City_Zip = readString(dis);

					this.Company_EIN = readString(dis);

					this.Company_Email_Admin = readString(dis);

					this.Company_Time_Zone = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.last_insert_ts = null;
					} else {
						this.last_insert_ts = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.last_update_ts = null;
					} else {
						this.last_update_ts = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ONTARGET_load_dim) {

				try {

					int length = 0;

					this.DW_ID = readString(dis);

					this.SRC_ERP_SCHEMA = readString(dis);

					this.SRC_ERP_ID = readInteger(dis);

					this.Company_Name = readString(dis);

					this.Company_Address_1 = readString(dis);

					this.Company_Address_2 = readString(dis);

					this.Company_City = readString(dis);

					this.Company_State = readString(dis);

					this.Company_Zip_Code = readString(dis);

					this.Company_Fax = readString(dis);

					this.Company_Email = readString(dis);

					this.Company_Code = readInteger(dis);

					this.Company_Phone = readString(dis);

					this.Company_Remit_Address_1 = readString(dis);

					this.Company_Remit_Address_2 = readString(dis);

					this.Company_Remit_City_Zip = readString(dis);

					this.Company_EIN = readString(dis);

					this.Company_Email_Admin = readString(dis);

					this.Company_Time_Zone = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.last_insert_ts = null;
					} else {
						this.last_insert_ts = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.last_update_ts = null;
					} else {
						this.last_update_ts = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.DW_ID, dos);

				// String

				writeString(this.SRC_ERP_SCHEMA, dos);

				// Integer

				writeInteger(this.SRC_ERP_ID, dos);

				// String

				writeString(this.Company_Name, dos);

				// String

				writeString(this.Company_Address_1, dos);

				// String

				writeString(this.Company_Address_2, dos);

				// String

				writeString(this.Company_City, dos);

				// String

				writeString(this.Company_State, dos);

				// String

				writeString(this.Company_Zip_Code, dos);

				// String

				writeString(this.Company_Fax, dos);

				// String

				writeString(this.Company_Email, dos);

				// Integer

				writeInteger(this.Company_Code, dos);

				// String

				writeString(this.Company_Phone, dos);

				// String

				writeString(this.Company_Remit_Address_1, dos);

				// String

				writeString(this.Company_Remit_Address_2, dos);

				// String

				writeString(this.Company_Remit_City_Zip, dos);

				// String

				writeString(this.Company_EIN, dos);

				// String

				writeString(this.Company_Email_Admin, dos);

				// String

				writeString(this.Company_Time_Zone, dos);

				// Long

				if (this.last_insert_ts == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.last_insert_ts);
				}

				// Long

				if (this.last_update_ts == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.last_update_ts);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.DW_ID, dos);

				// String

				writeString(this.SRC_ERP_SCHEMA, dos);

				// Integer

				writeInteger(this.SRC_ERP_ID, dos);

				// String

				writeString(this.Company_Name, dos);

				// String

				writeString(this.Company_Address_1, dos);

				// String

				writeString(this.Company_Address_2, dos);

				// String

				writeString(this.Company_City, dos);

				// String

				writeString(this.Company_State, dos);

				// String

				writeString(this.Company_Zip_Code, dos);

				// String

				writeString(this.Company_Fax, dos);

				// String

				writeString(this.Company_Email, dos);

				// Integer

				writeInteger(this.Company_Code, dos);

				// String

				writeString(this.Company_Phone, dos);

				// String

				writeString(this.Company_Remit_Address_1, dos);

				// String

				writeString(this.Company_Remit_Address_2, dos);

				// String

				writeString(this.Company_Remit_City_Zip, dos);

				// String

				writeString(this.Company_EIN, dos);

				// String

				writeString(this.Company_Email_Admin, dos);

				// String

				writeString(this.Company_Time_Zone, dos);

				// Long

				if (this.last_insert_ts == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.last_insert_ts);
				}

				// Long

				if (this.last_update_ts == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.last_update_ts);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("DW_ID=" + DW_ID);
			sb.append(",SRC_ERP_SCHEMA=" + SRC_ERP_SCHEMA);
			sb.append(",SRC_ERP_ID=" + String.valueOf(SRC_ERP_ID));
			sb.append(",Company_Name=" + Company_Name);
			sb.append(",Company_Address_1=" + Company_Address_1);
			sb.append(",Company_Address_2=" + Company_Address_2);
			sb.append(",Company_City=" + Company_City);
			sb.append(",Company_State=" + Company_State);
			sb.append(",Company_Zip_Code=" + Company_Zip_Code);
			sb.append(",Company_Fax=" + Company_Fax);
			sb.append(",Company_Email=" + Company_Email);
			sb.append(",Company_Code=" + String.valueOf(Company_Code));
			sb.append(",Company_Phone=" + Company_Phone);
			sb.append(",Company_Remit_Address_1=" + Company_Remit_Address_1);
			sb.append(",Company_Remit_Address_2=" + Company_Remit_Address_2);
			sb.append(",Company_Remit_City_Zip=" + Company_Remit_City_Zip);
			sb.append(",Company_EIN=" + Company_EIN);
			sb.append(",Company_Email_Admin=" + Company_Email_Admin);
			sb.append(",Company_Time_Zone=" + Company_Time_Zone);
			sb.append(",last_insert_ts=" + String.valueOf(last_insert_ts));
			sb.append(",last_update_ts=" + String.valueOf(last_update_ts));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row6Struct row6 = new row6Struct();

				/**
				 * [tBigQueryOutput_6_tBQOB begin ] start
				 */

				ok_Hash.put("tBigQueryOutput_6_tBQOB", false);
				start_Hash.put("tBigQueryOutput_6_tBQOB", System.currentTimeMillis());

				currentVirtualComponent = "tBigQueryOutput_6";

				currentComponent = "tBigQueryOutput_6_tBQOB";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row6");
				}

				int tos_count_tBigQueryOutput_6_tBQOB = 0;

				int nb_line_tBigQueryOutput_6_tBQOB = 0;
				String rowSeparator_tBigQueryOutput_6_tBQOB = "\n";
				String fieldSeparator_tBigQueryOutput_6_tBQOB = ",";
				char escapeChar_tBigQueryOutput_6_tBQOB = "\\".charAt(0);
				char textEnclosure_tBigQueryOutput_6_tBQOB = "\"".charAt(0);

				escapeChar_tBigQueryOutput_6_tBQOB = textEnclosure_tBigQueryOutput_6_tBQOB;

				if (escapeChar_tBigQueryOutput_6_tBQOB == '\\') {
				} else if (escapeChar_tBigQueryOutput_6_tBQOB == textEnclosure_tBigQueryOutput_6_tBQOB) {
				} else {
					throw new RuntimeException("The escape mode only support the '\\' or double text enclosure.");
				}

				java.io.File file_tBigQueryOutput_6_tBQOB = new java.io.File(
						"/Applications/TOSDI-8.0.1/studio/workspace/otcompany_data.avro");

				file_tBigQueryOutput_6_tBQOB.getParentFile().mkdirs();

				com.talend.csv.CSVWriter csvWriter_tBigQueryOutput_6_tBQOB = new com.talend.csv.CSVWriter(
						new java.io.BufferedWriter(new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(file_tBigQueryOutput_6_tBQOB, false), "ISO-8859-15")));
				resourceMap.put("csvWriter_tBigQueryOutput_6_tBQOB", csvWriter_tBigQueryOutput_6_tBQOB);
				csvWriter_tBigQueryOutput_6_tBQOB.setSeparator(fieldSeparator_tBigQueryOutput_6_tBQOB.charAt(0));

				csvWriter_tBigQueryOutput_6_tBQOB.setLineEnd(rowSeparator_tBigQueryOutput_6_tBQOB);
				csvWriter_tBigQueryOutput_6_tBQOB.setEscapeChar(escapeChar_tBigQueryOutput_6_tBQOB);
				csvWriter_tBigQueryOutput_6_tBQOB.setQuoteChar(textEnclosure_tBigQueryOutput_6_tBQOB);
				csvWriter_tBigQueryOutput_6_tBQOB.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.AUTO);

				/**
				 * [tBigQueryOutput_6_tBQOB begin ] stop
				 */

				/**
				 * [tDBInput_6 begin ] start
				 */

				ok_Hash.put("tDBInput_6", false);
				start_Hash.put("tDBInput_6", System.currentTimeMillis());

				currentComponent = "tDBInput_6";

				int tos_count_tDBInput_6 = 0;

				int nb_line_tDBInput_6 = 0;
				java.sql.Connection conn_tDBInput_6 = null;
				String driverClass_tDBInput_6 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBInput_6 = java.lang.Class.forName(driverClass_tDBInput_6);
				String dbUser_tDBInput_6 = "postgres";

				final String decryptedPassword_tDBInput_6 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:9+xwjPvz/oaBlZ4GM38pGlFNBmIheHAWHzL3YpJ20TaJozKiLpI=");

				String dbPwd_tDBInput_6 = decryptedPassword_tDBInput_6;

				String url_tDBInput_6 = "jdbc:postgresql://" + "localhost" + ":" + "5431" + "/" + "OnTarget";

				conn_tDBInput_6 = java.sql.DriverManager.getConnection(url_tDBInput_6, dbUser_tDBInput_6,
						dbPwd_tDBInput_6);

				conn_tDBInput_6.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_6 = conn_tDBInput_6.createStatement();

				String dbquery_tDBInput_6 = "SELECT cast(md5('smallmiracle_dim_client_'||cast(id as varchar(10))) as varchar(50)) as DW_ID,\n        'smallmiracle' a"
						+ "s SRC_ERP_SCHEMA,\n        id as SRC_ERP_ID,\n        companyname as Company_Name,\n        address1 as Company_Address_1,\n"
						+ "        address2 as Company_Address_2,\n        city as Company_City,\n        state as Company_State,\n        zipcode as "
						+ "Company_Zip_Code,\n        fax as Company_Fax,\n        email as Company_Email,\n        companycode  as Company_Code,\n    "
						+ "    phone as Company_Phone,\n        remitaddress1 as Company_Remit_Address_1,\n        remitaddress2  as Company_Remit_Ad"
						+ "dress_2,\n        remitcitystzip  as Company_Remit_City_Zip,\n        ein as Company_EIN,\n        emailadmin as Company_Em"
						+ "ail_Admin,\n        timezone as Company_Time_Zone,\n        cast(to_char((current_timestamp)::TIMESTAMP,'yyyymmddhhmiss') "
						+ "as BigInt) as last_insert_ts,\n        cast(19000101000000 as bigint) as last_update_ts\n        FROM smallmiracle.otcompa"
						+ "ny";

				globalMap.put("tDBInput_6_QUERY", dbquery_tDBInput_6);
				java.sql.ResultSet rs_tDBInput_6 = null;

				try {
					rs_tDBInput_6 = stmt_tDBInput_6.executeQuery(dbquery_tDBInput_6);
					java.sql.ResultSetMetaData rsmd_tDBInput_6 = rs_tDBInput_6.getMetaData();
					int colQtyInRs_tDBInput_6 = rsmd_tDBInput_6.getColumnCount();

					String tmpContent_tDBInput_6 = null;

					while (rs_tDBInput_6.next()) {
						nb_line_tDBInput_6++;

						if (colQtyInRs_tDBInput_6 < 1) {
							row6.DW_ID = null;
						} else {

							row6.DW_ID = routines.system.JDBCUtil.getString(rs_tDBInput_6, 1, false);
						}
						if (colQtyInRs_tDBInput_6 < 2) {
							row6.SRC_ERP_SCHEMA = null;
						} else {

							row6.SRC_ERP_SCHEMA = routines.system.JDBCUtil.getString(rs_tDBInput_6, 2, false);
						}
						if (colQtyInRs_tDBInput_6 < 3) {
							row6.SRC_ERP_ID = null;
						} else {

							row6.SRC_ERP_ID = rs_tDBInput_6.getInt(3);
							if (rs_tDBInput_6.wasNull()) {
								row6.SRC_ERP_ID = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 4) {
							row6.Company_Name = null;
						} else {

							row6.Company_Name = routines.system.JDBCUtil.getString(rs_tDBInput_6, 4, false);
						}
						if (colQtyInRs_tDBInput_6 < 5) {
							row6.Company_Address_1 = null;
						} else {

							row6.Company_Address_1 = routines.system.JDBCUtil.getString(rs_tDBInput_6, 5, false);
						}
						if (colQtyInRs_tDBInput_6 < 6) {
							row6.Company_Address_2 = null;
						} else {

							row6.Company_Address_2 = routines.system.JDBCUtil.getString(rs_tDBInput_6, 6, false);
						}
						if (colQtyInRs_tDBInput_6 < 7) {
							row6.Company_City = null;
						} else {

							row6.Company_City = routines.system.JDBCUtil.getString(rs_tDBInput_6, 7, false);
						}
						if (colQtyInRs_tDBInput_6 < 8) {
							row6.Company_State = null;
						} else {

							row6.Company_State = routines.system.JDBCUtil.getString(rs_tDBInput_6, 8, false);
						}
						if (colQtyInRs_tDBInput_6 < 9) {
							row6.Company_Zip_Code = null;
						} else {

							row6.Company_Zip_Code = routines.system.JDBCUtil.getString(rs_tDBInput_6, 9, false);
						}
						if (colQtyInRs_tDBInput_6 < 10) {
							row6.Company_Fax = null;
						} else {

							row6.Company_Fax = routines.system.JDBCUtil.getString(rs_tDBInput_6, 10, false);
						}
						if (colQtyInRs_tDBInput_6 < 11) {
							row6.Company_Email = null;
						} else {

							row6.Company_Email = routines.system.JDBCUtil.getString(rs_tDBInput_6, 11, false);
						}
						if (colQtyInRs_tDBInput_6 < 12) {
							row6.Company_Code = null;
						} else {

							row6.Company_Code = rs_tDBInput_6.getInt(12);
							if (rs_tDBInput_6.wasNull()) {
								row6.Company_Code = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 13) {
							row6.Company_Phone = null;
						} else {

							row6.Company_Phone = routines.system.JDBCUtil.getString(rs_tDBInput_6, 13, false);
						}
						if (colQtyInRs_tDBInput_6 < 14) {
							row6.Company_Remit_Address_1 = null;
						} else {

							row6.Company_Remit_Address_1 = routines.system.JDBCUtil.getString(rs_tDBInput_6, 14, false);
						}
						if (colQtyInRs_tDBInput_6 < 15) {
							row6.Company_Remit_Address_2 = null;
						} else {

							row6.Company_Remit_Address_2 = routines.system.JDBCUtil.getString(rs_tDBInput_6, 15, false);
						}
						if (colQtyInRs_tDBInput_6 < 16) {
							row6.Company_Remit_City_Zip = null;
						} else {

							row6.Company_Remit_City_Zip = routines.system.JDBCUtil.getString(rs_tDBInput_6, 16, false);
						}
						if (colQtyInRs_tDBInput_6 < 17) {
							row6.Company_EIN = null;
						} else {

							row6.Company_EIN = routines.system.JDBCUtil.getString(rs_tDBInput_6, 17, false);
						}
						if (colQtyInRs_tDBInput_6 < 18) {
							row6.Company_Email_Admin = null;
						} else {

							row6.Company_Email_Admin = routines.system.JDBCUtil.getString(rs_tDBInput_6, 18, false);
						}
						if (colQtyInRs_tDBInput_6 < 19) {
							row6.Company_Time_Zone = null;
						} else {

							row6.Company_Time_Zone = routines.system.JDBCUtil.getString(rs_tDBInput_6, 19, false);
						}
						if (colQtyInRs_tDBInput_6 < 20) {
							row6.last_insert_ts = null;
						} else {

							row6.last_insert_ts = rs_tDBInput_6.getLong(20);
							if (rs_tDBInput_6.wasNull()) {
								row6.last_insert_ts = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 21) {
							row6.last_update_ts = null;
						} else {

							row6.last_update_ts = rs_tDBInput_6.getLong(21);
							if (rs_tDBInput_6.wasNull()) {
								row6.last_update_ts = null;
							}
						}

						/**
						 * [tDBInput_6 begin ] stop
						 */

						/**
						 * [tDBInput_6 main ] start
						 */

						currentComponent = "tDBInput_6";

						tos_count_tDBInput_6++;

						/**
						 * [tDBInput_6 main ] stop
						 */

						/**
						 * [tDBInput_6 process_data_begin ] start
						 */

						currentComponent = "tDBInput_6";

						/**
						 * [tDBInput_6 process_data_begin ] stop
						 */

						/**
						 * [tBigQueryOutput_6_tBQOB main ] start
						 */

						currentVirtualComponent = "tBigQueryOutput_6";

						currentComponent = "tBigQueryOutput_6_tBQOB";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row6"

							);
						}

						String[] row_tBigQueryOutput_6_tBQOB = new String[21];
						java.util.Arrays.fill(row_tBigQueryOutput_6_tBQOB, "\\N");

						int curColumnIndex_tBigQueryOutput_6_tBQOB = 0;

						curColumnIndex_tBigQueryOutput_6_tBQOB = 0;

						if (row6.DW_ID != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = row6.DW_ID;

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 1;

						if (row6.SRC_ERP_SCHEMA != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = row6.SRC_ERP_SCHEMA;

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 2;

						if (row6.SRC_ERP_ID != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = String
									.valueOf(row6.SRC_ERP_ID);

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 3;

						if (row6.Company_Name != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = row6.Company_Name;

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 4;

						if (row6.Company_Address_1 != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = row6.Company_Address_1;

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 5;

						if (row6.Company_Address_2 != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = row6.Company_Address_2;

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 6;

						if (row6.Company_City != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = row6.Company_City;

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 7;

						if (row6.Company_State != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = row6.Company_State;

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 8;

						if (row6.Company_Zip_Code != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = row6.Company_Zip_Code;

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 9;

						if (row6.Company_Fax != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = row6.Company_Fax;

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 10;

						if (row6.Company_Email != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = row6.Company_Email;

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 11;

						if (row6.Company_Code != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = String
									.valueOf(row6.Company_Code);

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 12;

						if (row6.Company_Phone != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = row6.Company_Phone;

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 13;

						if (row6.Company_Remit_Address_1 != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = row6.Company_Remit_Address_1;

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 14;

						if (row6.Company_Remit_Address_2 != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = row6.Company_Remit_Address_2;

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 15;

						if (row6.Company_Remit_City_Zip != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = row6.Company_Remit_City_Zip;

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 16;

						if (row6.Company_EIN != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = row6.Company_EIN;

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 17;

						if (row6.Company_Email_Admin != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = row6.Company_Email_Admin;

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 18;

						if (row6.Company_Time_Zone != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = row6.Company_Time_Zone;

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 19;

						if (row6.last_insert_ts != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = String
									.valueOf(row6.last_insert_ts);

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_6_tBQOB = 20;

						if (row6.last_update_ts != null) {

							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = String
									.valueOf(row6.last_update_ts);

						} else {
							row_tBigQueryOutput_6_tBQOB[curColumnIndex_tBigQueryOutput_6_tBQOB] = "\\N";
						}

						csvWriter_tBigQueryOutput_6_tBQOB.writeNextEnhance(row_tBigQueryOutput_6_tBQOB, "");
						nb_line_tBigQueryOutput_6_tBQOB++;

						tos_count_tBigQueryOutput_6_tBQOB++;

						/**
						 * [tBigQueryOutput_6_tBQOB main ] stop
						 */

						/**
						 * [tBigQueryOutput_6_tBQOB process_data_begin ] start
						 */

						currentVirtualComponent = "tBigQueryOutput_6";

						currentComponent = "tBigQueryOutput_6_tBQOB";

						/**
						 * [tBigQueryOutput_6_tBQOB process_data_begin ] stop
						 */

						/**
						 * [tBigQueryOutput_6_tBQOB process_data_end ] start
						 */

						currentVirtualComponent = "tBigQueryOutput_6";

						currentComponent = "tBigQueryOutput_6_tBQOB";

						/**
						 * [tBigQueryOutput_6_tBQOB process_data_end ] stop
						 */

						/**
						 * [tDBInput_6 process_data_end ] start
						 */

						currentComponent = "tDBInput_6";

						/**
						 * [tDBInput_6 process_data_end ] stop
						 */

						/**
						 * [tDBInput_6 end ] start
						 */

						currentComponent = "tDBInput_6";

					}
				} finally {
					if (rs_tDBInput_6 != null) {
						rs_tDBInput_6.close();
					}
					if (stmt_tDBInput_6 != null) {
						stmt_tDBInput_6.close();
					}
					if (conn_tDBInput_6 != null && !conn_tDBInput_6.isClosed()) {

						conn_tDBInput_6.commit();

						conn_tDBInput_6.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}
				globalMap.put("tDBInput_6_NB_LINE", nb_line_tDBInput_6);

				ok_Hash.put("tDBInput_6", true);
				end_Hash.put("tDBInput_6", System.currentTimeMillis());

				/**
				 * [tDBInput_6 end ] stop
				 */

				/**
				 * [tBigQueryOutput_6_tBQOB end ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_6";

				currentComponent = "tBigQueryOutput_6_tBQOB";

				if (csvWriter_tBigQueryOutput_6_tBQOB != null) {
					csvWriter_tBigQueryOutput_6_tBQOB.close();
				}
				resourceMap.put("finish_tBigQueryOutput_6_tBQOB", true);
				globalMap.put("tBigQueryOutput_6_tBQOB_NB_LINE", nb_line_tBigQueryOutput_6_tBQOB);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row6");
				}

				ok_Hash.put("tBigQueryOutput_6_tBQOB", true);
				end_Hash.put("tBigQueryOutput_6_tBQOB", System.currentTimeMillis());

				/**
				 * [tBigQueryOutput_6_tBQOB end ] stop
				 */

				/**
				 * [tBigQueryOutput_6_tBQBE begin ] start
				 */

				ok_Hash.put("tBigQueryOutput_6_tBQBE", false);
				start_Hash.put("tBigQueryOutput_6_tBQBE", System.currentTimeMillis());

				currentVirtualComponent = "tBigQueryOutput_6";

				currentComponent = "tBigQueryOutput_6_tBQBE";

				int tos_count_tBigQueryOutput_6_tBQBE = 0;

				/* ----START-CREATING-CLIENT (Cloud API)---- */

				com.google.auth.oauth2.GoogleCredentials credentials_tBigQueryOutput_6;
				java.io.File credentialsFile_tBigQueryOutput_6 = new java.io.File(
						"/Users/jsun/Documents/WCIWork/OnTarget/code/otmirror-060322-9471bb896012.json");
				try (java.io.FileInputStream credentialsStream_tBigQueryOutput_6 = new java.io.FileInputStream(
						credentialsFile_tBigQueryOutput_6)) {
					credentials_tBigQueryOutput_6 = com.google.auth.oauth2.ServiceAccountCredentials
							.fromStream(credentialsStream_tBigQueryOutput_6);
				}

				com.google.cloud.bigquery.BigQuery bigquery_tBigQueryOutput_6 = com.google.cloud.bigquery.BigQueryOptions
						.newBuilder().setCredentials(credentials_tBigQueryOutput_6).setProjectId("otmirror-060322")
						.build().getService();

				/* ----END-CREATING-CLIENT (Cloud API)---- */

				long nb_line_tBigQueryOutput_6 = 0;

				com.google.auth.Credentials credential_tBigQueryOutput_6 = null;
				try {
					credential_tBigQueryOutput_6 = com.google.auth.oauth2.GoogleCredentials
							.fromStream(new java.io.FileInputStream(
									"/Users/jsun/Documents/WCIWork/OnTarget/code/otmirror-060322-9471bb896012.json"));
				} catch (IOException e_tBigQueryOutput_6) {
					globalMap.put("tBigQueryOutput_6_ERROR_MESSAGE", e_tBigQueryOutput_6.getMessage());
				}
				com.google.cloud.storage.Storage storage_tBigQueryOutput_6 = com.google.cloud.storage.StorageOptions
						.newBuilder().setCredentials(credential_tBigQueryOutput_6).build().getService();

				java.io.File file_tBigQueryOutput_6 = new java.io.File(
						"/Applications/TOSDI-8.0.1/studio/workspace/otcompany_data.avro");

				com.google.cloud.storage.BlobInfo blobInfo_tBigQueryOutput_6 = com.google.cloud.storage.BlobInfo
						.newBuilder("dw-tmp", file_tBigQueryOutput_6.getName()).build();
				storage_tBigQueryOutput_6.create(blobInfo_tBigQueryOutput_6,
						java.nio.file.Files.readAllBytes(file_tBigQueryOutput_6.toPath()));

				/* ----END-UPLOADING-FILE---- */

				/* ----START-CREATING-JOB (Cloud API)---- */
				com.google.cloud.bigquery.TableId tableId_tBigQueryOutput_6 = com.google.cloud.bigquery.TableId
						.of("otmirror-060322", "DW", "dim_ot_company");
				com.google.cloud.bigquery.LoadJobConfiguration.Builder loadJobBuilder_tBigQueryOutput_6 = com.google.cloud.bigquery.LoadJobConfiguration
						.newBuilder(tableId_tBigQueryOutput_6, "gs://dw-tmp/otcompany_data.avro");

				boolean dropTable_tBigQueryOutput_6 = false;

				if (dropTable_tBigQueryOutput_6
						&& bigquery_tBigQueryOutput_6.getTable(tableId_tBigQueryOutput_6) != null) {
					boolean deleted = bigquery_tBigQueryOutput_6.delete(tableId_tBigQueryOutput_6);
					if (deleted) {

					} else {
						throw new RuntimeException("Unable to delete table " + tableId_tBigQueryOutput_6);
					}
				}

				if (bigquery_tBigQueryOutput_6.getTable(tableId_tBigQueryOutput_6) == null) {
					java.util.List<com.google.cloud.bigquery.Field> fields_tBigQueryOutput_6 = new java.util.ArrayList<>();

					com.google.cloud.bigquery.Field field_0 = com.google.cloud.bigquery.Field
							.newBuilder("DW_ID", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_0);

					com.google.cloud.bigquery.Field field_1 = com.google.cloud.bigquery.Field
							.newBuilder("SRC_ERP_SCHEMA", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_1);

					com.google.cloud.bigquery.Field field_2 = com.google.cloud.bigquery.Field
							.newBuilder("SRC_ERP_ID", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_2);

					com.google.cloud.bigquery.Field field_3 = com.google.cloud.bigquery.Field
							.newBuilder("Company_Name", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_3);

					com.google.cloud.bigquery.Field field_4 = com.google.cloud.bigquery.Field
							.newBuilder("Company_Address_1", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_4);

					com.google.cloud.bigquery.Field field_5 = com.google.cloud.bigquery.Field
							.newBuilder("Company_Address_2", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_5);

					com.google.cloud.bigquery.Field field_6 = com.google.cloud.bigquery.Field
							.newBuilder("Company_City", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_6);

					com.google.cloud.bigquery.Field field_7 = com.google.cloud.bigquery.Field
							.newBuilder("Company_State", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_7);

					com.google.cloud.bigquery.Field field_8 = com.google.cloud.bigquery.Field
							.newBuilder("Company_Zip_Code", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_8);

					com.google.cloud.bigquery.Field field_9 = com.google.cloud.bigquery.Field
							.newBuilder("Company_Fax", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_9);

					com.google.cloud.bigquery.Field field_10 = com.google.cloud.bigquery.Field
							.newBuilder("Company_Email", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_10);

					com.google.cloud.bigquery.Field field_11 = com.google.cloud.bigquery.Field
							.newBuilder("Company_Code", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_11);

					com.google.cloud.bigquery.Field field_12 = com.google.cloud.bigquery.Field
							.newBuilder("Company_Phone", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_12);

					com.google.cloud.bigquery.Field field_13 = com.google.cloud.bigquery.Field
							.newBuilder("Company_Remit_Address_1", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_13);

					com.google.cloud.bigquery.Field field_14 = com.google.cloud.bigquery.Field
							.newBuilder("Company_Remit_Address_2", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_14);

					com.google.cloud.bigquery.Field field_15 = com.google.cloud.bigquery.Field
							.newBuilder("Company_Remit_City_Zip", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_15);

					com.google.cloud.bigquery.Field field_16 = com.google.cloud.bigquery.Field
							.newBuilder("Company_EIN", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_16);

					com.google.cloud.bigquery.Field field_17 = com.google.cloud.bigquery.Field
							.newBuilder("Company_Email_Admin", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_17);

					com.google.cloud.bigquery.Field field_18 = com.google.cloud.bigquery.Field
							.newBuilder("Company_Time_Zone", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_18);

					com.google.cloud.bigquery.Field field_19 = com.google.cloud.bigquery.Field
							.newBuilder("last_insert_ts", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_19);

					com.google.cloud.bigquery.Field field_20 = com.google.cloud.bigquery.Field
							.newBuilder("last_update_ts", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_6.add(field_20);

					com.google.cloud.bigquery.Schema schema_tBigQueryOutput_6 = com.google.cloud.bigquery.Schema
							.of(fields_tBigQueryOutput_6);
					com.google.cloud.bigquery.TableInfo tableInfo_tBigQueryOutput_6 = com.google.cloud.bigquery.TableInfo
							.newBuilder(tableId_tBigQueryOutput_6,
									com.google.cloud.bigquery.StandardTableDefinition.of(schema_tBigQueryOutput_6))
							.build();
					com.google.cloud.bigquery.Table table_tBigQueryOutput_6 = bigquery_tBigQueryOutput_6
							.create(tableInfo_tBigQueryOutput_6);
					loadJobBuilder_tBigQueryOutput_6.setSchema(schema_tBigQueryOutput_6);
					loadJobBuilder_tBigQueryOutput_6
							.setCreateDisposition(com.google.cloud.bigquery.JobInfo.CreateDisposition.CREATE_IF_NEEDED);

				} else {
					loadJobBuilder_tBigQueryOutput_6
							.setCreateDisposition(com.google.cloud.bigquery.JobInfo.CreateDisposition.CREATE_NEVER);
				}

				loadJobBuilder_tBigQueryOutput_6
						.setWriteDisposition(com.google.cloud.bigquery.JobInfo.WriteDisposition.WRITE_TRUNCATE);
				loadJobBuilder_tBigQueryOutput_6.setDestinationTable(tableId_tBigQueryOutput_6);
				com.google.cloud.bigquery.CsvOptions.Builder csvOptions_tBigQueryOutput_6 = com.google.cloud.bigquery.CsvOptions
						.newBuilder();
				csvOptions_tBigQueryOutput_6.setAllowQuotedNewLines(true);
				csvOptions_tBigQueryOutput_6.setSkipLeadingRows(0);

				csvOptions_tBigQueryOutput_6.setFieldDelimiter(",");

				loadJobBuilder_tBigQueryOutput_6.setFormatOptions(csvOptions_tBigQueryOutput_6.build());
				loadJobBuilder_tBigQueryOutput_6.setNullMarker("\\N");
				com.google.cloud.bigquery.Job job_tBigQueryOutput_6 = bigquery_tBigQueryOutput_6
						.create(com.google.cloud.bigquery.JobInfo.of(loadJobBuilder_tBigQueryOutput_6.build()));
				job_tBigQueryOutput_6 = job_tBigQueryOutput_6
						.waitFor(com.google.cloud.RetryOption.initialRetryDelay(org.threeten.bp.Duration.ofSeconds(1)));
				com.google.gson.Gson gsonObject_tBigQueryOutput_6 = new com.google.gson.Gson();
				if (job_tBigQueryOutput_6 != null && job_tBigQueryOutput_6.getStatus().getError() == null) {
					globalMap.put("tBigQueryOutput_6_JOBID", job_tBigQueryOutput_6.getJobId().getJob());
					globalMap.put("tBigQueryOutput_6_STATISTICS",
							gsonObject_tBigQueryOutput_6.toJson(job_tBigQueryOutput_6.getStatistics()));

				} else {
					if (job_tBigQueryOutput_6 == null) {
						throw new RuntimeException("Job no longer exists");
					}
					globalMap.put("tBigQueryOutput_6_JOBID", job_tBigQueryOutput_6.getJobId().getJob());
					globalMap.put("tBigQueryOutput_6_STATISTICS",
							gsonObject_tBigQueryOutput_6.toJson(job_tBigQueryOutput_6.getStatistics()));
					List<com.google.cloud.bigquery.BigQueryError> errorList = job_tBigQueryOutput_6.getStatus()
							.getExecutionErrors();
					throw new RuntimeException("Job failed: " + errorList.get(errorList.size() - 1));
				}

				/* ----END-CREATING-JOB (Cloud API)---- */

				/**
				 * [tBigQueryOutput_6_tBQBE begin ] stop
				 */

				/**
				 * [tBigQueryOutput_6_tBQBE main ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_6";

				currentComponent = "tBigQueryOutput_6_tBQBE";

				tos_count_tBigQueryOutput_6_tBQBE++;

				/**
				 * [tBigQueryOutput_6_tBQBE main ] stop
				 */

				/**
				 * [tBigQueryOutput_6_tBQBE process_data_begin ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_6";

				currentComponent = "tBigQueryOutput_6_tBQBE";

				/**
				 * [tBigQueryOutput_6_tBQBE process_data_begin ] stop
				 */

				/**
				 * [tBigQueryOutput_6_tBQBE process_data_end ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_6";

				currentComponent = "tBigQueryOutput_6_tBQBE";

				/**
				 * [tBigQueryOutput_6_tBQBE process_data_end ] stop
				 */

				/**
				 * [tBigQueryOutput_6_tBQBE end ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_6";

				currentComponent = "tBigQueryOutput_6_tBQBE";

				ok_Hash.put("tBigQueryOutput_6_tBQBE", true);
				end_Hash.put("tBigQueryOutput_6_tBQBE", System.currentTimeMillis());

				/**
				 * [tBigQueryOutput_6_tBQBE end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_6:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
			}

			tDBInput_7Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_6 finally ] start
				 */

				currentComponent = "tDBInput_6";

				/**
				 * [tDBInput_6 finally ] stop
				 */

				/**
				 * [tBigQueryOutput_6_tBQOB finally ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_6";

				currentComponent = "tBigQueryOutput_6_tBQOB";

				if (resourceMap.get("finish_tBigQueryOutput_6_tBQOB") == null) {
					if (resourceMap.get("csvWriter_tBigQueryOutput_6_tBQOB") != null) {
						((com.talend.csv.CSVWriter) resourceMap.get("csvWriter_tBigQueryOutput_6_tBQOB")).close();
					}
				}

				/**
				 * [tBigQueryOutput_6_tBQOB finally ] stop
				 */

				/**
				 * [tBigQueryOutput_6_tBQBE finally ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_6";

				currentComponent = "tBigQueryOutput_6_tBQBE";

				/**
				 * [tBigQueryOutput_6_tBQBE finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 1);
	}

	public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_ONTARGET_load_dim = new byte[0];
		static byte[] commonByteArray_ONTARGET_load_dim = new byte[0];

		public String DW_ID;

		public String getDW_ID() {
			return this.DW_ID;
		}

		public String SRC_ERP_SCHEMA;

		public String getSRC_ERP_SCHEMA() {
			return this.SRC_ERP_SCHEMA;
		}

		public Integer SRC_ERP_ID;

		public Integer getSRC_ERP_ID() {
			return this.SRC_ERP_ID;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public String address_1;

		public String getAddress_1() {
			return this.address_1;
		}

		public String address_2;

		public String getAddress_2() {
			return this.address_2;
		}

		public String city;

		public String getCity() {
			return this.city;
		}

		public String county;

		public String getCounty() {
			return this.county;
		}

		public String state;

		public String getState() {
			return this.state;
		}

		public String zip;

		public String getZip() {
			return this.zip;
		}

		public String phone;

		public String getPhone() {
			return this.phone;
		}

		public String fax;

		public String getFax() {
			return this.fax;
		}

		public String email;

		public String getEmail() {
			return this.email;
		}

		public Integer cost_center_id;

		public Integer getCost_center_id() {
			return this.cost_center_id;
		}

		public Boolean eligible_for_group_scheduling;

		public Boolean getEligible_for_group_scheduling() {
			return this.eligible_for_group_scheduling;
		}

		public Long last_insert_ts;

		public Long getLast_insert_ts() {
			return this.last_insert_ts;
		}

		public Long last_update_ts;

		public Long getLast_update_ts() {
			return this.last_update_ts;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ONTARGET_load_dim.length) {
					if (length < 1024 && commonByteArray_ONTARGET_load_dim.length == 0) {
						commonByteArray_ONTARGET_load_dim = new byte[1024];
					} else {
						commonByteArray_ONTARGET_load_dim = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ONTARGET_load_dim, 0, length);
				strReturn = new String(commonByteArray_ONTARGET_load_dim, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ONTARGET_load_dim.length) {
					if (length < 1024 && commonByteArray_ONTARGET_load_dim.length == 0) {
						commonByteArray_ONTARGET_load_dim = new byte[1024];
					} else {
						commonByteArray_ONTARGET_load_dim = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_ONTARGET_load_dim, 0, length);
				strReturn = new String(commonByteArray_ONTARGET_load_dim, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ONTARGET_load_dim) {

				try {

					int length = 0;

					this.DW_ID = readString(dis);

					this.SRC_ERP_SCHEMA = readString(dis);

					this.SRC_ERP_ID = readInteger(dis);

					this.name = readString(dis);

					this.address_1 = readString(dis);

					this.address_2 = readString(dis);

					this.city = readString(dis);

					this.county = readString(dis);

					this.state = readString(dis);

					this.zip = readString(dis);

					this.phone = readString(dis);

					this.fax = readString(dis);

					this.email = readString(dis);

					this.cost_center_id = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.eligible_for_group_scheduling = null;
					} else {
						this.eligible_for_group_scheduling = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.last_insert_ts = null;
					} else {
						this.last_insert_ts = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.last_update_ts = null;
					} else {
						this.last_update_ts = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ONTARGET_load_dim) {

				try {

					int length = 0;

					this.DW_ID = readString(dis);

					this.SRC_ERP_SCHEMA = readString(dis);

					this.SRC_ERP_ID = readInteger(dis);

					this.name = readString(dis);

					this.address_1 = readString(dis);

					this.address_2 = readString(dis);

					this.city = readString(dis);

					this.county = readString(dis);

					this.state = readString(dis);

					this.zip = readString(dis);

					this.phone = readString(dis);

					this.fax = readString(dis);

					this.email = readString(dis);

					this.cost_center_id = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.eligible_for_group_scheduling = null;
					} else {
						this.eligible_for_group_scheduling = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.last_insert_ts = null;
					} else {
						this.last_insert_ts = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.last_update_ts = null;
					} else {
						this.last_update_ts = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.DW_ID, dos);

				// String

				writeString(this.SRC_ERP_SCHEMA, dos);

				// Integer

				writeInteger(this.SRC_ERP_ID, dos);

				// String

				writeString(this.name, dos);

				// String

				writeString(this.address_1, dos);

				// String

				writeString(this.address_2, dos);

				// String

				writeString(this.city, dos);

				// String

				writeString(this.county, dos);

				// String

				writeString(this.state, dos);

				// String

				writeString(this.zip, dos);

				// String

				writeString(this.phone, dos);

				// String

				writeString(this.fax, dos);

				// String

				writeString(this.email, dos);

				// Integer

				writeInteger(this.cost_center_id, dos);

				// Boolean

				if (this.eligible_for_group_scheduling == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.eligible_for_group_scheduling);
				}

				// Long

				if (this.last_insert_ts == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.last_insert_ts);
				}

				// Long

				if (this.last_update_ts == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.last_update_ts);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.DW_ID, dos);

				// String

				writeString(this.SRC_ERP_SCHEMA, dos);

				// Integer

				writeInteger(this.SRC_ERP_ID, dos);

				// String

				writeString(this.name, dos);

				// String

				writeString(this.address_1, dos);

				// String

				writeString(this.address_2, dos);

				// String

				writeString(this.city, dos);

				// String

				writeString(this.county, dos);

				// String

				writeString(this.state, dos);

				// String

				writeString(this.zip, dos);

				// String

				writeString(this.phone, dos);

				// String

				writeString(this.fax, dos);

				// String

				writeString(this.email, dos);

				// Integer

				writeInteger(this.cost_center_id, dos);

				// Boolean

				if (this.eligible_for_group_scheduling == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.eligible_for_group_scheduling);
				}

				// Long

				if (this.last_insert_ts == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.last_insert_ts);
				}

				// Long

				if (this.last_update_ts == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.last_update_ts);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("DW_ID=" + DW_ID);
			sb.append(",SRC_ERP_SCHEMA=" + SRC_ERP_SCHEMA);
			sb.append(",SRC_ERP_ID=" + String.valueOf(SRC_ERP_ID));
			sb.append(",name=" + name);
			sb.append(",address_1=" + address_1);
			sb.append(",address_2=" + address_2);
			sb.append(",city=" + city);
			sb.append(",county=" + county);
			sb.append(",state=" + state);
			sb.append(",zip=" + zip);
			sb.append(",phone=" + phone);
			sb.append(",fax=" + fax);
			sb.append(",email=" + email);
			sb.append(",cost_center_id=" + String.valueOf(cost_center_id));
			sb.append(",eligible_for_group_scheduling=" + String.valueOf(eligible_for_group_scheduling));
			sb.append(",last_insert_ts=" + String.valueOf(last_insert_ts));
			sb.append(",last_update_ts=" + String.valueOf(last_update_ts));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row7Struct row7 = new row7Struct();

				/**
				 * [tBigQueryOutput_7_tBQOB begin ] start
				 */

				ok_Hash.put("tBigQueryOutput_7_tBQOB", false);
				start_Hash.put("tBigQueryOutput_7_tBQOB", System.currentTimeMillis());

				currentVirtualComponent = "tBigQueryOutput_7";

				currentComponent = "tBigQueryOutput_7_tBQOB";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row7");
				}

				int tos_count_tBigQueryOutput_7_tBQOB = 0;

				int nb_line_tBigQueryOutput_7_tBQOB = 0;
				String rowSeparator_tBigQueryOutput_7_tBQOB = "\n";
				String fieldSeparator_tBigQueryOutput_7_tBQOB = ",";
				char escapeChar_tBigQueryOutput_7_tBQOB = "\\".charAt(0);
				char textEnclosure_tBigQueryOutput_7_tBQOB = "\"".charAt(0);

				escapeChar_tBigQueryOutput_7_tBQOB = textEnclosure_tBigQueryOutput_7_tBQOB;

				if (escapeChar_tBigQueryOutput_7_tBQOB == '\\') {
				} else if (escapeChar_tBigQueryOutput_7_tBQOB == textEnclosure_tBigQueryOutput_7_tBQOB) {
				} else {
					throw new RuntimeException("The escape mode only support the '\\' or double text enclosure.");
				}

				java.io.File file_tBigQueryOutput_7_tBQOB = new java.io.File(
						"/Applications/TOSDI-8.0.1/studio/workspace/site_data.avro");

				file_tBigQueryOutput_7_tBQOB.getParentFile().mkdirs();

				com.talend.csv.CSVWriter csvWriter_tBigQueryOutput_7_tBQOB = new com.talend.csv.CSVWriter(
						new java.io.BufferedWriter(new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(file_tBigQueryOutput_7_tBQOB, false), "ISO-8859-15")));
				resourceMap.put("csvWriter_tBigQueryOutput_7_tBQOB", csvWriter_tBigQueryOutput_7_tBQOB);
				csvWriter_tBigQueryOutput_7_tBQOB.setSeparator(fieldSeparator_tBigQueryOutput_7_tBQOB.charAt(0));

				csvWriter_tBigQueryOutput_7_tBQOB.setLineEnd(rowSeparator_tBigQueryOutput_7_tBQOB);
				csvWriter_tBigQueryOutput_7_tBQOB.setEscapeChar(escapeChar_tBigQueryOutput_7_tBQOB);
				csvWriter_tBigQueryOutput_7_tBQOB.setQuoteChar(textEnclosure_tBigQueryOutput_7_tBQOB);
				csvWriter_tBigQueryOutput_7_tBQOB.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.AUTO);

				/**
				 * [tBigQueryOutput_7_tBQOB begin ] stop
				 */

				/**
				 * [tDBInput_7 begin ] start
				 */

				ok_Hash.put("tDBInput_7", false);
				start_Hash.put("tDBInput_7", System.currentTimeMillis());

				currentComponent = "tDBInput_7";

				int tos_count_tDBInput_7 = 0;

				int nb_line_tDBInput_7 = 0;
				java.sql.Connection conn_tDBInput_7 = null;
				String driverClass_tDBInput_7 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBInput_7 = java.lang.Class.forName(driverClass_tDBInput_7);
				String dbUser_tDBInput_7 = "postgres";

				final String decryptedPassword_tDBInput_7 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:tKogwU4XYXERXrSN93EJRwUcO90HuRpIeAXeOwOhUKAeKZNJ/ys=");

				String dbPwd_tDBInput_7 = decryptedPassword_tDBInput_7;

				String url_tDBInput_7 = "jdbc:postgresql://" + "localhost" + ":" + "5431" + "/" + "OnTarget";

				conn_tDBInput_7 = java.sql.DriverManager.getConnection(url_tDBInput_7, dbUser_tDBInput_7,
						dbPwd_tDBInput_7);

				conn_tDBInput_7.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_7 = conn_tDBInput_7.createStatement();

				String dbquery_tDBInput_7 = "select cast(md5('smallmiracle_dim_client_'||cast(id as varchar(10))) as varchar(50)) as DW_ID,\n        'smallmiracle' a"
						+ "s SRC_ERP_SCHEMA, id as SRC_ERP_ID,\n        name,address1 as address_1,address2 as address_2 , city,county,state,zip,pho"
						+ "ne,fax,email,cast(coalesce(prbuscostcenterid,-1) as int) as cost_center_id,\n        eligibleforgroupscheduling as eligib"
						+ "le_for_group_scheduling,\n        cast(to_char((current_timestamp)::TIMESTAMP,'yyyymmddhhmiss') as BigInt) as last_insert"
						+ "_ts,\n        cast(19000101000000 as bigint) as last_update_ts\n        from smallmiracle.fcfacility";

				globalMap.put("tDBInput_7_QUERY", dbquery_tDBInput_7);
				java.sql.ResultSet rs_tDBInput_7 = null;

				try {
					rs_tDBInput_7 = stmt_tDBInput_7.executeQuery(dbquery_tDBInput_7);
					java.sql.ResultSetMetaData rsmd_tDBInput_7 = rs_tDBInput_7.getMetaData();
					int colQtyInRs_tDBInput_7 = rsmd_tDBInput_7.getColumnCount();

					String tmpContent_tDBInput_7 = null;

					while (rs_tDBInput_7.next()) {
						nb_line_tDBInput_7++;

						if (colQtyInRs_tDBInput_7 < 1) {
							row7.DW_ID = null;
						} else {

							row7.DW_ID = routines.system.JDBCUtil.getString(rs_tDBInput_7, 1, false);
						}
						if (colQtyInRs_tDBInput_7 < 2) {
							row7.SRC_ERP_SCHEMA = null;
						} else {

							row7.SRC_ERP_SCHEMA = routines.system.JDBCUtil.getString(rs_tDBInput_7, 2, false);
						}
						if (colQtyInRs_tDBInput_7 < 3) {
							row7.SRC_ERP_ID = null;
						} else {

							row7.SRC_ERP_ID = rs_tDBInput_7.getInt(3);
							if (rs_tDBInput_7.wasNull()) {
								row7.SRC_ERP_ID = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 4) {
							row7.name = null;
						} else {

							row7.name = routines.system.JDBCUtil.getString(rs_tDBInput_7, 4, false);
						}
						if (colQtyInRs_tDBInput_7 < 5) {
							row7.address_1 = null;
						} else {

							row7.address_1 = routines.system.JDBCUtil.getString(rs_tDBInput_7, 5, false);
						}
						if (colQtyInRs_tDBInput_7 < 6) {
							row7.address_2 = null;
						} else {

							row7.address_2 = routines.system.JDBCUtil.getString(rs_tDBInput_7, 6, false);
						}
						if (colQtyInRs_tDBInput_7 < 7) {
							row7.city = null;
						} else {

							row7.city = routines.system.JDBCUtil.getString(rs_tDBInput_7, 7, false);
						}
						if (colQtyInRs_tDBInput_7 < 8) {
							row7.county = null;
						} else {

							row7.county = routines.system.JDBCUtil.getString(rs_tDBInput_7, 8, false);
						}
						if (colQtyInRs_tDBInput_7 < 9) {
							row7.state = null;
						} else {

							row7.state = routines.system.JDBCUtil.getString(rs_tDBInput_7, 9, false);
						}
						if (colQtyInRs_tDBInput_7 < 10) {
							row7.zip = null;
						} else {

							row7.zip = routines.system.JDBCUtil.getString(rs_tDBInput_7, 10, false);
						}
						if (colQtyInRs_tDBInput_7 < 11) {
							row7.phone = null;
						} else {

							row7.phone = routines.system.JDBCUtil.getString(rs_tDBInput_7, 11, false);
						}
						if (colQtyInRs_tDBInput_7 < 12) {
							row7.fax = null;
						} else {

							row7.fax = routines.system.JDBCUtil.getString(rs_tDBInput_7, 12, false);
						}
						if (colQtyInRs_tDBInput_7 < 13) {
							row7.email = null;
						} else {

							row7.email = routines.system.JDBCUtil.getString(rs_tDBInput_7, 13, false);
						}
						if (colQtyInRs_tDBInput_7 < 14) {
							row7.cost_center_id = null;
						} else {

							row7.cost_center_id = rs_tDBInput_7.getInt(14);
							if (rs_tDBInput_7.wasNull()) {
								row7.cost_center_id = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 15) {
							row7.eligible_for_group_scheduling = null;
						} else {

							row7.eligible_for_group_scheduling = rs_tDBInput_7.getBoolean(15);
							if (rs_tDBInput_7.wasNull()) {
								row7.eligible_for_group_scheduling = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 16) {
							row7.last_insert_ts = null;
						} else {

							row7.last_insert_ts = rs_tDBInput_7.getLong(16);
							if (rs_tDBInput_7.wasNull()) {
								row7.last_insert_ts = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 17) {
							row7.last_update_ts = null;
						} else {

							row7.last_update_ts = rs_tDBInput_7.getLong(17);
							if (rs_tDBInput_7.wasNull()) {
								row7.last_update_ts = null;
							}
						}

						/**
						 * [tDBInput_7 begin ] stop
						 */

						/**
						 * [tDBInput_7 main ] start
						 */

						currentComponent = "tDBInput_7";

						tos_count_tDBInput_7++;

						/**
						 * [tDBInput_7 main ] stop
						 */

						/**
						 * [tDBInput_7 process_data_begin ] start
						 */

						currentComponent = "tDBInput_7";

						/**
						 * [tDBInput_7 process_data_begin ] stop
						 */

						/**
						 * [tBigQueryOutput_7_tBQOB main ] start
						 */

						currentVirtualComponent = "tBigQueryOutput_7";

						currentComponent = "tBigQueryOutput_7_tBQOB";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row7"

							);
						}

						String[] row_tBigQueryOutput_7_tBQOB = new String[17];
						java.util.Arrays.fill(row_tBigQueryOutput_7_tBQOB, "\\N");

						int curColumnIndex_tBigQueryOutput_7_tBQOB = 0;

						curColumnIndex_tBigQueryOutput_7_tBQOB = 0;

						if (row7.DW_ID != null) {

							row_tBigQueryOutput_7_tBQOB[curColumnIndex_tBigQueryOutput_7_tBQOB] = row7.DW_ID;

						} else {
							row_tBigQueryOutput_7_tBQOB[curColumnIndex_tBigQueryOutput_7_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_7_tBQOB = 1;

						if (row7.SRC_ERP_SCHEMA != null) {

							row_tBigQueryOutput_7_tBQOB[curColumnIndex_tBigQueryOutput_7_tBQOB] = row7.SRC_ERP_SCHEMA;

						} else {
							row_tBigQueryOutput_7_tBQOB[curColumnIndex_tBigQueryOutput_7_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_7_tBQOB = 2;

						if (row7.SRC_ERP_ID != null) {

							row_tBigQueryOutput_7_tBQOB[curColumnIndex_tBigQueryOutput_7_tBQOB] = String
									.valueOf(row7.SRC_ERP_ID);

						} else {
							row_tBigQueryOutput_7_tBQOB[curColumnIndex_tBigQueryOutput_7_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_7_tBQOB = 3;

						if (row7.name != null) {

							row_tBigQueryOutput_7_tBQOB[curColumnIndex_tBigQueryOutput_7_tBQOB] = row7.name;

						} else {
							row_tBigQueryOutput_7_tBQOB[curColumnIndex_tBigQueryOutput_7_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_7_tBQOB = 4;

						if (row7.address_1 != null) {

							row_tBigQueryOutput_7_tBQOB[curColumnIndex_tBigQueryOutput_7_tBQOB] = row7.address_1;

						} else {
							row_tBigQueryOutput_7_tBQOB[curColumnIndex_tBigQueryOutput_7_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_7_tBQOB = 5;

						if (row7.address_2 != null) {

							row_tBigQueryOutput_7_tBQOB[curColumnIndex_tBigQueryOutput_7_tBQOB] = row7.address_2;

						} else {
							row_tBigQueryOutput_7_tBQOB[curColumnIndex_tBigQueryOutput_7_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_7_tBQOB = 6;

						if (row7.city != null) {

							row_tBigQueryOutput_7_tBQOB[curColumnIndex_tBigQueryOutput_7_tBQOB] = row7.city;

						} else {
							row_tBigQueryOutput_7_tBQOB[curColumnIndex_tBigQueryOutput_7_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_7_tBQOB = 7;

						if (row7.county != null) {

							row_tBigQueryOutput_7_tBQOB[curColumnIndex_tBigQueryOutput_7_tBQOB] = row7.county;

						} else {
							row_tBigQueryOutput_7_tBQOB[curColumnIndex_tBigQueryOutput_7_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_7_tBQOB = 8;

						if (row7.state != null) {

							row_tBigQueryOutput_7_tBQOB[curColumnIndex_tBigQueryOutput_7_tBQOB] = row7.state;

						} else {
							row_tBigQueryOutput_7_tBQOB[curColumnIndex_tBigQueryOutput_7_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_7_tBQOB = 9;

						if (row7.zip != null) {

							row_tBigQueryOutput_7_tBQOB[curColumnIndex_tBigQueryOutput_7_tBQOB] = row7.zip;

						} else {
							row_tBigQueryOutput_7_tBQOB[curColumnIndex_tBigQueryOutput_7_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_7_tBQOB = 10;

						if (row7.phone != null) {

							row_tBigQueryOutput_7_tBQOB[curColumnIndex_tBigQueryOutput_7_tBQOB] = row7.phone;

						} else {
							row_tBigQueryOutput_7_tBQOB[curColumnIndex_tBigQueryOutput_7_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_7_tBQOB = 11;

						if (row7.fax != null) {

							row_tBigQueryOutput_7_tBQOB[curColumnIndex_tBigQueryOutput_7_tBQOB] = row7.fax;

						} else {
							row_tBigQueryOutput_7_tBQOB[curColumnIndex_tBigQueryOutput_7_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_7_tBQOB = 12;

						if (row7.email != null) {

							row_tBigQueryOutput_7_tBQOB[curColumnIndex_tBigQueryOutput_7_tBQOB] = row7.email;

						} else {
							row_tBigQueryOutput_7_tBQOB[curColumnIndex_tBigQueryOutput_7_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_7_tBQOB = 13;

						if (row7.cost_center_id != null) {

							row_tBigQueryOutput_7_tBQOB[curColumnIndex_tBigQueryOutput_7_tBQOB] = String
									.valueOf(row7.cost_center_id);

						} else {
							row_tBigQueryOutput_7_tBQOB[curColumnIndex_tBigQueryOutput_7_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_7_tBQOB = 14;

						if (row7.eligible_for_group_scheduling != null) {

							row_tBigQueryOutput_7_tBQOB[curColumnIndex_tBigQueryOutput_7_tBQOB] = String
									.valueOf(true == row7.eligible_for_group_scheduling ? "1" : "0");

						} else {
							row_tBigQueryOutput_7_tBQOB[curColumnIndex_tBigQueryOutput_7_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_7_tBQOB = 15;

						if (row7.last_insert_ts != null) {

							row_tBigQueryOutput_7_tBQOB[curColumnIndex_tBigQueryOutput_7_tBQOB] = String
									.valueOf(row7.last_insert_ts);

						} else {
							row_tBigQueryOutput_7_tBQOB[curColumnIndex_tBigQueryOutput_7_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_7_tBQOB = 16;

						if (row7.last_update_ts != null) {

							row_tBigQueryOutput_7_tBQOB[curColumnIndex_tBigQueryOutput_7_tBQOB] = String
									.valueOf(row7.last_update_ts);

						} else {
							row_tBigQueryOutput_7_tBQOB[curColumnIndex_tBigQueryOutput_7_tBQOB] = "\\N";
						}

						csvWriter_tBigQueryOutput_7_tBQOB.writeNextEnhance(row_tBigQueryOutput_7_tBQOB, "");
						nb_line_tBigQueryOutput_7_tBQOB++;

						tos_count_tBigQueryOutput_7_tBQOB++;

						/**
						 * [tBigQueryOutput_7_tBQOB main ] stop
						 */

						/**
						 * [tBigQueryOutput_7_tBQOB process_data_begin ] start
						 */

						currentVirtualComponent = "tBigQueryOutput_7";

						currentComponent = "tBigQueryOutput_7_tBQOB";

						/**
						 * [tBigQueryOutput_7_tBQOB process_data_begin ] stop
						 */

						/**
						 * [tBigQueryOutput_7_tBQOB process_data_end ] start
						 */

						currentVirtualComponent = "tBigQueryOutput_7";

						currentComponent = "tBigQueryOutput_7_tBQOB";

						/**
						 * [tBigQueryOutput_7_tBQOB process_data_end ] stop
						 */

						/**
						 * [tDBInput_7 process_data_end ] start
						 */

						currentComponent = "tDBInput_7";

						/**
						 * [tDBInput_7 process_data_end ] stop
						 */

						/**
						 * [tDBInput_7 end ] start
						 */

						currentComponent = "tDBInput_7";

					}
				} finally {
					if (rs_tDBInput_7 != null) {
						rs_tDBInput_7.close();
					}
					if (stmt_tDBInput_7 != null) {
						stmt_tDBInput_7.close();
					}
					if (conn_tDBInput_7 != null && !conn_tDBInput_7.isClosed()) {

						conn_tDBInput_7.commit();

						conn_tDBInput_7.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}
				globalMap.put("tDBInput_7_NB_LINE", nb_line_tDBInput_7);

				ok_Hash.put("tDBInput_7", true);
				end_Hash.put("tDBInput_7", System.currentTimeMillis());

				/**
				 * [tDBInput_7 end ] stop
				 */

				/**
				 * [tBigQueryOutput_7_tBQOB end ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_7";

				currentComponent = "tBigQueryOutput_7_tBQOB";

				if (csvWriter_tBigQueryOutput_7_tBQOB != null) {
					csvWriter_tBigQueryOutput_7_tBQOB.close();
				}
				resourceMap.put("finish_tBigQueryOutput_7_tBQOB", true);
				globalMap.put("tBigQueryOutput_7_tBQOB_NB_LINE", nb_line_tBigQueryOutput_7_tBQOB);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row7");
				}

				ok_Hash.put("tBigQueryOutput_7_tBQOB", true);
				end_Hash.put("tBigQueryOutput_7_tBQOB", System.currentTimeMillis());

				/**
				 * [tBigQueryOutput_7_tBQOB end ] stop
				 */

				/**
				 * [tBigQueryOutput_7_tBQBE begin ] start
				 */

				ok_Hash.put("tBigQueryOutput_7_tBQBE", false);
				start_Hash.put("tBigQueryOutput_7_tBQBE", System.currentTimeMillis());

				currentVirtualComponent = "tBigQueryOutput_7";

				currentComponent = "tBigQueryOutput_7_tBQBE";

				int tos_count_tBigQueryOutput_7_tBQBE = 0;

				/* ----START-CREATING-CLIENT (Cloud API)---- */

				com.google.auth.oauth2.GoogleCredentials credentials_tBigQueryOutput_7;
				java.io.File credentialsFile_tBigQueryOutput_7 = new java.io.File(
						"/Users/jsun/Documents/WCIWork/OnTarget/code/otmirror-060322-9471bb896012.json");
				try (java.io.FileInputStream credentialsStream_tBigQueryOutput_7 = new java.io.FileInputStream(
						credentialsFile_tBigQueryOutput_7)) {
					credentials_tBigQueryOutput_7 = com.google.auth.oauth2.ServiceAccountCredentials
							.fromStream(credentialsStream_tBigQueryOutput_7);
				}

				com.google.cloud.bigquery.BigQuery bigquery_tBigQueryOutput_7 = com.google.cloud.bigquery.BigQueryOptions
						.newBuilder().setCredentials(credentials_tBigQueryOutput_7).setProjectId("otmirror-060322")
						.build().getService();

				/* ----END-CREATING-CLIENT (Cloud API)---- */

				long nb_line_tBigQueryOutput_7 = 0;

				com.google.auth.Credentials credential_tBigQueryOutput_7 = null;
				try {
					credential_tBigQueryOutput_7 = com.google.auth.oauth2.GoogleCredentials
							.fromStream(new java.io.FileInputStream(
									"/Users/jsun/Documents/WCIWork/OnTarget/code/otmirror-060322-9471bb896012.json"));
				} catch (IOException e_tBigQueryOutput_7) {
					globalMap.put("tBigQueryOutput_7_ERROR_MESSAGE", e_tBigQueryOutput_7.getMessage());
				}
				com.google.cloud.storage.Storage storage_tBigQueryOutput_7 = com.google.cloud.storage.StorageOptions
						.newBuilder().setCredentials(credential_tBigQueryOutput_7).build().getService();

				java.io.File file_tBigQueryOutput_7 = new java.io.File(
						"/Applications/TOSDI-8.0.1/studio/workspace/site_data.avro");

				com.google.cloud.storage.BlobInfo blobInfo_tBigQueryOutput_7 = com.google.cloud.storage.BlobInfo
						.newBuilder("dw-tmp", file_tBigQueryOutput_7.getName()).build();
				storage_tBigQueryOutput_7.create(blobInfo_tBigQueryOutput_7,
						java.nio.file.Files.readAllBytes(file_tBigQueryOutput_7.toPath()));

				/* ----END-UPLOADING-FILE---- */

				/* ----START-CREATING-JOB (Cloud API)---- */
				com.google.cloud.bigquery.TableId tableId_tBigQueryOutput_7 = com.google.cloud.bigquery.TableId
						.of("otmirror-060322", "DW", "dim_site");
				com.google.cloud.bigquery.LoadJobConfiguration.Builder loadJobBuilder_tBigQueryOutput_7 = com.google.cloud.bigquery.LoadJobConfiguration
						.newBuilder(tableId_tBigQueryOutput_7, "gs://dw-tmp/site_data.avro");

				boolean dropTable_tBigQueryOutput_7 = false;

				if (dropTable_tBigQueryOutput_7
						&& bigquery_tBigQueryOutput_7.getTable(tableId_tBigQueryOutput_7) != null) {
					boolean deleted = bigquery_tBigQueryOutput_7.delete(tableId_tBigQueryOutput_7);
					if (deleted) {

					} else {
						throw new RuntimeException("Unable to delete table " + tableId_tBigQueryOutput_7);
					}
				}

				if (bigquery_tBigQueryOutput_7.getTable(tableId_tBigQueryOutput_7) == null) {
					java.util.List<com.google.cloud.bigquery.Field> fields_tBigQueryOutput_7 = new java.util.ArrayList<>();

					com.google.cloud.bigquery.Field field_0 = com.google.cloud.bigquery.Field
							.newBuilder("DW_ID", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_7.add(field_0);

					com.google.cloud.bigquery.Field field_1 = com.google.cloud.bigquery.Field
							.newBuilder("SRC_ERP_SCHEMA", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_7.add(field_1);

					com.google.cloud.bigquery.Field field_2 = com.google.cloud.bigquery.Field
							.newBuilder("SRC_ERP_ID", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_7.add(field_2);

					com.google.cloud.bigquery.Field field_3 = com.google.cloud.bigquery.Field
							.newBuilder("name", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_7.add(field_3);

					com.google.cloud.bigquery.Field field_4 = com.google.cloud.bigquery.Field
							.newBuilder("address_1", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_7.add(field_4);

					com.google.cloud.bigquery.Field field_5 = com.google.cloud.bigquery.Field
							.newBuilder("address_2", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_7.add(field_5);

					com.google.cloud.bigquery.Field field_6 = com.google.cloud.bigquery.Field
							.newBuilder("city", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_7.add(field_6);

					com.google.cloud.bigquery.Field field_7 = com.google.cloud.bigquery.Field
							.newBuilder("county", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_7.add(field_7);

					com.google.cloud.bigquery.Field field_8 = com.google.cloud.bigquery.Field
							.newBuilder("state", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_7.add(field_8);

					com.google.cloud.bigquery.Field field_9 = com.google.cloud.bigquery.Field
							.newBuilder("zip", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_7.add(field_9);

					com.google.cloud.bigquery.Field field_10 = com.google.cloud.bigquery.Field
							.newBuilder("phone", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_7.add(field_10);

					com.google.cloud.bigquery.Field field_11 = com.google.cloud.bigquery.Field
							.newBuilder("fax", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_7.add(field_11);

					com.google.cloud.bigquery.Field field_12 = com.google.cloud.bigquery.Field
							.newBuilder("email", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_7.add(field_12);

					com.google.cloud.bigquery.Field field_13 = com.google.cloud.bigquery.Field
							.newBuilder("cost_center_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_7.add(field_13);

					com.google.cloud.bigquery.Field field_14 = com.google.cloud.bigquery.Field
							.newBuilder("eligible_for_group_scheduling",
									com.google.cloud.bigquery.LegacySQLTypeName.BOOLEAN)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_7.add(field_14);

					com.google.cloud.bigquery.Field field_15 = com.google.cloud.bigquery.Field
							.newBuilder("last_insert_ts", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_7.add(field_15);

					com.google.cloud.bigquery.Field field_16 = com.google.cloud.bigquery.Field
							.newBuilder("last_update_ts", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_7.add(field_16);

					com.google.cloud.bigquery.Schema schema_tBigQueryOutput_7 = com.google.cloud.bigquery.Schema
							.of(fields_tBigQueryOutput_7);
					com.google.cloud.bigquery.TableInfo tableInfo_tBigQueryOutput_7 = com.google.cloud.bigquery.TableInfo
							.newBuilder(tableId_tBigQueryOutput_7,
									com.google.cloud.bigquery.StandardTableDefinition.of(schema_tBigQueryOutput_7))
							.build();
					com.google.cloud.bigquery.Table table_tBigQueryOutput_7 = bigquery_tBigQueryOutput_7
							.create(tableInfo_tBigQueryOutput_7);
					loadJobBuilder_tBigQueryOutput_7.setSchema(schema_tBigQueryOutput_7);
					loadJobBuilder_tBigQueryOutput_7
							.setCreateDisposition(com.google.cloud.bigquery.JobInfo.CreateDisposition.CREATE_IF_NEEDED);

				} else {
					loadJobBuilder_tBigQueryOutput_7
							.setCreateDisposition(com.google.cloud.bigquery.JobInfo.CreateDisposition.CREATE_NEVER);
				}

				loadJobBuilder_tBigQueryOutput_7
						.setWriteDisposition(com.google.cloud.bigquery.JobInfo.WriteDisposition.WRITE_TRUNCATE);
				loadJobBuilder_tBigQueryOutput_7.setDestinationTable(tableId_tBigQueryOutput_7);
				com.google.cloud.bigquery.CsvOptions.Builder csvOptions_tBigQueryOutput_7 = com.google.cloud.bigquery.CsvOptions
						.newBuilder();
				csvOptions_tBigQueryOutput_7.setAllowQuotedNewLines(true);
				csvOptions_tBigQueryOutput_7.setSkipLeadingRows(0);

				csvOptions_tBigQueryOutput_7.setFieldDelimiter(",");

				loadJobBuilder_tBigQueryOutput_7.setFormatOptions(csvOptions_tBigQueryOutput_7.build());
				loadJobBuilder_tBigQueryOutput_7.setNullMarker("\\N");
				com.google.cloud.bigquery.Job job_tBigQueryOutput_7 = bigquery_tBigQueryOutput_7
						.create(com.google.cloud.bigquery.JobInfo.of(loadJobBuilder_tBigQueryOutput_7.build()));
				job_tBigQueryOutput_7 = job_tBigQueryOutput_7
						.waitFor(com.google.cloud.RetryOption.initialRetryDelay(org.threeten.bp.Duration.ofSeconds(1)));
				com.google.gson.Gson gsonObject_tBigQueryOutput_7 = new com.google.gson.Gson();
				if (job_tBigQueryOutput_7 != null && job_tBigQueryOutput_7.getStatus().getError() == null) {
					globalMap.put("tBigQueryOutput_7_JOBID", job_tBigQueryOutput_7.getJobId().getJob());
					globalMap.put("tBigQueryOutput_7_STATISTICS",
							gsonObject_tBigQueryOutput_7.toJson(job_tBigQueryOutput_7.getStatistics()));

				} else {
					if (job_tBigQueryOutput_7 == null) {
						throw new RuntimeException("Job no longer exists");
					}
					globalMap.put("tBigQueryOutput_7_JOBID", job_tBigQueryOutput_7.getJobId().getJob());
					globalMap.put("tBigQueryOutput_7_STATISTICS",
							gsonObject_tBigQueryOutput_7.toJson(job_tBigQueryOutput_7.getStatistics()));
					List<com.google.cloud.bigquery.BigQueryError> errorList = job_tBigQueryOutput_7.getStatus()
							.getExecutionErrors();
					throw new RuntimeException("Job failed: " + errorList.get(errorList.size() - 1));
				}

				/* ----END-CREATING-JOB (Cloud API)---- */

				/**
				 * [tBigQueryOutput_7_tBQBE begin ] stop
				 */

				/**
				 * [tBigQueryOutput_7_tBQBE main ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_7";

				currentComponent = "tBigQueryOutput_7_tBQBE";

				tos_count_tBigQueryOutput_7_tBQBE++;

				/**
				 * [tBigQueryOutput_7_tBQBE main ] stop
				 */

				/**
				 * [tBigQueryOutput_7_tBQBE process_data_begin ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_7";

				currentComponent = "tBigQueryOutput_7_tBQBE";

				/**
				 * [tBigQueryOutput_7_tBQBE process_data_begin ] stop
				 */

				/**
				 * [tBigQueryOutput_7_tBQBE process_data_end ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_7";

				currentComponent = "tBigQueryOutput_7_tBQBE";

				/**
				 * [tBigQueryOutput_7_tBQBE process_data_end ] stop
				 */

				/**
				 * [tBigQueryOutput_7_tBQBE end ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_7";

				currentComponent = "tBigQueryOutput_7_tBQBE";

				ok_Hash.put("tBigQueryOutput_7_tBQBE", true);
				end_Hash.put("tBigQueryOutput_7_tBQBE", System.currentTimeMillis());

				/**
				 * [tBigQueryOutput_7_tBQBE end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_7:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk7", 0, "ok");
			}

			tDBInput_8Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_7 finally ] start
				 */

				currentComponent = "tDBInput_7";

				/**
				 * [tDBInput_7 finally ] stop
				 */

				/**
				 * [tBigQueryOutput_7_tBQOB finally ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_7";

				currentComponent = "tBigQueryOutput_7_tBQOB";

				if (resourceMap.get("finish_tBigQueryOutput_7_tBQOB") == null) {
					if (resourceMap.get("csvWriter_tBigQueryOutput_7_tBQOB") != null) {
						((com.talend.csv.CSVWriter) resourceMap.get("csvWriter_tBigQueryOutput_7_tBQOB")).close();
					}
				}

				/**
				 * [tBigQueryOutput_7_tBQOB finally ] stop
				 */

				/**
				 * [tBigQueryOutput_7_tBQBE finally ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_7";

				currentComponent = "tBigQueryOutput_7_tBQBE";

				/**
				 * [tBigQueryOutput_7_tBQBE finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_7_SUBPROCESS_STATE", 1);
	}

	public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_ONTARGET_load_dim = new byte[0];
		static byte[] commonByteArray_ONTARGET_load_dim = new byte[0];

		public Integer authorized_id;

		public Integer getAuthorized_id() {
			return this.authorized_id;
		}

		public Integer max_units_day;

		public Integer getMax_units_day() {
			return this.max_units_day;
		}

		public Integer max_units_week;

		public Integer getMax_units_week() {
			return this.max_units_week;
		}

		public Integer max_units_month;

		public Integer getMax_units_month() {
			return this.max_units_month;
		}

		public Integer max_units_quarter;

		public Integer getMax_units_quarter() {
			return this.max_units_quarter;
		}

		public Integer max_units_semi_annual;

		public Integer getMax_units_semi_annual() {
			return this.max_units_semi_annual;
		}

		public Integer max_units_year;

		public Integer getMax_units_year() {
			return this.max_units_year;
		}

		public Integer max_units_total;

		public Integer getMax_units_total() {
			return this.max_units_total;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ONTARGET_load_dim) {

				try {

					int length = 0;

					this.authorized_id = readInteger(dis);

					this.max_units_day = readInteger(dis);

					this.max_units_week = readInteger(dis);

					this.max_units_month = readInteger(dis);

					this.max_units_quarter = readInteger(dis);

					this.max_units_semi_annual = readInteger(dis);

					this.max_units_year = readInteger(dis);

					this.max_units_total = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ONTARGET_load_dim) {

				try {

					int length = 0;

					this.authorized_id = readInteger(dis);

					this.max_units_day = readInteger(dis);

					this.max_units_week = readInteger(dis);

					this.max_units_month = readInteger(dis);

					this.max_units_quarter = readInteger(dis);

					this.max_units_semi_annual = readInteger(dis);

					this.max_units_year = readInteger(dis);

					this.max_units_total = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.authorized_id, dos);

				// Integer

				writeInteger(this.max_units_day, dos);

				// Integer

				writeInteger(this.max_units_week, dos);

				// Integer

				writeInteger(this.max_units_month, dos);

				// Integer

				writeInteger(this.max_units_quarter, dos);

				// Integer

				writeInteger(this.max_units_semi_annual, dos);

				// Integer

				writeInteger(this.max_units_year, dos);

				// Integer

				writeInteger(this.max_units_total, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.authorized_id, dos);

				// Integer

				writeInteger(this.max_units_day, dos);

				// Integer

				writeInteger(this.max_units_week, dos);

				// Integer

				writeInteger(this.max_units_month, dos);

				// Integer

				writeInteger(this.max_units_quarter, dos);

				// Integer

				writeInteger(this.max_units_semi_annual, dos);

				// Integer

				writeInteger(this.max_units_year, dos);

				// Integer

				writeInteger(this.max_units_total, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("authorized_id=" + String.valueOf(authorized_id));
			sb.append(",max_units_day=" + String.valueOf(max_units_day));
			sb.append(",max_units_week=" + String.valueOf(max_units_week));
			sb.append(",max_units_month=" + String.valueOf(max_units_month));
			sb.append(",max_units_quarter=" + String.valueOf(max_units_quarter));
			sb.append(",max_units_semi_annual=" + String.valueOf(max_units_semi_annual));
			sb.append(",max_units_year=" + String.valueOf(max_units_year));
			sb.append(",max_units_total=" + String.valueOf(max_units_total));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row8Struct row8 = new row8Struct();

				/**
				 * [tBigQueryOutput_8_tBQOB begin ] start
				 */

				ok_Hash.put("tBigQueryOutput_8_tBQOB", false);
				start_Hash.put("tBigQueryOutput_8_tBQOB", System.currentTimeMillis());

				currentVirtualComponent = "tBigQueryOutput_8";

				currentComponent = "tBigQueryOutput_8_tBQOB";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row8");
				}

				int tos_count_tBigQueryOutput_8_tBQOB = 0;

				int nb_line_tBigQueryOutput_8_tBQOB = 0;
				String rowSeparator_tBigQueryOutput_8_tBQOB = "\n";
				String fieldSeparator_tBigQueryOutput_8_tBQOB = ",";
				char escapeChar_tBigQueryOutput_8_tBQOB = "\\".charAt(0);
				char textEnclosure_tBigQueryOutput_8_tBQOB = "\"".charAt(0);

				escapeChar_tBigQueryOutput_8_tBQOB = textEnclosure_tBigQueryOutput_8_tBQOB;

				if (escapeChar_tBigQueryOutput_8_tBQOB == '\\') {
				} else if (escapeChar_tBigQueryOutput_8_tBQOB == textEnclosure_tBigQueryOutput_8_tBQOB) {
				} else {
					throw new RuntimeException("The escape mode only support the '\\' or double text enclosure.");
				}

				java.io.File file_tBigQueryOutput_8_tBQOB = new java.io.File(
						"/Applications/TOSDI-8.0.1/studio/workspace/lkp_data.avro");

				file_tBigQueryOutput_8_tBQOB.getParentFile().mkdirs();

				com.talend.csv.CSVWriter csvWriter_tBigQueryOutput_8_tBQOB = new com.talend.csv.CSVWriter(
						new java.io.BufferedWriter(new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(file_tBigQueryOutput_8_tBQOB, false), "ISO-8859-15")));
				resourceMap.put("csvWriter_tBigQueryOutput_8_tBQOB", csvWriter_tBigQueryOutput_8_tBQOB);
				csvWriter_tBigQueryOutput_8_tBQOB.setSeparator(fieldSeparator_tBigQueryOutput_8_tBQOB.charAt(0));

				csvWriter_tBigQueryOutput_8_tBQOB.setLineEnd(rowSeparator_tBigQueryOutput_8_tBQOB);
				csvWriter_tBigQueryOutput_8_tBQOB.setEscapeChar(escapeChar_tBigQueryOutput_8_tBQOB);
				csvWriter_tBigQueryOutput_8_tBQOB.setQuoteChar(textEnclosure_tBigQueryOutput_8_tBQOB);
				csvWriter_tBigQueryOutput_8_tBQOB.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.AUTO);

				/**
				 * [tBigQueryOutput_8_tBQOB begin ] stop
				 */

				/**
				 * [tDBInput_8 begin ] start
				 */

				ok_Hash.put("tDBInput_8", false);
				start_Hash.put("tDBInput_8", System.currentTimeMillis());

				currentComponent = "tDBInput_8";

				int tos_count_tDBInput_8 = 0;

				int nb_line_tDBInput_8 = 0;
				java.sql.Connection conn_tDBInput_8 = null;
				String driverClass_tDBInput_8 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBInput_8 = java.lang.Class.forName(driverClass_tDBInput_8);
				String dbUser_tDBInput_8 = "postgres";

				final String decryptedPassword_tDBInput_8 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:NJZzCeQdealPGxypYUQwK6c9N9wlyllUkuCElZR/ewjJL0n38hU=");

				String dbPwd_tDBInput_8 = decryptedPassword_tDBInput_8;

				String url_tDBInput_8 = "jdbc:postgresql://" + "localhost" + ":" + "5431" + "/" + "OnTarget";

				conn_tDBInput_8 = java.sql.DriverManager.getConnection(url_tDBInput_8, dbUser_tDBInput_8,
						dbPwd_tDBInput_8);

				conn_tDBInput_8.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_8 = conn_tDBInput_8.createStatement();

				String dbquery_tDBInput_8 = "select id as authorized_id,\n        coalesce(maxunitsday,-1) as max_units_day, \n        coalesce(maxunitsweek,-1) as ma"
						+ "x_units_week,\n        coalesce(maxunitsmonth,-1) as max_units_month, \n        coalesce(maxunitsqtr,-1) as max_units_quar"
						+ "ter, \n        coalesce(maxunitssemiannual,-1) as max_units_semi_annual , \n        coalesce(maxunitsyear,-1) as max_units"
						+ "_year, \n        coalesce(maxunitstotal,-1) as max_units_total \n        from smallmiracle.blserviceauthorized";

				globalMap.put("tDBInput_8_QUERY", dbquery_tDBInput_8);
				java.sql.ResultSet rs_tDBInput_8 = null;

				try {
					rs_tDBInput_8 = stmt_tDBInput_8.executeQuery(dbquery_tDBInput_8);
					java.sql.ResultSetMetaData rsmd_tDBInput_8 = rs_tDBInput_8.getMetaData();
					int colQtyInRs_tDBInput_8 = rsmd_tDBInput_8.getColumnCount();

					String tmpContent_tDBInput_8 = null;

					while (rs_tDBInput_8.next()) {
						nb_line_tDBInput_8++;

						if (colQtyInRs_tDBInput_8 < 1) {
							row8.authorized_id = null;
						} else {

							row8.authorized_id = rs_tDBInput_8.getInt(1);
							if (rs_tDBInput_8.wasNull()) {
								row8.authorized_id = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 2) {
							row8.max_units_day = null;
						} else {

							row8.max_units_day = rs_tDBInput_8.getInt(2);
							if (rs_tDBInput_8.wasNull()) {
								row8.max_units_day = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 3) {
							row8.max_units_week = null;
						} else {

							row8.max_units_week = rs_tDBInput_8.getInt(3);
							if (rs_tDBInput_8.wasNull()) {
								row8.max_units_week = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 4) {
							row8.max_units_month = null;
						} else {

							row8.max_units_month = rs_tDBInput_8.getInt(4);
							if (rs_tDBInput_8.wasNull()) {
								row8.max_units_month = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 5) {
							row8.max_units_quarter = null;
						} else {

							row8.max_units_quarter = rs_tDBInput_8.getInt(5);
							if (rs_tDBInput_8.wasNull()) {
								row8.max_units_quarter = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 6) {
							row8.max_units_semi_annual = null;
						} else {

							row8.max_units_semi_annual = rs_tDBInput_8.getInt(6);
							if (rs_tDBInput_8.wasNull()) {
								row8.max_units_semi_annual = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 7) {
							row8.max_units_year = null;
						} else {

							row8.max_units_year = rs_tDBInput_8.getInt(7);
							if (rs_tDBInput_8.wasNull()) {
								row8.max_units_year = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 8) {
							row8.max_units_total = null;
						} else {

							row8.max_units_total = rs_tDBInput_8.getInt(8);
							if (rs_tDBInput_8.wasNull()) {
								row8.max_units_total = null;
							}
						}

						/**
						 * [tDBInput_8 begin ] stop
						 */

						/**
						 * [tDBInput_8 main ] start
						 */

						currentComponent = "tDBInput_8";

						tos_count_tDBInput_8++;

						/**
						 * [tDBInput_8 main ] stop
						 */

						/**
						 * [tDBInput_8 process_data_begin ] start
						 */

						currentComponent = "tDBInput_8";

						/**
						 * [tDBInput_8 process_data_begin ] stop
						 */

						/**
						 * [tBigQueryOutput_8_tBQOB main ] start
						 */

						currentVirtualComponent = "tBigQueryOutput_8";

						currentComponent = "tBigQueryOutput_8_tBQOB";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row8"

							);
						}

						String[] row_tBigQueryOutput_8_tBQOB = new String[8];
						java.util.Arrays.fill(row_tBigQueryOutput_8_tBQOB, "\\N");

						int curColumnIndex_tBigQueryOutput_8_tBQOB = 0;

						curColumnIndex_tBigQueryOutput_8_tBQOB = 0;

						if (row8.authorized_id != null) {

							row_tBigQueryOutput_8_tBQOB[curColumnIndex_tBigQueryOutput_8_tBQOB] = String
									.valueOf(row8.authorized_id);

						} else {
							row_tBigQueryOutput_8_tBQOB[curColumnIndex_tBigQueryOutput_8_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_8_tBQOB = 1;

						if (row8.max_units_day != null) {

							row_tBigQueryOutput_8_tBQOB[curColumnIndex_tBigQueryOutput_8_tBQOB] = String
									.valueOf(row8.max_units_day);

						} else {
							row_tBigQueryOutput_8_tBQOB[curColumnIndex_tBigQueryOutput_8_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_8_tBQOB = 2;

						if (row8.max_units_week != null) {

							row_tBigQueryOutput_8_tBQOB[curColumnIndex_tBigQueryOutput_8_tBQOB] = String
									.valueOf(row8.max_units_week);

						} else {
							row_tBigQueryOutput_8_tBQOB[curColumnIndex_tBigQueryOutput_8_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_8_tBQOB = 3;

						if (row8.max_units_month != null) {

							row_tBigQueryOutput_8_tBQOB[curColumnIndex_tBigQueryOutput_8_tBQOB] = String
									.valueOf(row8.max_units_month);

						} else {
							row_tBigQueryOutput_8_tBQOB[curColumnIndex_tBigQueryOutput_8_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_8_tBQOB = 4;

						if (row8.max_units_quarter != null) {

							row_tBigQueryOutput_8_tBQOB[curColumnIndex_tBigQueryOutput_8_tBQOB] = String
									.valueOf(row8.max_units_quarter);

						} else {
							row_tBigQueryOutput_8_tBQOB[curColumnIndex_tBigQueryOutput_8_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_8_tBQOB = 5;

						if (row8.max_units_semi_annual != null) {

							row_tBigQueryOutput_8_tBQOB[curColumnIndex_tBigQueryOutput_8_tBQOB] = String
									.valueOf(row8.max_units_semi_annual);

						} else {
							row_tBigQueryOutput_8_tBQOB[curColumnIndex_tBigQueryOutput_8_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_8_tBQOB = 6;

						if (row8.max_units_year != null) {

							row_tBigQueryOutput_8_tBQOB[curColumnIndex_tBigQueryOutput_8_tBQOB] = String
									.valueOf(row8.max_units_year);

						} else {
							row_tBigQueryOutput_8_tBQOB[curColumnIndex_tBigQueryOutput_8_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_8_tBQOB = 7;

						if (row8.max_units_total != null) {

							row_tBigQueryOutput_8_tBQOB[curColumnIndex_tBigQueryOutput_8_tBQOB] = String
									.valueOf(row8.max_units_total);

						} else {
							row_tBigQueryOutput_8_tBQOB[curColumnIndex_tBigQueryOutput_8_tBQOB] = "\\N";
						}

						csvWriter_tBigQueryOutput_8_tBQOB.writeNextEnhance(row_tBigQueryOutput_8_tBQOB, "");
						nb_line_tBigQueryOutput_8_tBQOB++;

						tos_count_tBigQueryOutput_8_tBQOB++;

						/**
						 * [tBigQueryOutput_8_tBQOB main ] stop
						 */

						/**
						 * [tBigQueryOutput_8_tBQOB process_data_begin ] start
						 */

						currentVirtualComponent = "tBigQueryOutput_8";

						currentComponent = "tBigQueryOutput_8_tBQOB";

						/**
						 * [tBigQueryOutput_8_tBQOB process_data_begin ] stop
						 */

						/**
						 * [tBigQueryOutput_8_tBQOB process_data_end ] start
						 */

						currentVirtualComponent = "tBigQueryOutput_8";

						currentComponent = "tBigQueryOutput_8_tBQOB";

						/**
						 * [tBigQueryOutput_8_tBQOB process_data_end ] stop
						 */

						/**
						 * [tDBInput_8 process_data_end ] start
						 */

						currentComponent = "tDBInput_8";

						/**
						 * [tDBInput_8 process_data_end ] stop
						 */

						/**
						 * [tDBInput_8 end ] start
						 */

						currentComponent = "tDBInput_8";

					}
				} finally {
					if (rs_tDBInput_8 != null) {
						rs_tDBInput_8.close();
					}
					if (stmt_tDBInput_8 != null) {
						stmt_tDBInput_8.close();
					}
					if (conn_tDBInput_8 != null && !conn_tDBInput_8.isClosed()) {

						conn_tDBInput_8.commit();

						conn_tDBInput_8.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}
				globalMap.put("tDBInput_8_NB_LINE", nb_line_tDBInput_8);

				ok_Hash.put("tDBInput_8", true);
				end_Hash.put("tDBInput_8", System.currentTimeMillis());

				/**
				 * [tDBInput_8 end ] stop
				 */

				/**
				 * [tBigQueryOutput_8_tBQOB end ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_8";

				currentComponent = "tBigQueryOutput_8_tBQOB";

				if (csvWriter_tBigQueryOutput_8_tBQOB != null) {
					csvWriter_tBigQueryOutput_8_tBQOB.close();
				}
				resourceMap.put("finish_tBigQueryOutput_8_tBQOB", true);
				globalMap.put("tBigQueryOutput_8_tBQOB_NB_LINE", nb_line_tBigQueryOutput_8_tBQOB);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row8");
				}

				ok_Hash.put("tBigQueryOutput_8_tBQOB", true);
				end_Hash.put("tBigQueryOutput_8_tBQOB", System.currentTimeMillis());

				/**
				 * [tBigQueryOutput_8_tBQOB end ] stop
				 */

				/**
				 * [tBigQueryOutput_8_tBQBE begin ] start
				 */

				ok_Hash.put("tBigQueryOutput_8_tBQBE", false);
				start_Hash.put("tBigQueryOutput_8_tBQBE", System.currentTimeMillis());

				currentVirtualComponent = "tBigQueryOutput_8";

				currentComponent = "tBigQueryOutput_8_tBQBE";

				int tos_count_tBigQueryOutput_8_tBQBE = 0;

				/* ----START-CREATING-CLIENT (Cloud API)---- */

				com.google.auth.oauth2.GoogleCredentials credentials_tBigQueryOutput_8;
				java.io.File credentialsFile_tBigQueryOutput_8 = new java.io.File(
						"/Users/jsun/Documents/WCIWork/OnTarget/code/otmirror-060322-9471bb896012.json");
				try (java.io.FileInputStream credentialsStream_tBigQueryOutput_8 = new java.io.FileInputStream(
						credentialsFile_tBigQueryOutput_8)) {
					credentials_tBigQueryOutput_8 = com.google.auth.oauth2.ServiceAccountCredentials
							.fromStream(credentialsStream_tBigQueryOutput_8);
				}

				com.google.cloud.bigquery.BigQuery bigquery_tBigQueryOutput_8 = com.google.cloud.bigquery.BigQueryOptions
						.newBuilder().setCredentials(credentials_tBigQueryOutput_8).setProjectId("otmirror-060322")
						.build().getService();

				/* ----END-CREATING-CLIENT (Cloud API)---- */

				long nb_line_tBigQueryOutput_8 = 0;

				com.google.auth.Credentials credential_tBigQueryOutput_8 = null;
				try {
					credential_tBigQueryOutput_8 = com.google.auth.oauth2.GoogleCredentials
							.fromStream(new java.io.FileInputStream(
									"/Users/jsun/Documents/WCIWork/OnTarget/code/otmirror-060322-9471bb896012.json"));
				} catch (IOException e_tBigQueryOutput_8) {
					globalMap.put("tBigQueryOutput_8_ERROR_MESSAGE", e_tBigQueryOutput_8.getMessage());
				}
				com.google.cloud.storage.Storage storage_tBigQueryOutput_8 = com.google.cloud.storage.StorageOptions
						.newBuilder().setCredentials(credential_tBigQueryOutput_8).build().getService();

				java.io.File file_tBigQueryOutput_8 = new java.io.File(
						"/Applications/TOSDI-8.0.1/studio/workspace/lkp_data.avro");

				com.google.cloud.storage.BlobInfo blobInfo_tBigQueryOutput_8 = com.google.cloud.storage.BlobInfo
						.newBuilder("dw-tmp", file_tBigQueryOutput_8.getName()).build();
				storage_tBigQueryOutput_8.create(blobInfo_tBigQueryOutput_8,
						java.nio.file.Files.readAllBytes(file_tBigQueryOutput_8.toPath()));

				/* ----END-UPLOADING-FILE---- */

				/* ----START-CREATING-JOB (Cloud API)---- */
				com.google.cloud.bigquery.TableId tableId_tBigQueryOutput_8 = com.google.cloud.bigquery.TableId
						.of("otmirror-060322", "DW", "lkp_max_auth_units");
				com.google.cloud.bigquery.LoadJobConfiguration.Builder loadJobBuilder_tBigQueryOutput_8 = com.google.cloud.bigquery.LoadJobConfiguration
						.newBuilder(tableId_tBigQueryOutput_8, "gs://dw-tmp/lkp_data.avro");

				boolean dropTable_tBigQueryOutput_8 = false;

				if (dropTable_tBigQueryOutput_8
						&& bigquery_tBigQueryOutput_8.getTable(tableId_tBigQueryOutput_8) != null) {
					boolean deleted = bigquery_tBigQueryOutput_8.delete(tableId_tBigQueryOutput_8);
					if (deleted) {

					} else {
						throw new RuntimeException("Unable to delete table " + tableId_tBigQueryOutput_8);
					}
				}

				if (bigquery_tBigQueryOutput_8.getTable(tableId_tBigQueryOutput_8) == null) {
					java.util.List<com.google.cloud.bigquery.Field> fields_tBigQueryOutput_8 = new java.util.ArrayList<>();

					com.google.cloud.bigquery.Field field_0 = com.google.cloud.bigquery.Field
							.newBuilder("authorized_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_8.add(field_0);

					com.google.cloud.bigquery.Field field_1 = com.google.cloud.bigquery.Field
							.newBuilder("max_units_day", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_8.add(field_1);

					com.google.cloud.bigquery.Field field_2 = com.google.cloud.bigquery.Field
							.newBuilder("max_units_week", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_8.add(field_2);

					com.google.cloud.bigquery.Field field_3 = com.google.cloud.bigquery.Field
							.newBuilder("max_units_month", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_8.add(field_3);

					com.google.cloud.bigquery.Field field_4 = com.google.cloud.bigquery.Field
							.newBuilder("max_units_quarter", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_8.add(field_4);

					com.google.cloud.bigquery.Field field_5 = com.google.cloud.bigquery.Field
							.newBuilder("max_units_semi_annual", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_8.add(field_5);

					com.google.cloud.bigquery.Field field_6 = com.google.cloud.bigquery.Field
							.newBuilder("max_units_year", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_8.add(field_6);

					com.google.cloud.bigquery.Field field_7 = com.google.cloud.bigquery.Field
							.newBuilder("max_units_total", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_8.add(field_7);

					com.google.cloud.bigquery.Schema schema_tBigQueryOutput_8 = com.google.cloud.bigquery.Schema
							.of(fields_tBigQueryOutput_8);
					com.google.cloud.bigquery.TableInfo tableInfo_tBigQueryOutput_8 = com.google.cloud.bigquery.TableInfo
							.newBuilder(tableId_tBigQueryOutput_8,
									com.google.cloud.bigquery.StandardTableDefinition.of(schema_tBigQueryOutput_8))
							.build();
					com.google.cloud.bigquery.Table table_tBigQueryOutput_8 = bigquery_tBigQueryOutput_8
							.create(tableInfo_tBigQueryOutput_8);
					loadJobBuilder_tBigQueryOutput_8.setSchema(schema_tBigQueryOutput_8);
					loadJobBuilder_tBigQueryOutput_8
							.setCreateDisposition(com.google.cloud.bigquery.JobInfo.CreateDisposition.CREATE_IF_NEEDED);

				} else {
					loadJobBuilder_tBigQueryOutput_8
							.setCreateDisposition(com.google.cloud.bigquery.JobInfo.CreateDisposition.CREATE_NEVER);
				}

				loadJobBuilder_tBigQueryOutput_8
						.setWriteDisposition(com.google.cloud.bigquery.JobInfo.WriteDisposition.WRITE_TRUNCATE);
				loadJobBuilder_tBigQueryOutput_8.setDestinationTable(tableId_tBigQueryOutput_8);
				com.google.cloud.bigquery.CsvOptions.Builder csvOptions_tBigQueryOutput_8 = com.google.cloud.bigquery.CsvOptions
						.newBuilder();
				csvOptions_tBigQueryOutput_8.setAllowQuotedNewLines(true);
				csvOptions_tBigQueryOutput_8.setSkipLeadingRows(0);

				csvOptions_tBigQueryOutput_8.setFieldDelimiter(",");

				loadJobBuilder_tBigQueryOutput_8.setFormatOptions(csvOptions_tBigQueryOutput_8.build());
				loadJobBuilder_tBigQueryOutput_8.setNullMarker("\\N");
				com.google.cloud.bigquery.Job job_tBigQueryOutput_8 = bigquery_tBigQueryOutput_8
						.create(com.google.cloud.bigquery.JobInfo.of(loadJobBuilder_tBigQueryOutput_8.build()));
				job_tBigQueryOutput_8 = job_tBigQueryOutput_8
						.waitFor(com.google.cloud.RetryOption.initialRetryDelay(org.threeten.bp.Duration.ofSeconds(1)));
				com.google.gson.Gson gsonObject_tBigQueryOutput_8 = new com.google.gson.Gson();
				if (job_tBigQueryOutput_8 != null && job_tBigQueryOutput_8.getStatus().getError() == null) {
					globalMap.put("tBigQueryOutput_8_JOBID", job_tBigQueryOutput_8.getJobId().getJob());
					globalMap.put("tBigQueryOutput_8_STATISTICS",
							gsonObject_tBigQueryOutput_8.toJson(job_tBigQueryOutput_8.getStatistics()));

				} else {
					if (job_tBigQueryOutput_8 == null) {
						throw new RuntimeException("Job no longer exists");
					}
					globalMap.put("tBigQueryOutput_8_JOBID", job_tBigQueryOutput_8.getJobId().getJob());
					globalMap.put("tBigQueryOutput_8_STATISTICS",
							gsonObject_tBigQueryOutput_8.toJson(job_tBigQueryOutput_8.getStatistics()));
					List<com.google.cloud.bigquery.BigQueryError> errorList = job_tBigQueryOutput_8.getStatus()
							.getExecutionErrors();
					throw new RuntimeException("Job failed: " + errorList.get(errorList.size() - 1));
				}

				/* ----END-CREATING-JOB (Cloud API)---- */

				/**
				 * [tBigQueryOutput_8_tBQBE begin ] stop
				 */

				/**
				 * [tBigQueryOutput_8_tBQBE main ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_8";

				currentComponent = "tBigQueryOutput_8_tBQBE";

				tos_count_tBigQueryOutput_8_tBQBE++;

				/**
				 * [tBigQueryOutput_8_tBQBE main ] stop
				 */

				/**
				 * [tBigQueryOutput_8_tBQBE process_data_begin ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_8";

				currentComponent = "tBigQueryOutput_8_tBQBE";

				/**
				 * [tBigQueryOutput_8_tBQBE process_data_begin ] stop
				 */

				/**
				 * [tBigQueryOutput_8_tBQBE process_data_end ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_8";

				currentComponent = "tBigQueryOutput_8_tBQBE";

				/**
				 * [tBigQueryOutput_8_tBQBE process_data_end ] stop
				 */

				/**
				 * [tBigQueryOutput_8_tBQBE end ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_8";

				currentComponent = "tBigQueryOutput_8_tBQBE";

				ok_Hash.put("tBigQueryOutput_8_tBQBE", true);
				end_Hash.put("tBigQueryOutput_8_tBQBE", System.currentTimeMillis());

				/**
				 * [tBigQueryOutput_8_tBQBE end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_8:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk8", 0, "ok");
			}

			tDBInput_9Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_8 finally ] start
				 */

				currentComponent = "tDBInput_8";

				/**
				 * [tDBInput_8 finally ] stop
				 */

				/**
				 * [tBigQueryOutput_8_tBQOB finally ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_8";

				currentComponent = "tBigQueryOutput_8_tBQOB";

				if (resourceMap.get("finish_tBigQueryOutput_8_tBQOB") == null) {
					if (resourceMap.get("csvWriter_tBigQueryOutput_8_tBQOB") != null) {
						((com.talend.csv.CSVWriter) resourceMap.get("csvWriter_tBigQueryOutput_8_tBQOB")).close();
					}
				}

				/**
				 * [tBigQueryOutput_8_tBQOB finally ] stop
				 */

				/**
				 * [tBigQueryOutput_8_tBQBE finally ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_8";

				currentComponent = "tBigQueryOutput_8_tBQBE";

				/**
				 * [tBigQueryOutput_8_tBQBE finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_8_SUBPROCESS_STATE", 1);
	}

	public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_ONTARGET_load_dim = new byte[0];
		static byte[] commonByteArray_ONTARGET_load_dim = new byte[0];

		public Integer date_id;

		public Integer getDate_id() {
			return this.date_id;
		}

		public java.util.Date date;

		public java.util.Date getDate() {
			return this.date;
		}

		public Integer year;

		public Integer getYear() {
			return this.year;
		}

		public Integer quarter;

		public Integer getQuarter() {
			return this.quarter;
		}

		public Integer month;

		public Integer getMonth() {
			return this.month;
		}

		public String day;

		public String getDay() {
			return this.day;
		}

		public Integer week_number;

		public Integer getWeek_number() {
			return this.week_number;
		}

		public Integer day_number_of_week;

		public Integer getDay_number_of_week() {
			return this.day_number_of_week;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ONTARGET_load_dim.length) {
					if (length < 1024 && commonByteArray_ONTARGET_load_dim.length == 0) {
						commonByteArray_ONTARGET_load_dim = new byte[1024];
					} else {
						commonByteArray_ONTARGET_load_dim = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ONTARGET_load_dim, 0, length);
				strReturn = new String(commonByteArray_ONTARGET_load_dim, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ONTARGET_load_dim.length) {
					if (length < 1024 && commonByteArray_ONTARGET_load_dim.length == 0) {
						commonByteArray_ONTARGET_load_dim = new byte[1024];
					} else {
						commonByteArray_ONTARGET_load_dim = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_ONTARGET_load_dim, 0, length);
				strReturn = new String(commonByteArray_ONTARGET_load_dim, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ONTARGET_load_dim) {

				try {

					int length = 0;

					this.date_id = readInteger(dis);

					this.date = readDate(dis);

					this.year = readInteger(dis);

					this.quarter = readInteger(dis);

					this.month = readInteger(dis);

					this.day = readString(dis);

					this.week_number = readInteger(dis);

					this.day_number_of_week = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ONTARGET_load_dim) {

				try {

					int length = 0;

					this.date_id = readInteger(dis);

					this.date = readDate(dis);

					this.year = readInteger(dis);

					this.quarter = readInteger(dis);

					this.month = readInteger(dis);

					this.day = readString(dis);

					this.week_number = readInteger(dis);

					this.day_number_of_week = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.date_id, dos);

				// java.util.Date

				writeDate(this.date, dos);

				// Integer

				writeInteger(this.year, dos);

				// Integer

				writeInteger(this.quarter, dos);

				// Integer

				writeInteger(this.month, dos);

				// String

				writeString(this.day, dos);

				// Integer

				writeInteger(this.week_number, dos);

				// Integer

				writeInteger(this.day_number_of_week, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.date_id, dos);

				// java.util.Date

				writeDate(this.date, dos);

				// Integer

				writeInteger(this.year, dos);

				// Integer

				writeInteger(this.quarter, dos);

				// Integer

				writeInteger(this.month, dos);

				// String

				writeString(this.day, dos);

				// Integer

				writeInteger(this.week_number, dos);

				// Integer

				writeInteger(this.day_number_of_week, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("date_id=" + String.valueOf(date_id));
			sb.append(",date=" + String.valueOf(date));
			sb.append(",year=" + String.valueOf(year));
			sb.append(",quarter=" + String.valueOf(quarter));
			sb.append(",month=" + String.valueOf(month));
			sb.append(",day=" + day);
			sb.append(",week_number=" + String.valueOf(week_number));
			sb.append(",day_number_of_week=" + String.valueOf(day_number_of_week));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row9Struct row9 = new row9Struct();

				/**
				 * [tBigQueryOutput_9_tBQOB begin ] start
				 */

				ok_Hash.put("tBigQueryOutput_9_tBQOB", false);
				start_Hash.put("tBigQueryOutput_9_tBQOB", System.currentTimeMillis());

				currentVirtualComponent = "tBigQueryOutput_9";

				currentComponent = "tBigQueryOutput_9_tBQOB";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row9");
				}

				int tos_count_tBigQueryOutput_9_tBQOB = 0;

				int nb_line_tBigQueryOutput_9_tBQOB = 0;
				String rowSeparator_tBigQueryOutput_9_tBQOB = "\n";
				String fieldSeparator_tBigQueryOutput_9_tBQOB = ",";
				char escapeChar_tBigQueryOutput_9_tBQOB = "\\".charAt(0);
				char textEnclosure_tBigQueryOutput_9_tBQOB = "\"".charAt(0);

				escapeChar_tBigQueryOutput_9_tBQOB = textEnclosure_tBigQueryOutput_9_tBQOB;

				if (escapeChar_tBigQueryOutput_9_tBQOB == '\\') {
				} else if (escapeChar_tBigQueryOutput_9_tBQOB == textEnclosure_tBigQueryOutput_9_tBQOB) {
				} else {
					throw new RuntimeException("The escape mode only support the '\\' or double text enclosure.");
				}

				java.io.File file_tBigQueryOutput_9_tBQOB = new java.io.File(
						"/Applications/TOSDI-8.0.1/studio/workspace/date_data.avro");

				file_tBigQueryOutput_9_tBQOB.getParentFile().mkdirs();

				com.talend.csv.CSVWriter csvWriter_tBigQueryOutput_9_tBQOB = new com.talend.csv.CSVWriter(
						new java.io.BufferedWriter(new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(file_tBigQueryOutput_9_tBQOB, false), "ISO-8859-15")));
				resourceMap.put("csvWriter_tBigQueryOutput_9_tBQOB", csvWriter_tBigQueryOutput_9_tBQOB);
				csvWriter_tBigQueryOutput_9_tBQOB.setSeparator(fieldSeparator_tBigQueryOutput_9_tBQOB.charAt(0));

				csvWriter_tBigQueryOutput_9_tBQOB.setLineEnd(rowSeparator_tBigQueryOutput_9_tBQOB);
				csvWriter_tBigQueryOutput_9_tBQOB.setEscapeChar(escapeChar_tBigQueryOutput_9_tBQOB);
				csvWriter_tBigQueryOutput_9_tBQOB.setQuoteChar(textEnclosure_tBigQueryOutput_9_tBQOB);
				csvWriter_tBigQueryOutput_9_tBQOB.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.AUTO);

				/**
				 * [tBigQueryOutput_9_tBQOB begin ] stop
				 */

				/**
				 * [tDBInput_9 begin ] start
				 */

				ok_Hash.put("tDBInput_9", false);
				start_Hash.put("tDBInput_9", System.currentTimeMillis());

				currentComponent = "tDBInput_9";

				int tos_count_tDBInput_9 = 0;

				int nb_line_tDBInput_9 = 0;
				java.sql.Connection conn_tDBInput_9 = null;
				String driverClass_tDBInput_9 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBInput_9 = java.lang.Class.forName(driverClass_tDBInput_9);
				String dbUser_tDBInput_9 = "postgres";

				final String decryptedPassword_tDBInput_9 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:5GsXgDZxjQwNrsYtUHi5pg6FbliW0w0flRbq3PVCz+GvAtMWA/o=");

				String dbPwd_tDBInput_9 = decryptedPassword_tDBInput_9;

				String url_tDBInput_9 = "jdbc:postgresql://" + "localhost" + ":" + "5431" + "/" + "OnTarget";

				conn_tDBInput_9 = java.sql.DriverManager.getConnection(url_tDBInput_9, dbUser_tDBInput_9,
						dbPwd_tDBInput_9);

				conn_tDBInput_9.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_9 = conn_tDBInput_9.createStatement();

				String dbquery_tDBInput_9 = "select to_char(date, 'YYYYMMDD')::integer as date_id,\n        date::date,\n        cast(extract('year' from date) as int"
						+ ") as year,\n        cast(extract('quarter' from date) as int) as quarter,\n        cast(extract('month' from date) as int)"
						+ " as month,\n        to_char(date, 'dy') as day,\n        cast(extract('week' from date) as int) as week_number,\n        ca"
						+ "st(extract('isodow' from date) as int) as day_number_of_week\n        from generate_series(date '2012-01-01',date '2062-0"
						+ "1-01',interval '1 day') as t(date)";

				globalMap.put("tDBInput_9_QUERY", dbquery_tDBInput_9);
				java.sql.ResultSet rs_tDBInput_9 = null;

				try {
					rs_tDBInput_9 = stmt_tDBInput_9.executeQuery(dbquery_tDBInput_9);
					java.sql.ResultSetMetaData rsmd_tDBInput_9 = rs_tDBInput_9.getMetaData();
					int colQtyInRs_tDBInput_9 = rsmd_tDBInput_9.getColumnCount();

					String tmpContent_tDBInput_9 = null;

					while (rs_tDBInput_9.next()) {
						nb_line_tDBInput_9++;

						if (colQtyInRs_tDBInput_9 < 1) {
							row9.date_id = null;
						} else {

							row9.date_id = rs_tDBInput_9.getInt(1);
							if (rs_tDBInput_9.wasNull()) {
								row9.date_id = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 2) {
							row9.date = null;
						} else {

							row9.date = routines.system.JDBCUtil.getDate(rs_tDBInput_9, 2);
						}
						if (colQtyInRs_tDBInput_9 < 3) {
							row9.year = null;
						} else {

							row9.year = rs_tDBInput_9.getInt(3);
							if (rs_tDBInput_9.wasNull()) {
								row9.year = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 4) {
							row9.quarter = null;
						} else {

							row9.quarter = rs_tDBInput_9.getInt(4);
							if (rs_tDBInput_9.wasNull()) {
								row9.quarter = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 5) {
							row9.month = null;
						} else {

							row9.month = rs_tDBInput_9.getInt(5);
							if (rs_tDBInput_9.wasNull()) {
								row9.month = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 6) {
							row9.day = null;
						} else {

							row9.day = routines.system.JDBCUtil.getString(rs_tDBInput_9, 6, false);
						}
						if (colQtyInRs_tDBInput_9 < 7) {
							row9.week_number = null;
						} else {

							row9.week_number = rs_tDBInput_9.getInt(7);
							if (rs_tDBInput_9.wasNull()) {
								row9.week_number = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 8) {
							row9.day_number_of_week = null;
						} else {

							row9.day_number_of_week = rs_tDBInput_9.getInt(8);
							if (rs_tDBInput_9.wasNull()) {
								row9.day_number_of_week = null;
							}
						}

						/**
						 * [tDBInput_9 begin ] stop
						 */

						/**
						 * [tDBInput_9 main ] start
						 */

						currentComponent = "tDBInput_9";

						tos_count_tDBInput_9++;

						/**
						 * [tDBInput_9 main ] stop
						 */

						/**
						 * [tDBInput_9 process_data_begin ] start
						 */

						currentComponent = "tDBInput_9";

						/**
						 * [tDBInput_9 process_data_begin ] stop
						 */

						/**
						 * [tBigQueryOutput_9_tBQOB main ] start
						 */

						currentVirtualComponent = "tBigQueryOutput_9";

						currentComponent = "tBigQueryOutput_9_tBQOB";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row9"

							);
						}

						String[] row_tBigQueryOutput_9_tBQOB = new String[8];
						java.util.Arrays.fill(row_tBigQueryOutput_9_tBQOB, "\\N");

						int curColumnIndex_tBigQueryOutput_9_tBQOB = 0;

						curColumnIndex_tBigQueryOutput_9_tBQOB = 0;

						if (row9.date_id != null) {

							row_tBigQueryOutput_9_tBQOB[curColumnIndex_tBigQueryOutput_9_tBQOB] = String
									.valueOf(row9.date_id);

						} else {
							row_tBigQueryOutput_9_tBQOB[curColumnIndex_tBigQueryOutput_9_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_9_tBQOB = 1;

						if (row9.date != null) {

							row_tBigQueryOutput_9_tBQOB[curColumnIndex_tBigQueryOutput_9_tBQOB] = FormatterUtils
									.format_Date(row9.date, "yyyy-MM-dd");

						} else {
							row_tBigQueryOutput_9_tBQOB[curColumnIndex_tBigQueryOutput_9_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_9_tBQOB = 2;

						if (row9.year != null) {

							row_tBigQueryOutput_9_tBQOB[curColumnIndex_tBigQueryOutput_9_tBQOB] = String
									.valueOf(row9.year);

						} else {
							row_tBigQueryOutput_9_tBQOB[curColumnIndex_tBigQueryOutput_9_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_9_tBQOB = 3;

						if (row9.quarter != null) {

							row_tBigQueryOutput_9_tBQOB[curColumnIndex_tBigQueryOutput_9_tBQOB] = String
									.valueOf(row9.quarter);

						} else {
							row_tBigQueryOutput_9_tBQOB[curColumnIndex_tBigQueryOutput_9_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_9_tBQOB = 4;

						if (row9.month != null) {

							row_tBigQueryOutput_9_tBQOB[curColumnIndex_tBigQueryOutput_9_tBQOB] = String
									.valueOf(row9.month);

						} else {
							row_tBigQueryOutput_9_tBQOB[curColumnIndex_tBigQueryOutput_9_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_9_tBQOB = 5;

						if (row9.day != null) {

							row_tBigQueryOutput_9_tBQOB[curColumnIndex_tBigQueryOutput_9_tBQOB] = row9.day;

						} else {
							row_tBigQueryOutput_9_tBQOB[curColumnIndex_tBigQueryOutput_9_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_9_tBQOB = 6;

						if (row9.week_number != null) {

							row_tBigQueryOutput_9_tBQOB[curColumnIndex_tBigQueryOutput_9_tBQOB] = String
									.valueOf(row9.week_number);

						} else {
							row_tBigQueryOutput_9_tBQOB[curColumnIndex_tBigQueryOutput_9_tBQOB] = "\\N";
						}

						curColumnIndex_tBigQueryOutput_9_tBQOB = 7;

						if (row9.day_number_of_week != null) {

							row_tBigQueryOutput_9_tBQOB[curColumnIndex_tBigQueryOutput_9_tBQOB] = String
									.valueOf(row9.day_number_of_week);

						} else {
							row_tBigQueryOutput_9_tBQOB[curColumnIndex_tBigQueryOutput_9_tBQOB] = "\\N";
						}

						csvWriter_tBigQueryOutput_9_tBQOB.writeNextEnhance(row_tBigQueryOutput_9_tBQOB, "");
						nb_line_tBigQueryOutput_9_tBQOB++;

						tos_count_tBigQueryOutput_9_tBQOB++;

						/**
						 * [tBigQueryOutput_9_tBQOB main ] stop
						 */

						/**
						 * [tBigQueryOutput_9_tBQOB process_data_begin ] start
						 */

						currentVirtualComponent = "tBigQueryOutput_9";

						currentComponent = "tBigQueryOutput_9_tBQOB";

						/**
						 * [tBigQueryOutput_9_tBQOB process_data_begin ] stop
						 */

						/**
						 * [tBigQueryOutput_9_tBQOB process_data_end ] start
						 */

						currentVirtualComponent = "tBigQueryOutput_9";

						currentComponent = "tBigQueryOutput_9_tBQOB";

						/**
						 * [tBigQueryOutput_9_tBQOB process_data_end ] stop
						 */

						/**
						 * [tDBInput_9 process_data_end ] start
						 */

						currentComponent = "tDBInput_9";

						/**
						 * [tDBInput_9 process_data_end ] stop
						 */

						/**
						 * [tDBInput_9 end ] start
						 */

						currentComponent = "tDBInput_9";

					}
				} finally {
					if (rs_tDBInput_9 != null) {
						rs_tDBInput_9.close();
					}
					if (stmt_tDBInput_9 != null) {
						stmt_tDBInput_9.close();
					}
					if (conn_tDBInput_9 != null && !conn_tDBInput_9.isClosed()) {

						conn_tDBInput_9.commit();

						conn_tDBInput_9.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}
				globalMap.put("tDBInput_9_NB_LINE", nb_line_tDBInput_9);

				ok_Hash.put("tDBInput_9", true);
				end_Hash.put("tDBInput_9", System.currentTimeMillis());

				/**
				 * [tDBInput_9 end ] stop
				 */

				/**
				 * [tBigQueryOutput_9_tBQOB end ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_9";

				currentComponent = "tBigQueryOutput_9_tBQOB";

				if (csvWriter_tBigQueryOutput_9_tBQOB != null) {
					csvWriter_tBigQueryOutput_9_tBQOB.close();
				}
				resourceMap.put("finish_tBigQueryOutput_9_tBQOB", true);
				globalMap.put("tBigQueryOutput_9_tBQOB_NB_LINE", nb_line_tBigQueryOutput_9_tBQOB);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row9");
				}

				ok_Hash.put("tBigQueryOutput_9_tBQOB", true);
				end_Hash.put("tBigQueryOutput_9_tBQOB", System.currentTimeMillis());

				/**
				 * [tBigQueryOutput_9_tBQOB end ] stop
				 */

				/**
				 * [tBigQueryOutput_9_tBQBE begin ] start
				 */

				ok_Hash.put("tBigQueryOutput_9_tBQBE", false);
				start_Hash.put("tBigQueryOutput_9_tBQBE", System.currentTimeMillis());

				currentVirtualComponent = "tBigQueryOutput_9";

				currentComponent = "tBigQueryOutput_9_tBQBE";

				int tos_count_tBigQueryOutput_9_tBQBE = 0;

				/* ----START-CREATING-CLIENT (Cloud API)---- */

				com.google.auth.oauth2.GoogleCredentials credentials_tBigQueryOutput_9;
				java.io.File credentialsFile_tBigQueryOutput_9 = new java.io.File(
						"/Users/jsun/Documents/WCIWork/OnTarget/code/otmirror-060322-9471bb896012.json");
				try (java.io.FileInputStream credentialsStream_tBigQueryOutput_9 = new java.io.FileInputStream(
						credentialsFile_tBigQueryOutput_9)) {
					credentials_tBigQueryOutput_9 = com.google.auth.oauth2.ServiceAccountCredentials
							.fromStream(credentialsStream_tBigQueryOutput_9);
				}

				com.google.cloud.bigquery.BigQuery bigquery_tBigQueryOutput_9 = com.google.cloud.bigquery.BigQueryOptions
						.newBuilder().setCredentials(credentials_tBigQueryOutput_9).setProjectId("otmirror-060322")
						.build().getService();

				/* ----END-CREATING-CLIENT (Cloud API)---- */

				long nb_line_tBigQueryOutput_9 = 0;

				com.google.auth.Credentials credential_tBigQueryOutput_9 = null;
				try {
					credential_tBigQueryOutput_9 = com.google.auth.oauth2.GoogleCredentials
							.fromStream(new java.io.FileInputStream(
									"/Users/jsun/Documents/WCIWork/OnTarget/code/otmirror-060322-9471bb896012.json"));
				} catch (IOException e_tBigQueryOutput_9) {
					globalMap.put("tBigQueryOutput_9_ERROR_MESSAGE", e_tBigQueryOutput_9.getMessage());
				}
				com.google.cloud.storage.Storage storage_tBigQueryOutput_9 = com.google.cloud.storage.StorageOptions
						.newBuilder().setCredentials(credential_tBigQueryOutput_9).build().getService();

				java.io.File file_tBigQueryOutput_9 = new java.io.File(
						"/Applications/TOSDI-8.0.1/studio/workspace/date_data.avro");

				com.google.cloud.storage.BlobInfo blobInfo_tBigQueryOutput_9 = com.google.cloud.storage.BlobInfo
						.newBuilder("dw-tmp", file_tBigQueryOutput_9.getName()).build();
				storage_tBigQueryOutput_9.create(blobInfo_tBigQueryOutput_9,
						java.nio.file.Files.readAllBytes(file_tBigQueryOutput_9.toPath()));

				/* ----END-UPLOADING-FILE---- */

				/* ----START-CREATING-JOB (Cloud API)---- */
				com.google.cloud.bigquery.TableId tableId_tBigQueryOutput_9 = com.google.cloud.bigquery.TableId
						.of("otmirror-060322", "DW", "dim_date");
				com.google.cloud.bigquery.LoadJobConfiguration.Builder loadJobBuilder_tBigQueryOutput_9 = com.google.cloud.bigquery.LoadJobConfiguration
						.newBuilder(tableId_tBigQueryOutput_9, "gs://dw-tmp/date_data.avro");

				boolean dropTable_tBigQueryOutput_9 = false;

				if (dropTable_tBigQueryOutput_9
						&& bigquery_tBigQueryOutput_9.getTable(tableId_tBigQueryOutput_9) != null) {
					boolean deleted = bigquery_tBigQueryOutput_9.delete(tableId_tBigQueryOutput_9);
					if (deleted) {

					} else {
						throw new RuntimeException("Unable to delete table " + tableId_tBigQueryOutput_9);
					}
				}

				if (bigquery_tBigQueryOutput_9.getTable(tableId_tBigQueryOutput_9) == null) {
					java.util.List<com.google.cloud.bigquery.Field> fields_tBigQueryOutput_9 = new java.util.ArrayList<>();

					com.google.cloud.bigquery.Field field_0 = com.google.cloud.bigquery.Field
							.newBuilder("date_id", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_9.add(field_0);

					com.google.cloud.bigquery.Field field_1 = com.google.cloud.bigquery.Field
							.newBuilder("date", com.google.cloud.bigquery.LegacySQLTypeName.DATE)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_9.add(field_1);

					com.google.cloud.bigquery.Field field_2 = com.google.cloud.bigquery.Field
							.newBuilder("year", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_9.add(field_2);

					com.google.cloud.bigquery.Field field_3 = com.google.cloud.bigquery.Field
							.newBuilder("quarter", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_9.add(field_3);

					com.google.cloud.bigquery.Field field_4 = com.google.cloud.bigquery.Field
							.newBuilder("month", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_9.add(field_4);

					com.google.cloud.bigquery.Field field_5 = com.google.cloud.bigquery.Field
							.newBuilder("day", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_9.add(field_5);

					com.google.cloud.bigquery.Field field_6 = com.google.cloud.bigquery.Field
							.newBuilder("week_number", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_9.add(field_6);

					com.google.cloud.bigquery.Field field_7 = com.google.cloud.bigquery.Field
							.newBuilder("day_number_of_week", com.google.cloud.bigquery.LegacySQLTypeName.INTEGER)
							.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
					fields_tBigQueryOutput_9.add(field_7);

					com.google.cloud.bigquery.Schema schema_tBigQueryOutput_9 = com.google.cloud.bigquery.Schema
							.of(fields_tBigQueryOutput_9);
					com.google.cloud.bigquery.TableInfo tableInfo_tBigQueryOutput_9 = com.google.cloud.bigquery.TableInfo
							.newBuilder(tableId_tBigQueryOutput_9,
									com.google.cloud.bigquery.StandardTableDefinition.of(schema_tBigQueryOutput_9))
							.build();
					com.google.cloud.bigquery.Table table_tBigQueryOutput_9 = bigquery_tBigQueryOutput_9
							.create(tableInfo_tBigQueryOutput_9);
					loadJobBuilder_tBigQueryOutput_9.setSchema(schema_tBigQueryOutput_9);
					loadJobBuilder_tBigQueryOutput_9
							.setCreateDisposition(com.google.cloud.bigquery.JobInfo.CreateDisposition.CREATE_IF_NEEDED);

				} else {
					loadJobBuilder_tBigQueryOutput_9
							.setCreateDisposition(com.google.cloud.bigquery.JobInfo.CreateDisposition.CREATE_NEVER);
				}

				loadJobBuilder_tBigQueryOutput_9
						.setWriteDisposition(com.google.cloud.bigquery.JobInfo.WriteDisposition.WRITE_TRUNCATE);
				loadJobBuilder_tBigQueryOutput_9.setDestinationTable(tableId_tBigQueryOutput_9);
				com.google.cloud.bigquery.CsvOptions.Builder csvOptions_tBigQueryOutput_9 = com.google.cloud.bigquery.CsvOptions
						.newBuilder();
				csvOptions_tBigQueryOutput_9.setAllowQuotedNewLines(true);
				csvOptions_tBigQueryOutput_9.setSkipLeadingRows(0);

				csvOptions_tBigQueryOutput_9.setFieldDelimiter(",");

				loadJobBuilder_tBigQueryOutput_9.setFormatOptions(csvOptions_tBigQueryOutput_9.build());
				loadJobBuilder_tBigQueryOutput_9.setNullMarker("\\N");
				com.google.cloud.bigquery.Job job_tBigQueryOutput_9 = bigquery_tBigQueryOutput_9
						.create(com.google.cloud.bigquery.JobInfo.of(loadJobBuilder_tBigQueryOutput_9.build()));
				job_tBigQueryOutput_9 = job_tBigQueryOutput_9
						.waitFor(com.google.cloud.RetryOption.initialRetryDelay(org.threeten.bp.Duration.ofSeconds(1)));
				com.google.gson.Gson gsonObject_tBigQueryOutput_9 = new com.google.gson.Gson();
				if (job_tBigQueryOutput_9 != null && job_tBigQueryOutput_9.getStatus().getError() == null) {
					globalMap.put("tBigQueryOutput_9_JOBID", job_tBigQueryOutput_9.getJobId().getJob());
					globalMap.put("tBigQueryOutput_9_STATISTICS",
							gsonObject_tBigQueryOutput_9.toJson(job_tBigQueryOutput_9.getStatistics()));

				} else {
					if (job_tBigQueryOutput_9 == null) {
						throw new RuntimeException("Job no longer exists");
					}
					globalMap.put("tBigQueryOutput_9_JOBID", job_tBigQueryOutput_9.getJobId().getJob());
					globalMap.put("tBigQueryOutput_9_STATISTICS",
							gsonObject_tBigQueryOutput_9.toJson(job_tBigQueryOutput_9.getStatistics()));
					List<com.google.cloud.bigquery.BigQueryError> errorList = job_tBigQueryOutput_9.getStatus()
							.getExecutionErrors();
					throw new RuntimeException("Job failed: " + errorList.get(errorList.size() - 1));
				}

				/* ----END-CREATING-JOB (Cloud API)---- */

				/**
				 * [tBigQueryOutput_9_tBQBE begin ] stop
				 */

				/**
				 * [tBigQueryOutput_9_tBQBE main ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_9";

				currentComponent = "tBigQueryOutput_9_tBQBE";

				tos_count_tBigQueryOutput_9_tBQBE++;

				/**
				 * [tBigQueryOutput_9_tBQBE main ] stop
				 */

				/**
				 * [tBigQueryOutput_9_tBQBE process_data_begin ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_9";

				currentComponent = "tBigQueryOutput_9_tBQBE";

				/**
				 * [tBigQueryOutput_9_tBQBE process_data_begin ] stop
				 */

				/**
				 * [tBigQueryOutput_9_tBQBE process_data_end ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_9";

				currentComponent = "tBigQueryOutput_9_tBQBE";

				/**
				 * [tBigQueryOutput_9_tBQBE process_data_end ] stop
				 */

				/**
				 * [tBigQueryOutput_9_tBQBE end ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_9";

				currentComponent = "tBigQueryOutput_9_tBQBE";

				ok_Hash.put("tBigQueryOutput_9_tBQBE", true);
				end_Hash.put("tBigQueryOutput_9_tBQBE", System.currentTimeMillis());

				/**
				 * [tBigQueryOutput_9_tBQBE end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_9 finally ] start
				 */

				currentComponent = "tDBInput_9";

				/**
				 * [tDBInput_9 finally ] stop
				 */

				/**
				 * [tBigQueryOutput_9_tBQOB finally ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_9";

				currentComponent = "tBigQueryOutput_9_tBQOB";

				if (resourceMap.get("finish_tBigQueryOutput_9_tBQOB") == null) {
					if (resourceMap.get("csvWriter_tBigQueryOutput_9_tBQOB") != null) {
						((com.talend.csv.CSVWriter) resourceMap.get("csvWriter_tBigQueryOutput_9_tBQOB")).close();
					}
				}

				/**
				 * [tBigQueryOutput_9_tBQOB finally ] stop
				 */

				/**
				 * [tBigQueryOutput_9_tBQBE finally ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_9";

				currentComponent = "tBigQueryOutput_9_tBQBE";

				/**
				 * [tBigQueryOutput_9_tBQBE finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_9_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	protected PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final load_dim load_dimClass = new load_dim();

		int exitCode = load_dimClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}
		boolean inOSGi = routines.system.BundleUtils.inOSGi();

		if (inOSGi) {
			java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

			if (jobProperties != null && jobProperties.get("context") != null) {
				contextStr = (String) jobProperties.get("context");
			}
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = load_dim.class.getClassLoader()
					.getResourceAsStream("ontarget/load_dim_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = load_dim.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				try {
					// defaultProps is in order to keep the original context value
					if (context != null && context.isEmpty()) {
						defaultProps.load(inContext);
						context = new ContextProperties(defaultProps);
					}
				} finally {
					inContext.close();
				}
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tDBInput_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_1) {
			globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

			e_tDBInput_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : load_dim");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;

		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 449072 characters generated by Talend Open Studio for Data Integration on the
 * July 20, 2022 at 11:46:12 AM CDT
 ************************************************************************************************/